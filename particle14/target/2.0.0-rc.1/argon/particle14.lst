
/Users/FreshSurety3/Desktop/particle14/particle14/target/2.0.0-rc.1/argon/particle14.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005944  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d9960  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000070  2003de78  000d9964  0001de78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000908  2003dee8  2003dee8  0002dee8  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d99d4  000d99d4  000299d4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d99fc  000d99fc  000299fc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0010eab9  00000000  00000000  00029a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000121f1  00000000  00000000  001384b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00029deb  00000000  00000000  0014a6aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000025d0  00000000  00000000  00174495  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00007408  00000000  00000000  00176a65  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00032dec  00000000  00000000  0017de6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002f56b  00000000  00000000  001b0c59  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00108bfa  00000000  00000000  001e01c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000069bc  00000000  00000000  002e8dc0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f004 fefd 	bl	d8e2c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f004 ff1f 	bl	d8e7c <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003de78 	.word	0x2003de78
   d4048:	000d9964 	.word	0x000d9964
   d404c:	2003dee8 	.word	0x2003dee8
   d4050:	2003dee8 	.word	0x2003dee8
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f004 fd79 	bl	d8b54 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d9938 	.word	0x000d9938
   d407c:	000d995c 	.word	0x000d995c

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b8c6 	b.w	d4210 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f943 	bl	d4310 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f004 bd23 	b.w	d8ad8 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f000 be9f 	b.w	d4dd4 <malloc>

000d4096 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d4096:	f000 bea5 	b.w	d4de4 <free>
	...

000d409c <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d409c:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d409e:	4a03      	ldr	r2, [pc, #12]	; (d40ac <__cxa_pure_virtual+0x10>)
   d40a0:	2100      	movs	r1, #0
   d40a2:	200c      	movs	r0, #12
   d40a4:	f000 fdd2 	bl	d4c4c <panic_>
  while (1);
   d40a8:	e7fe      	b.n	d40a8 <__cxa_pure_virtual+0xc>
   d40aa:	bf00      	nop
   d40ac:	000d4add 	.word	0x000d4add

000d40b0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b0:	7800      	ldrb	r0, [r0, #0]
   d40b2:	fab0 f080 	clz	r0, r0
   d40b6:	0940      	lsrs	r0, r0, #5
   d40b8:	4770      	bx	lr

000d40ba <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ba:	2301      	movs	r3, #1
   d40bc:	7003      	strb	r3, [r0, #0]
   d40be:	4770      	bx	lr

000d40c0 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   d40c0:	4770      	bx	lr

000d40c2 <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40c2:	6a00      	ldr	r0, [r0, #32]
   d40c4:	6803      	ldr	r3, [r0, #0]
   d40c6:	68db      	ldr	r3, [r3, #12]
   d40c8:	4718      	bx	r3
	...

000d40cc <_ZN10CloudClass7publishEPKcS1_.isra.0>:
// Deprecated methods
inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   d40cc:	b513      	push	{r0, r1, r4, lr}
   d40ce:	4b05      	ldr	r3, [pc, #20]	; (d40e4 <_ZN10CloudClass7publishEPKcS1_.isra.0+0x18>)
   d40d0:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40d2:	f88d 3000 	strb.w	r3, [sp]
   d40d6:	233c      	movs	r3, #60	; 0x3c
inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   d40d8:	4604      	mov	r4, r0
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40da:	f002 fd3d 	bl	d6b58 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, data, PUBLIC);
}
   d40de:	4620      	mov	r0, r4
   d40e0:	b002      	add	sp, #8
   d40e2:	bd10      	pop	{r4, pc}
   d40e4:	2003df00 	.word	0x2003df00

000d40e8 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d40e8:	4b0a      	ldr	r3, [pc, #40]	; (d4114 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d40ea:	b510      	push	{r4, lr}
   d40ec:	4604      	mov	r4, r0
   d40ee:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d40f0:	f003 fa76 	bl	d75e0 <_ZN5spark10LogManager8instanceEv>
   d40f4:	4621      	mov	r1, r4
   d40f6:	f003 fc78 	bl	d79ea <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d40fa:	f004 fc63 	bl	d89c4 <_Z16_fetch_usbserialv>
   d40fe:	f004 fc55 	bl	d89ac <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   d4102:	4620      	mov	r0, r4
   d4104:	4b04      	ldr	r3, [pc, #16]	; (d4118 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d4106:	f840 3b04 	str.w	r3, [r0], #4
   d410a:	f003 fb5b 	bl	d77c4 <_ZN5spark6detail9LogFilterD1Ev>
    }
   d410e:	4620      	mov	r0, r4
   d4110:	bd10      	pop	{r4, pc}
   d4112:	bf00      	nop
   d4114:	000d92cc 	.word	0x000d92cc
   d4118:	000d92b4 	.word	0x000d92b4

000d411c <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   d411c:	b510      	push	{r4, lr}
   d411e:	4604      	mov	r4, r0
    }
   d4120:	f7ff ffe2 	bl	d40e8 <_ZN5spark16SerialLogHandlerD1Ev>
   d4124:	4620      	mov	r0, r4
   d4126:	2124      	movs	r1, #36	; 0x24
   d4128:	f004 fd4b 	bl	d8bc2 <_ZdlPvj>
   d412c:	4620      	mov	r0, r4
   d412e:	bd10      	pop	{r4, pc}

000d4130 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d4130:	b40e      	push	{r1, r2, r3}
   d4132:	b510      	push	{r4, lr}
   d4134:	b08d      	sub	sp, #52	; 0x34
   d4136:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d4138:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d413a:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d413e:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4140:	2300      	movs	r3, #0
   d4142:	2020      	movs	r0, #32
   d4144:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4148:	e9cd 4200 	strd	r4, r2, [sp]
   d414c:	201e      	movs	r0, #30
   d414e:	aa04      	add	r2, sp, #16
   d4150:	f000 fd8c 	bl	d4c6c <log_message_v>
}
   d4154:	b00d      	add	sp, #52	; 0x34
   d4156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d415a:	b003      	add	sp, #12
   d415c:	4770      	bx	lr

000d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d415e:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4160:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d4162:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d4164:	b17c      	cbz	r4, d4186 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d4166:	6863      	ldr	r3, [r4, #4]
   d4168:	3b01      	subs	r3, #1
   d416a:	6063      	str	r3, [r4, #4]
   d416c:	b95b      	cbnz	r3, d4186 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d416e:	6823      	ldr	r3, [r4, #0]
   d4170:	4620      	mov	r0, r4
   d4172:	689b      	ldr	r3, [r3, #8]
   d4174:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4176:	68a3      	ldr	r3, [r4, #8]
   d4178:	3b01      	subs	r3, #1
   d417a:	60a3      	str	r3, [r4, #8]
   d417c:	b91b      	cbnz	r3, d4186 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d417e:	6823      	ldr	r3, [r4, #0]
   d4180:	4620      	mov	r0, r4
   d4182:	68db      	ldr	r3, [r3, #12]
   d4184:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d4186:	4628      	mov	r0, r5
   d4188:	bd38      	pop	{r3, r4, r5, pc}
	...

000d418c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
const unsigned long SCAN_PERIOD_MS = 2000;
unsigned long lastScan = 0;


void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) 
{
   d418c:	b590      	push	{r4, r7, lr}
    char str[len+1];
   d418e:	f101 0308 	add.w	r3, r1, #8
{
   d4192:	b089      	sub	sp, #36	; 0x24
    char str[len+1];
   d4194:	f023 0307 	bic.w	r3, r3, #7
{
   d4198:	af00      	add	r7, sp, #0
    char str[len+1];
   d419a:	ebad 0d03 	sub.w	sp, sp, r3
    memcpy(str, data, len);
   d419e:	460a      	mov	r2, r1
{
   d41a0:	460c      	mov	r4, r1
    memcpy(str, data, len);
   d41a2:	4601      	mov	r1, r0
   d41a4:	4668      	mov	r0, sp
   d41a6:	f004 fe41 	bl	d8e2c <memcpy>
    str[len] = '\0';
   d41aa:	2300      	movs	r3, #0
    if ((String)str == (String)"HELLO")
   d41ac:	4669      	mov	r1, sp
   d41ae:	4638      	mov	r0, r7
    str[len] = '\0';
   d41b0:	f80d 3004 	strb.w	r3, [sp, r4]
    if ((String)str == (String)"HELLO")
   d41b4:	f004 fa25 	bl	d8602 <_ZN6StringC1EPKc>
   d41b8:	4911      	ldr	r1, [pc, #68]	; (d4200 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x74>)
   d41ba:	f107 0010 	add.w	r0, r7, #16
   d41be:	f004 fa20 	bl	d8602 <_ZN6StringC1EPKc>
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   d41c2:	f107 0110 	add.w	r1, r7, #16
   d41c6:	4638      	mov	r0, r7
   d41c8:	f004 fabc 	bl	d8744 <_ZNK6String6equalsERKS_>
   d41cc:	4604      	mov	r4, r0
   d41ce:	f107 0010 	add.w	r0, r7, #16
   d41d2:	f004 f9cb 	bl	d856c <_ZN6StringD1Ev>
   d41d6:	4638      	mov	r0, r7
   d41d8:	f004 f9c8 	bl	d856c <_ZN6StringD1Ev>
   d41dc:	b164      	cbz	r4, d41f8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6c>
    {
      Particle.publish("SPECIAL MESSAGE", "SPECIAL MESSAGE RECEIVED");
   d41de:	4a09      	ldr	r2, [pc, #36]	; (d4204 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x78>)
   d41e0:	4909      	ldr	r1, [pc, #36]	; (d4208 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7c>)
    }
    else
    {
    Particle.publish("tupperware_upload",  str);
   d41e2:	f107 0010 	add.w	r0, r7, #16
   d41e6:	f7ff ff71 	bl	d40cc <_ZN10CloudClass7publishEPKcS1_.isra.0>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d41ea:	f107 0014 	add.w	r0, r7, #20
   d41ee:	f7ff ffb6 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
}
   d41f2:	3724      	adds	r7, #36	; 0x24
   d41f4:	46bd      	mov	sp, r7
   d41f6:	bd90      	pop	{r4, r7, pc}
    Particle.publish("tupperware_upload",  str);
   d41f8:	4904      	ldr	r1, [pc, #16]	; (d420c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x80>)
   d41fa:	466a      	mov	r2, sp
   d41fc:	e7f1      	b.n	d41e2 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x56>
   d41fe:	bf00      	nop
   d4200:	000d90f4 	.word	0x000d90f4
   d4204:	000d90fa 	.word	0x000d90fa
   d4208:	000d9113 	.word	0x000d9113
   d420c:	000d9123 	.word	0x000d9123

000d4210 <setup>:

// setup() runs once, when the device is first turned on.
void setup() 
{
   d4210:	b510      	push	{r4, lr}
   d4212:	b096      	sub	sp, #88	; 0x58
  // Put initialization like pinMode and begin functions here.

  Particle.publish("Target", "Tupperware_7,Tupperware_8,Tupperware_9");
   d4214:	4a35      	ldr	r2, [pc, #212]	; (d42ec <setup+0xdc>)
   d4216:	4936      	ldr	r1, [pc, #216]	; (d42f0 <setup+0xe0>)
   d4218:	a80d      	add	r0, sp, #52	; 0x34
   d421a:	f7ff ff57 	bl	d40cc <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d421e:	a80e      	add	r0, sp, #56	; 0x38
   d4220:	f7ff ff9d 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  Serial.begin();
   d4224:	f004 fbce 	bl	d89c4 <_Z16_fetch_usbserialv>
   d4228:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d422c:	f004 fbba 	bl	d89a4 <_ZN9USBSerial5beginEl>
  BLE.on();
   d4230:	f001 fc2e 	bl	d5a90 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4234:	f001 fc76 	bl	d5b24 <_ZNK8particle14BleLocalDevice2onEv>
  peerTxCharacteristic.onDataReceived(onDataReceived, &peerTxCharacteristic);
   d4238:	4a2e      	ldr	r2, [pc, #184]	; (d42f4 <setup+0xe4>)
   d423a:	492f      	ldr	r1, [pc, #188]	; (d42f8 <setup+0xe8>)
   d423c:	4610      	mov	r0, r2
   d423e:	f001 fac9 	bl	d57d4 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>


// start of ad
  BLE.addCharacteristic(txCharacteristic);
   d4242:	f001 fc25 	bl	d5a90 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4246:	4a2d      	ldr	r2, [pc, #180]	; (d42fc <setup+0xec>)
   d4248:	4601      	mov	r1, r0
   d424a:	a80d      	add	r0, sp, #52	; 0x34
   d424c:	f002 fa32 	bl	d66b4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d4250:	a80d      	add	r0, sp, #52	; 0x34
   d4252:	f001 fd09 	bl	d5c68 <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(rxCharacteristic);
   d4256:	f001 fc1b 	bl	d5a90 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d425a:	4a29      	ldr	r2, [pc, #164]	; (d4300 <setup+0xf0>)
   d425c:	4601      	mov	r1, r0
   d425e:	a80d      	add	r0, sp, #52	; 0x34
   d4260:	f002 fa28 	bl	d66b4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d4264:	a80d      	add	r0, sp, #52	; 0x34
   d4266:	f001 fcff 	bl	d5c68 <_ZN8particle17BleCharacteristicD1Ev>

  BleAdvertisingData data;
   d426a:	a80d      	add	r0, sp, #52	; 0x34
   d426c:	f001 f8bf 	bl	d53ee <_ZN8particle18BleAdvertisingDataC1Ev>
  data.appendLocalName("New_Name");
   d4270:	4924      	ldr	r1, [pc, #144]	; (d4304 <setup+0xf4>)
   d4272:	a80d      	add	r0, sp, #52	; 0x34
   d4274:	f001 f8d4 	bl	d5420 <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>
  data.appendServiceUUID(serviceUuid);
   d4278:	4923      	ldr	r1, [pc, #140]	; (d4308 <setup+0xf8>)
   d427a:	a803      	add	r0, sp, #12
   d427c:	f000 ff32 	bl	d50e4 <_ZN8particle7BleUuidC1ERKS0_>
    size_t appendLocalName(const char* name);
    size_t appendLocalName(const String& name);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   d4280:	a903      	add	r1, sp, #12
   d4282:	a808      	add	r0, sp, #32
   d4284:	f000 ff2e 	bl	d50e4 <_ZN8particle7BleUuidC1ERKS0_>
        if (tempUUID.type() == BleUuidType::SHORT) {
   d4288:	a808      	add	r0, sp, #32
   d428a:	f000 ff7b 	bl	d5184 <_ZNK8particle7BleUuid4typeEv>
   d428e:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   d4290:	a808      	add	r0, sp, #32
        if (tempUUID.type() == BleUuidType::SHORT) {
   d4292:	bb14      	cbnz	r4, d42da <setup+0xca>
            uint16_t uuid16 = tempUUID.shorted();
   d4294:	f000 ff95 	bl	d51c2 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d4298:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   d429a:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d429e:	2302      	movs	r3, #2
   d42a0:	f10d 020a 	add.w	r2, sp, #10
   d42a4:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   d42a6:	a80d      	add	r0, sp, #52	; 0x34
   d42a8:	f001 f859 	bl	d535e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>

  Particle.publish("advertise",data.deviceName());
   d42ac:	a90d      	add	r1, sp, #52	; 0x34
   d42ae:	a808      	add	r0, sp, #32
   d42b0:	f001 f914 	bl	d54dc <_ZNK8particle18BleAdvertisingData10deviceNameEv>
   d42b4:	9a08      	ldr	r2, [sp, #32]
   d42b6:	4915      	ldr	r1, [pc, #84]	; (d430c <setup+0xfc>)
   d42b8:	a803      	add	r0, sp, #12
   d42ba:	f7ff ff07 	bl	d40cc <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d42be:	a804      	add	r0, sp, #16
   d42c0:	f7ff ff4d 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d42c4:	a808      	add	r0, sp, #32
   d42c6:	f004 f951 	bl	d856c <_ZN6StringD1Ev>
  BLE.advertise(&data);
   d42ca:	f001 fbe1 	bl	d5a90 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d42ce:	2200      	movs	r2, #0
   d42d0:	a90d      	add	r1, sp, #52	; 0x34
   d42d2:	f001 fc5d 	bl	d5b90 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
  
// end  
  
//   bleLogHandler.setup();
}
   d42d6:	b016      	add	sp, #88	; 0x58
   d42d8:	bd10      	pop	{r4, pc}
   d42da:	f000 ff77 	bl	d51cc <_ZNK8particle7BleUuid8rawBytesEv>
   d42de:	2300      	movs	r3, #0
   d42e0:	9300      	str	r3, [sp, #0]
   d42e2:	4602      	mov	r2, r0
   d42e4:	2310      	movs	r3, #16
   d42e6:	2107      	movs	r1, #7
   d42e8:	e7dd      	b.n	d42a6 <setup+0x96>
   d42ea:	bf00      	nop
   d42ec:	000d9135 	.word	0x000d9135
   d42f0:	000d915c 	.word	0x000d915c
   d42f4:	2003df44 	.word	0x2003df44
   d42f8:	000d418d 	.word	0x000d418d
   d42fc:	2003e61c 	.word	0x2003e61c
   d4300:	2003df4c 	.word	0x2003df4c
   d4304:	000d9163 	.word	0x000d9163
   d4308:	2003deec 	.word	0x2003deec
   d430c:	000d916c 	.word	0x000d916c

000d4310 <loop>:

// loop() runs over and over again, as quickly as it can execute.
  int incomingByte = 0;
void loop() 
{
   d4310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    
    // The core of your code likely lives here

    // bleLogHandler.loop();

    if (millis() - lastLog >= LOG_INTERVAL) 
   d4314:	4cae      	ldr	r4, [pc, #696]	; (d45d0 <loop+0x2c0>)
{
   d4316:	b0a7      	sub	sp, #156	; 0x9c

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4318:	f000 fbe8 	bl	d4aec <HAL_Timer_Get_Milli_Seconds>
    if (millis() - lastLog >= LOG_INTERVAL) 
   d431c:	6823      	ldr	r3, [r4, #0]
   d431e:	1ac0      	subs	r0, r0, r3
   d4320:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d4324:	d302      	bcc.n	d432c <loop+0x1c>
   d4326:	f000 fbe1 	bl	d4aec <HAL_Timer_Get_Milli_Seconds>
    {
        lastLog = millis();
   d432a:	6020      	str	r0, [r4, #0]
        // This is just so the demo prints a message every second so the log updates frequently
        //Log.info("counter=%u", counter++);
    }
  //Particle.publish("tupperware_upload", "Hello2");
    char string[32];
    if (BLE.connected()) {
   d432c:	f001 fbb0 	bl	d5a90 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4330:	f001 fc74 	bl	d5c1c <_ZNK8particle14BleLocalDevice9connectedEv>
   d4334:	b368      	cbz	r0, d4392 <loop+0x82>
   d4336:	4ca7      	ldr	r4, [pc, #668]	; (d45d4 <loop+0x2c4>)
            
            int availableBytes = Serial.available();
            for(int i=0; i<availableBytes; i++)
            {
             string[i] = Serial.read();
             string[i+1] = '\0'; // Append a null
   d4338:	f04f 0800 	mov.w	r8, #0
        while (Serial.available() && txLen < UART_TX_BUF_SIZE) 
   d433c:	f004 fb42 	bl	d89c4 <_Z16_fetch_usbserialv>
   d4340:	6803      	ldr	r3, [r0, #0]
   d4342:	691b      	ldr	r3, [r3, #16]
   d4344:	4798      	blx	r3
   d4346:	b1d8      	cbz	r0, d4380 <loop+0x70>
   d4348:	6823      	ldr	r3, [r4, #0]
   d434a:	2b13      	cmp	r3, #19
   d434c:	d818      	bhi.n	d4380 <loop+0x70>
            delay(3);                                                                                                                                                                                                                                                                  
   d434e:	2003      	movs	r0, #3
   d4350:	f000 fd78 	bl	d4e44 <delay>
            int availableBytes = Serial.available();
   d4354:	f004 fb36 	bl	d89c4 <_Z16_fetch_usbserialv>
   d4358:	6803      	ldr	r3, [r0, #0]
   d435a:	691b      	ldr	r3, [r3, #16]
   d435c:	4798      	blx	r3
   d435e:	ad1e      	add	r5, sp, #120	; 0x78
   d4360:	4607      	mov	r7, r0
            for(int i=0; i<availableBytes; i++)
   d4362:	2600      	movs	r6, #0
   d4364:	46a9      	mov	r9, r5
   d4366:	42be      	cmp	r6, r7
   d4368:	f280 80b0 	bge.w	d44cc <loop+0x1bc>
             string[i] = Serial.read();
   d436c:	f004 fb2a 	bl	d89c4 <_Z16_fetch_usbserialv>
   d4370:	6803      	ldr	r3, [r0, #0]
   d4372:	695b      	ldr	r3, [r3, #20]
   d4374:	4798      	blx	r3
             string[i+1] = '\0'; // Append a null
   d4376:	3601      	adds	r6, #1
             string[i] = Serial.read();
   d4378:	7028      	strb	r0, [r5, #0]
             string[i+1] = '\0'; // Append a null
   d437a:	f805 8f01 	strb.w	r8, [r5, #1]!
            for(int i=0; i<availableBytes; i++)
   d437e:	e7f2      	b.n	d4366 <loop+0x56>
            Particle.publish("Serial", string);
        }
        
        

        if (txLen > 0) 
   d4380:	6822      	ldr	r2, [r4, #0]
   d4382:	b132      	cbz	r2, d4392 <loop+0x82>
        {
            // Transmit the data to the BLE peripheral
            peerRxCharacteristic.setValue(txBuf, txLen);
   d4384:	2300      	movs	r3, #0
   d4386:	4994      	ldr	r1, [pc, #592]	; (d45d8 <loop+0x2c8>)
   d4388:	4894      	ldr	r0, [pc, #592]	; (d45dc <loop+0x2cc>)
   d438a:	f001 f989 	bl	d56a0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            txLen = 0;
   d438e:	2300      	movs	r3, #0
   d4390:	6023      	str	r3, [r4, #0]
        }
    }
    
    
        if (millis() - lastScan >= SCAN_PERIOD_MS) 
   d4392:	4c93      	ldr	r4, [pc, #588]	; (d45e0 <loop+0x2d0>)
   d4394:	f000 fbaa 	bl	d4aec <HAL_Timer_Get_Milli_Seconds>
   d4398:	6823      	ldr	r3, [r4, #0]
   d439a:	1ac0      	subs	r0, r0, r3
   d439c:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d43a0:	f0c0 8091 	bcc.w	d44c6 <loop+0x1b6>
   d43a4:	f000 fba2 	bl	d4aec <HAL_Timer_Get_Milli_Seconds>
        {
            // Time to scan
            lastScan = millis();
   d43a8:	6020      	str	r0, [r4, #0]

            size_t count = BLE.scan(scanResults, SCAN_RESULT_COUNT);
   d43aa:	f001 fb71 	bl	d5a90 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d43ae:	498d      	ldr	r1, [pc, #564]	; (d45e4 <loop+0x2d4>)
   d43b0:	2214      	movs	r2, #20
   d43b2:	f001 fc0b 	bl	d5bcc <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>
            if (count > 0) 
   d43b6:	4607      	mov	r7, r0
   d43b8:	2800      	cmp	r0, #0
   d43ba:	f000 8084 	beq.w	d44c6 <loop+0x1b6>
                for (uint8_t ii = 0; ii < count; ii++) 
                {
                    // Our serial peripheral only supports one service, so we only look for one here.
                    // In some cases, you may want to get all of the service UUIDs and scan the list
                    // looking to see if the serviceUuid is anywhere in the list.
                    Log.info("rssi=%d address=%02X:%02X:%02X:%02X:%02X:%02X \n", scanResults[ii].rssi, scanResults[ii].address[0], scanResults[ii].address[1], scanResults[ii].address[2], scanResults[ii].address[3], scanResults[ii].address[4], scanResults[ii].address[5]);
   d43be:	f8df 8224 	ldr.w	r8, [pc, #548]	; d45e4 <loop+0x2d4>
                for (uint8_t ii = 0; ii < count; ii++) 
   d43c2:	2600      	movs	r6, #0
                    Log.info("rssi=%d address=%02X:%02X:%02X:%02X:%02X:%02X \n", scanResults[ii].rssi, scanResults[ii].address[0], scanResults[ii].address[1], scanResults[ii].address[2], scanResults[ii].address[3], scanResults[ii].address[4], scanResults[ii].address[5]);
   d43c4:	2454      	movs	r4, #84	; 0x54
   d43c6:	fb04 8306 	mla	r3, r4, r6, r8
   d43ca:	fb16 f404 	smulbb	r4, r6, r4
   d43ce:	eb08 0504 	add.w	r5, r8, r4
   d43d2:	f993 2050 	ldrsb.w	r2, [r3, #80]	; 0x50
   d43d6:	9209      	str	r2, [sp, #36]	; 0x24
   d43d8:	2100      	movs	r1, #0
   d43da:	4628      	mov	r0, r5
   d43dc:	f000 fe39 	bl	d5052 <_ZNK8particle10BleAddressixEh>
   d43e0:	2101      	movs	r1, #1
   d43e2:	9008      	str	r0, [sp, #32]
   d43e4:	4628      	mov	r0, r5
   d43e6:	f000 fe34 	bl	d5052 <_ZNK8particle10BleAddressixEh>
   d43ea:	2102      	movs	r1, #2
   d43ec:	9007      	str	r0, [sp, #28]
   d43ee:	4628      	mov	r0, r5
   d43f0:	f000 fe2f 	bl	d5052 <_ZNK8particle10BleAddressixEh>
   d43f4:	2103      	movs	r1, #3
   d43f6:	4681      	mov	r9, r0
   d43f8:	4628      	mov	r0, r5
   d43fa:	f000 fe2a 	bl	d5052 <_ZNK8particle10BleAddressixEh>
   d43fe:	2104      	movs	r1, #4
   d4400:	4682      	mov	sl, r0
   d4402:	4628      	mov	r0, r5
   d4404:	f000 fe25 	bl	d5052 <_ZNK8particle10BleAddressixEh>
   d4408:	2105      	movs	r1, #5
   d440a:	4683      	mov	fp, r0
   d440c:	4628      	mov	r0, r5
   d440e:	f000 fe20 	bl	d5052 <_ZNK8particle10BleAddressixEh>
   d4412:	9b07      	ldr	r3, [sp, #28]
   d4414:	4974      	ldr	r1, [pc, #464]	; (d45e8 <loop+0x2d8>)
   d4416:	9300      	str	r3, [sp, #0]
   d4418:	e9cd b003 	strd	fp, r0, [sp, #12]
   d441c:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   d4420:	e9cd 9a01 	strd	r9, sl, [sp, #4]
   d4424:	4871      	ldr	r0, [pc, #452]	; (d45ec <loop+0x2dc>)
                    
                    

                    BleUuid foundServiceUuid;
                    size_t svcCount = scanResults[ii].advertisingData.serviceUUID(&foundServiceUuid, 1);
   d4426:	3408      	adds	r4, #8
                    Log.info("rssi=%d address=%02X:%02X:%02X:%02X:%02X:%02X \n", scanResults[ii].rssi, scanResults[ii].address[0], scanResults[ii].address[1], scanResults[ii].address[2], scanResults[ii].address[3], scanResults[ii].address[4], scanResults[ii].address[5]);
   d4428:	f7ff fe82 	bl	d4130 <_ZNK5spark6Logger4infoEPKcz>
                    size_t svcCount = scanResults[ii].advertisingData.serviceUUID(&foundServiceUuid, 1);
   d442c:	4444      	add	r4, r8
                    BleUuid foundServiceUuid;
   d442e:	a80f      	add	r0, sp, #60	; 0x3c
   d4430:	f000 fe22 	bl	d5078 <_ZN8particle7BleUuidC1Ev>
                    size_t svcCount = scanResults[ii].advertisingData.serviceUUID(&foundServiceUuid, 1);
   d4434:	2201      	movs	r2, #1
   d4436:	a90f      	add	r1, sp, #60	; 0x3c
   d4438:	4620      	mov	r0, r4
   d443a:	f001 f8ac 	bl	d5596 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>
                    String peripheralName = scanResults[ii].advertisingData.deviceName();
   d443e:	4621      	mov	r1, r4
                    size_t svcCount = scanResults[ii].advertisingData.serviceUUID(&foundServiceUuid, 1);
   d4440:	4681      	mov	r9, r0
                    String peripheralName = scanResults[ii].advertisingData.deviceName();
   d4442:	a80b      	add	r0, sp, #44	; 0x2c
   d4444:	f001 f84a 	bl	d54dc <_ZNK8particle18BleAdvertisingData10deviceNameEv>

                    if(peripheralName.length() > 0)
   d4448:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d444a:	b123      	cbz	r3, d4456 <loop+0x146>
                    {
                        Log.info("Advertising name: %s \n", peripheralName.c_str());
   d444c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d444e:	4968      	ldr	r1, [pc, #416]	; (d45f0 <loop+0x2e0>)
   d4450:	4866      	ldr	r0, [pc, #408]	; (d45ec <loop+0x2dc>)
   d4452:	f7ff fe6d 	bl	d4130 <_ZNK5spark6Logger4infoEPKcz>
                    }

                    Serial.printf("svcCount = %d \n", svcCount);
   d4456:	f004 fab5 	bl	d89c4 <_Z16_fetch_usbserialv>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d445a:	4a66      	ldr	r2, [pc, #408]	; (d45f4 <loop+0x2e4>)
   d445c:	464b      	mov	r3, r9
   d445e:	2100      	movs	r1, #0
   d4460:	f004 f833 	bl	d84ca <_ZN5Print11printf_implEbPKcz>
                    Serial.printf("foundServiceUuid = %X \n", foundServiceUuid);
   d4464:	f004 faae 	bl	d89c4 <_Z16_fetch_usbserialv>
   d4468:	a90f      	add	r1, sp, #60	; 0x3c
   d446a:	4604      	mov	r4, r0
   d446c:	a814      	add	r0, sp, #80	; 0x50
   d446e:	f000 fe39 	bl	d50e4 <_ZN8particle7BleUuidC1ERKS0_>
   d4472:	a914      	add	r1, sp, #80	; 0x50
   d4474:	a819      	add	r0, sp, #100	; 0x64
   d4476:	f000 fe35 	bl	d50e4 <_ZN8particle7BleUuidC1ERKS0_>
   d447a:	2100      	movs	r1, #0
   d447c:	4a5e      	ldr	r2, [pc, #376]	; (d45f8 <loop+0x2e8>)
   d447e:	ab19      	add	r3, sp, #100	; 0x64
   d4480:	4620      	mov	r0, r4
   d4482:	f004 f822 	bl	d84ca <_ZN5Print11printf_implEbPKcz>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4486:	495d      	ldr	r1, [pc, #372]	; (d45fc <loop+0x2ec>)
   d4488:	a80b      	add	r0, sp, #44	; 0x2c
   d448a:	f004 f968 	bl	d875e <_ZNK6String6equalsEPKc>

                    //replace peripheralName != NULL with actual value
                    if(peripheralName == "Tupperware_7" || peripheralName == "Tupperware_8" || peripheralName == "Tupperware_9" || peripheralName == "FreshSurety_UART") //if (svcCount > 0 && foundServiceUuid == serviceUuid) 
   d448e:	2800      	cmp	r0, #0
   d4490:	d140      	bne.n	d4514 <loop+0x204>
   d4492:	495b      	ldr	r1, [pc, #364]	; (d4600 <loop+0x2f0>)
   d4494:	a80b      	add	r0, sp, #44	; 0x2c
   d4496:	f004 f962 	bl	d875e <_ZNK6String6equalsEPKc>
   d449a:	2800      	cmp	r0, #0
   d449c:	d13a      	bne.n	d4514 <loop+0x204>
   d449e:	4959      	ldr	r1, [pc, #356]	; (d4604 <loop+0x2f4>)
   d44a0:	a80b      	add	r0, sp, #44	; 0x2c
   d44a2:	f004 f95c 	bl	d875e <_ZNK6String6equalsEPKc>
   d44a6:	2800      	cmp	r0, #0
   d44a8:	d134      	bne.n	d4514 <loop+0x204>
   d44aa:	4957      	ldr	r1, [pc, #348]	; (d4608 <loop+0x2f8>)
   d44ac:	a80b      	add	r0, sp, #44	; 0x2c
   d44ae:	f004 f956 	bl	d875e <_ZNK6String6equalsEPKc>
   d44b2:	2800      	cmp	r0, #0
   d44b4:	d12e      	bne.n	d4514 <loop+0x204>
                for (uint8_t ii = 0; ii < count; ii++) 
   d44b6:	3601      	adds	r6, #1
                    String peripheralName = scanResults[ii].advertisingData.deviceName();
   d44b8:	a80b      	add	r0, sp, #44	; 0x2c
                for (uint8_t ii = 0; ii < count; ii++) 
   d44ba:	b2f6      	uxtb	r6, r6
                    String peripheralName = scanResults[ii].advertisingData.deviceName();
   d44bc:	f004 f856 	bl	d856c <_ZN6StringD1Ev>
                for (uint8_t ii = 0; ii < count; ii++) 
   d44c0:	42be      	cmp	r6, r7
   d44c2:	f4ff af7f 	bcc.w	d43c4 <loop+0xb4>
                }
            }
        }

    
   d44c6:	b027      	add	sp, #156	; 0x9c
   d44c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            txBuf[txLen++] = Serial.read();
   d44cc:	f004 fa7a 	bl	d89c4 <_Z16_fetch_usbserialv>
   d44d0:	6803      	ldr	r3, [r0, #0]
   d44d2:	4d41      	ldr	r5, [pc, #260]	; (d45d8 <loop+0x2c8>)
   d44d4:	695b      	ldr	r3, [r3, #20]
   d44d6:	4798      	blx	r3
   d44d8:	6823      	ldr	r3, [r4, #0]
   d44da:	1c5a      	adds	r2, r3, #1
   d44dc:	6022      	str	r2, [r4, #0]
   d44de:	54e8      	strb	r0, [r5, r3]
            Serial.write(txBuf[txLen - 1]);
   d44e0:	f004 fa70 	bl	d89c4 <_Z16_fetch_usbserialv>
   d44e4:	6823      	ldr	r3, [r4, #0]
   d44e6:	441d      	add	r5, r3
   d44e8:	6803      	ldr	r3, [r0, #0]
   d44ea:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   d44ee:	689b      	ldr	r3, [r3, #8]
   d44f0:	4798      	blx	r3
            Particle.publish("Serial", "Serial Data Received ");
   d44f2:	4a46      	ldr	r2, [pc, #280]	; (d460c <loop+0x2fc>)
   d44f4:	4946      	ldr	r1, [pc, #280]	; (d4610 <loop+0x300>)
   d44f6:	a819      	add	r0, sp, #100	; 0x64
   d44f8:	f7ff fde8 	bl	d40cc <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d44fc:	a81a      	add	r0, sp, #104	; 0x68
   d44fe:	f7ff fe2e 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            Particle.publish("Serial", string);
   d4502:	a819      	add	r0, sp, #100	; 0x64
   d4504:	4942      	ldr	r1, [pc, #264]	; (d4610 <loop+0x300>)
   d4506:	464a      	mov	r2, r9
   d4508:	f7ff fde0 	bl	d40cc <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d450c:	a81a      	add	r0, sp, #104	; 0x68
   d450e:	f7ff fe26 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        while (Serial.available() && txLen < UART_TX_BUF_SIZE) 
   d4512:	e713      	b.n	d433c <loop+0x2c>
                        peer = BLE.connect(scanResults[ii].address);
   d4514:	f001 fabc 	bl	d5a90 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4518:	2301      	movs	r3, #1
   d451a:	4601      	mov	r1, r0
   d451c:	462a      	mov	r2, r5
   d451e:	a819      	add	r0, sp, #100	; 0x64
   d4520:	f002 f802 	bl	d6528 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>
   d4524:	a919      	add	r1, sp, #100	; 0x64
   d4526:	483b      	ldr	r0, [pc, #236]	; (d4614 <loop+0x304>)
   d4528:	f001 fa24 	bl	d5974 <_ZN8particle13BlePeerDeviceaSERKS0_>
   d452c:	a819      	add	r0, sp, #100	; 0x64
   d452e:	f001 fba2 	bl	d5c76 <_ZN8particle13BlePeerDeviceD1Ev>
                        if (peer.connected()) 
   d4532:	4838      	ldr	r0, [pc, #224]	; (d4614 <loop+0x304>)
   d4534:	f001 fa4c 	bl	d59d0 <_ZNK8particle13BlePeerDevice9connectedEv>
   d4538:	2800      	cmp	r0, #0
   d453a:	d045      	beq.n	d45c8 <loop+0x2b8>
   d453c:	492f      	ldr	r1, [pc, #188]	; (d45fc <loop+0x2ec>)
   d453e:	a80b      	add	r0, sp, #44	; 0x2c
   d4540:	f004 f90d 	bl	d875e <_ZNK6String6equalsEPKc>
                            if(peripheralName == "Tupperware_7")
   d4544:	b138      	cbz	r0, d4556 <loop+0x246>
                              Particle.publish("connect", "Tupperware_7");
   d4546:	a819      	add	r0, sp, #100	; 0x64
   d4548:	4a2c      	ldr	r2, [pc, #176]	; (d45fc <loop+0x2ec>)
   d454a:	4933      	ldr	r1, [pc, #204]	; (d4618 <loop+0x308>)
   d454c:	f7ff fdbe 	bl	d40cc <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d4550:	a81a      	add	r0, sp, #104	; 0x68
   d4552:	f7ff fe04 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4556:	492a      	ldr	r1, [pc, #168]	; (d4600 <loop+0x2f0>)
   d4558:	a80b      	add	r0, sp, #44	; 0x2c
   d455a:	f004 f900 	bl	d875e <_ZNK6String6equalsEPKc>
                            if(peripheralName == "Tupperware_8")
   d455e:	b138      	cbz	r0, d4570 <loop+0x260>
                              Particle.publish("connect", "Tupperware_8");
   d4560:	a819      	add	r0, sp, #100	; 0x64
   d4562:	4a27      	ldr	r2, [pc, #156]	; (d4600 <loop+0x2f0>)
   d4564:	492c      	ldr	r1, [pc, #176]	; (d4618 <loop+0x308>)
   d4566:	f7ff fdb1 	bl	d40cc <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d456a:	a81a      	add	r0, sp, #104	; 0x68
   d456c:	f7ff fdf7 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4570:	4924      	ldr	r1, [pc, #144]	; (d4604 <loop+0x2f4>)
   d4572:	a80b      	add	r0, sp, #44	; 0x2c
   d4574:	f004 f8f3 	bl	d875e <_ZNK6String6equalsEPKc>
                            if(peripheralName == "Tupperware_9")
   d4578:	b138      	cbz	r0, d458a <loop+0x27a>
                              Particle.publish("connect", "Tupperware_9");
   d457a:	a819      	add	r0, sp, #100	; 0x64
   d457c:	4a21      	ldr	r2, [pc, #132]	; (d4604 <loop+0x2f4>)
   d457e:	4926      	ldr	r1, [pc, #152]	; (d4618 <loop+0x308>)
   d4580:	f7ff fda4 	bl	d40cc <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d4584:	a81a      	add	r0, sp, #104	; 0x68
   d4586:	f7ff fdea 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d458a:	491f      	ldr	r1, [pc, #124]	; (d4608 <loop+0x2f8>)
   d458c:	a80b      	add	r0, sp, #44	; 0x2c
   d458e:	f004 f8e6 	bl	d875e <_ZNK6String6equalsEPKc>
                            if (peripheralName == "FreshSurety_UART")
   d4592:	b138      	cbz	r0, d45a4 <loop+0x294>
                              Particle.publish("connect", "FreshSurety_UART");
   d4594:	a819      	add	r0, sp, #100	; 0x64
   d4596:	4a1c      	ldr	r2, [pc, #112]	; (d4608 <loop+0x2f8>)
   d4598:	491f      	ldr	r1, [pc, #124]	; (d4618 <loop+0x308>)
   d459a:	f7ff fd97 	bl	d40cc <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d459e:	a81a      	add	r0, sp, #104	; 0x68
   d45a0:	f7ff fddd 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                            Particle.publish("connect", peripheralName);
   d45a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d45a6:	491c      	ldr	r1, [pc, #112]	; (d4618 <loop+0x308>)
   d45a8:	a819      	add	r0, sp, #100	; 0x64
   d45aa:	f7ff fd8f 	bl	d40cc <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d45ae:	a81a      	add	r0, sp, #104	; 0x68
   d45b0:	f7ff fdd5 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                            peer.getCharacteristicByUUID(peerTxCharacteristic, txUuid);
   d45b4:	4a19      	ldr	r2, [pc, #100]	; (d461c <loop+0x30c>)
   d45b6:	491a      	ldr	r1, [pc, #104]	; (d4620 <loop+0x310>)
   d45b8:	4816      	ldr	r0, [pc, #88]	; (d4614 <loop+0x304>)
   d45ba:	f001 f9e5 	bl	d5988 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                            peer.getCharacteristicByUUID(peerRxCharacteristic, rxUuid);
   d45be:	4a19      	ldr	r2, [pc, #100]	; (d4624 <loop+0x314>)
   d45c0:	4906      	ldr	r1, [pc, #24]	; (d45dc <loop+0x2cc>)
   d45c2:	4814      	ldr	r0, [pc, #80]	; (d4614 <loop+0x304>)
   d45c4:	f001 f9e0 	bl	d5988 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                    String peripheralName = scanResults[ii].advertisingData.deviceName();
   d45c8:	a80b      	add	r0, sp, #44	; 0x2c
   d45ca:	f003 ffcf 	bl	d856c <_ZN6StringD1Ev>
   d45ce:	e77a      	b.n	d44c6 <loop+0x1b6>
   d45d0:	2003df2c 	.word	0x2003df2c
   d45d4:	2003e624 	.word	0x2003e624
   d45d8:	2003e608 	.word	0x2003e608
   d45dc:	2003df3c 	.word	0x2003df3c
   d45e0:	2003df30 	.word	0x2003df30
   d45e4:	2003df54 	.word	0x2003df54
   d45e8:	000d9193 	.word	0x000d9193
   d45ec:	2003e64c 	.word	0x2003e64c
   d45f0:	000d91c3 	.word	0x000d91c3
   d45f4:	000d91da 	.word	0x000d91da
   d45f8:	000d91ea 	.word	0x000d91ea
   d45fc:	000d9202 	.word	0x000d9202
   d4600:	000d920f 	.word	0x000d920f
   d4604:	000d914f 	.word	0x000d914f
   d4608:	000d921c 	.word	0x000d921c
   d460c:	000d9176 	.word	0x000d9176
   d4610:	000d918c 	.word	0x000d918c
   d4614:	2003df34 	.word	0x2003df34
   d4618:	000d922d 	.word	0x000d922d
   d461c:	2003df18 	.word	0x2003df18
   d4620:	2003df44 	.word	0x2003df44
   d4624:	2003df04 	.word	0x2003df04

000d4628 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4628:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d462a:	e9d0 5300 	ldrd	r5, r3, [r0]
   d462e:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4630:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d4632:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d4636:	42ae      	cmp	r6, r5
   d4638:	d004      	beq.n	d4644 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   d463a:	4628      	mov	r0, r5
   d463c:	f003 ff96 	bl	d856c <_ZN6StringD1Ev>
   d4640:	3514      	adds	r5, #20
   d4642:	e7f8      	b.n	d4636 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d4644:	6820      	ldr	r0, [r4, #0]
   d4646:	f000 fbcd 	bl	d4de4 <free>
    AllocatorT::free(data_);
}
   d464a:	4620      	mov	r0, r4
   d464c:	bd70      	pop	{r4, r5, r6, pc}

000d464e <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr)
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d464e:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4650:	4616      	mov	r6, r2
   d4652:	b091      	sub	sp, #68	; 0x44
      : _M_ptr(0), _M_refcount()
   d4654:	2200      	movs	r2, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d4656:	e9c0 2200 	strd	r2, r2, [r0]
   d465a:	4604      	mov	r4, r0
   d465c:	460d      	mov	r5, r1
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
   d465e:	af0b      	add	r7, sp, #44	; 0x2c
        BleUuid cUuid(charUuid);
   d4660:	4619      	mov	r1, r3
   d4662:	a806      	add	r0, sp, #24
   d4664:	f000 fd3e 	bl	d50e4 <_ZN8particle7BleUuidC1ERKS0_>
        BleUuid sUuid(svcUuid);
   d4668:	9916      	ldr	r1, [sp, #88]	; 0x58
   d466a:	4638      	mov	r0, r7
   d466c:	f000 fd3a 	bl	d50e4 <_ZN8particle7BleUuidC1ERKS0_>
    value_ = static_cast<ValueType>(value);
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   d4670:	7833      	ldrb	r3, [r6, #0]
   d4672:	f88d 3014 	strb.w	r3, [sp, #20]
        construct(desc, properties, cUuid, sUuid, callback, context);
   d4676:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d4678:	9302      	str	r3, [sp, #8]
   d467a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d467c:	4620      	mov	r0, r4
   d467e:	e9cd 7300 	strd	r7, r3, [sp]
   d4682:	aa05      	add	r2, sp, #20
   d4684:	ab06      	add	r3, sp, #24
   d4686:	4629      	mov	r1, r5
   d4688:	f001 fb4a 	bl	d5d20 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   d468c:	4620      	mov	r0, r4
   d468e:	b011      	add	sp, #68	; 0x44
   d4690:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4692 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d4692:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d4694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4696:	4604      	mov	r4, r0
   d4698:	460d      	mov	r5, r1
   d469a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d469c:	d916      	bls.n	d46cc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d469e:	4290      	cmp	r0, r2
   d46a0:	d215      	bcs.n	d46ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   d46a2:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   d46a6:	1a75      	subs	r5, r6, r1
   d46a8:	f1a1 0714 	sub.w	r7, r1, #20
   d46ac:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d46ae:	42b7      	cmp	r7, r6
   d46b0:	d01c      	beq.n	d46ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d46b2:	b12c      	cbz	r4, d46c0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d46b4:	4631      	mov	r1, r6
   d46b6:	4620      	mov	r0, r4
   d46b8:	f003 ffd4 	bl	d8664 <_ZN6StringC1EOS_>
   d46bc:	7c33      	ldrb	r3, [r6, #16]
   d46be:	7423      	strb	r3, [r4, #16]
   d46c0:	4630      	mov	r0, r6
   d46c2:	f003 ff53 	bl	d856c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d46c6:	3e14      	subs	r6, #20
   d46c8:	3c14      	subs	r4, #20
   d46ca:	e7f0      	b.n	d46ae <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d46cc:	d00e      	beq.n	d46ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d46ce:	42b5      	cmp	r5, r6
   d46d0:	d00c      	beq.n	d46ec <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d46d2:	b12c      	cbz	r4, d46e0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d46d4:	4629      	mov	r1, r5
   d46d6:	4620      	mov	r0, r4
   d46d8:	f003 ffc4 	bl	d8664 <_ZN6StringC1EOS_>
   d46dc:	7c2b      	ldrb	r3, [r5, #16]
   d46de:	7423      	strb	r3, [r4, #16]
   d46e0:	4628      	mov	r0, r5
   d46e2:	f003 ff43 	bl	d856c <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d46e6:	3514      	adds	r5, #20
   d46e8:	3414      	adds	r4, #20
   d46ea:	e7f0      	b.n	d46ce <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   d46ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d46ee <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d46ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d46f2:	2300      	movs	r3, #0
   d46f4:	e9c0 3300 	strd	r3, r3, [r0]
   d46f8:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d46fa:	684f      	ldr	r7, [r1, #4]
   d46fc:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d46fe:	4604      	mov	r4, r0
   d4700:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4702:	dd23      	ble.n	d474c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   d4704:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   d4708:	fb08 f007 	mul.w	r0, r8, r7
   d470c:	f000 fb62 	bl	d4dd4 <malloc>
            if (!d) {
   d4710:	4605      	mov	r5, r0
   d4712:	b1d8      	cbz	r0, d474c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   d4714:	e9d4 1200 	ldrd	r1, r2, [r4]
   d4718:	fb08 1202 	mla	r2, r8, r2, r1
   d471c:	f7ff ffb9 	bl	d4692 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d4720:	6820      	ldr	r0, [r4, #0]
   d4722:	f000 fb5f 	bl	d4de4 <free>
        data_ = d;
   d4726:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d4728:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d472a:	e9d6 7300 	ldrd	r7, r3, [r6]
   d472e:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   d4732:	45b8      	cmp	r8, r7
   d4734:	d008      	beq.n	d4748 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   d4736:	4639      	mov	r1, r7
   d4738:	4628      	mov	r0, r5
   d473a:	f003 ffad 	bl	d8698 <_ZN6StringC1ERKS_>
   d473e:	7c3b      	ldrb	r3, [r7, #16]
   d4740:	742b      	strb	r3, [r5, #16]
   d4742:	3714      	adds	r7, #20
   d4744:	3514      	adds	r5, #20
   d4746:	e7f4      	b.n	d4732 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   d4748:	6873      	ldr	r3, [r6, #4]
   d474a:	6063      	str	r3, [r4, #4]
}
   d474c:	4620      	mov	r0, r4
   d474e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d4754 <_GLOBAL__sub_I_serialLogHandler>:
   d4754:	b530      	push	{r4, r5, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4756:	4b56      	ldr	r3, [pc, #344]	; (d48b0 <_GLOBAL__sub_I_serialLogHandler+0x15c>)
   d4758:	b095      	sub	sp, #84	; 0x54
   d475a:	2400      	movs	r4, #0
   d475c:	701c      	strb	r4, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d475e:	f000 f9cd 	bl	d4afc <HAL_Pin_Map>
        capacity_(0) {
   d4762:	e9cd 4404 	strd	r4, r4, [sp, #16]
   d4766:	9406      	str	r4, [sp, #24]
            StreamLogHandler(Serial, level, filters) {
   d4768:	f004 f92c 	bl	d89c4 <_Z16_fetch_usbserialv>
   d476c:	a904      	add	r1, sp, #16
   d476e:	4605      	mov	r5, r0
   d4770:	a807      	add	r0, sp, #28
        filter_(level, filters) {
   d4772:	4c50      	ldr	r4, [pc, #320]	; (d48b4 <_GLOBAL__sub_I_serialLogHandler+0x160>)
   d4774:	f7ff ffbb 	bl	d46ee <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
   d4778:	a907      	add	r1, sp, #28
   d477a:	a80a      	add	r0, sp, #40	; 0x28
   d477c:	f7ff ffb7 	bl	d46ee <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d4780:	4b4d      	ldr	r3, [pc, #308]	; (d48b8 <_GLOBAL__sub_I_serialLogHandler+0x164>)
   d4782:	6023      	str	r3, [r4, #0]
   d4784:	a90a      	add	r1, sp, #40	; 0x28
   d4786:	a80f      	add	r0, sp, #60	; 0x3c
   d4788:	f7ff ffb1 	bl	d46ee <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d478c:	aa0f      	add	r2, sp, #60	; 0x3c
   d478e:	2101      	movs	r1, #1
   d4790:	1d20      	adds	r0, r4, #4
   d4792:	f003 fa7d 	bl	d7c90 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d4796:	a80f      	add	r0, sp, #60	; 0x3c
   d4798:	f7ff ff46 	bl	d4628 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   d479c:	a80a      	add	r0, sp, #40	; 0x28
   d479e:	f7ff ff43 	bl	d4628 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d47a2:	4b46      	ldr	r3, [pc, #280]	; (d48bc <_GLOBAL__sub_I_serialLogHandler+0x168>)
   d47a4:	6023      	str	r3, [r4, #0]
   d47a6:	6225      	str	r5, [r4, #32]
   d47a8:	a807      	add	r0, sp, #28
   d47aa:	f7ff ff3d 	bl	d4628 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d47ae:	4b44      	ldr	r3, [pc, #272]	; (d48c0 <_GLOBAL__sub_I_serialLogHandler+0x16c>)
   d47b0:	6023      	str	r3, [r4, #0]
        Serial.begin();
   d47b2:	f004 f907 	bl	d89c4 <_Z16_fetch_usbserialv>
   d47b6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d47ba:	f004 f8f3 	bl	d89a4 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d47be:	f002 ff0f 	bl	d75e0 <_ZN5spark10LogManager8instanceEv>
   d47c2:	4621      	mov	r1, r4
   d47c4:	f003 f9f6 	bl	d7bb4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler serialLogHandler(LOG_LEVEL_TRACE);
   d47c8:	a804      	add	r0, sp, #16
   d47ca:	f7ff ff2d 	bl	d4628 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d47ce:	4a3d      	ldr	r2, [pc, #244]	; (d48c4 <_GLOBAL__sub_I_serialLogHandler+0x170>)
   d47d0:	493d      	ldr	r1, [pc, #244]	; (d48c8 <_GLOBAL__sub_I_serialLogHandler+0x174>)
   d47d2:	4d3e      	ldr	r5, [pc, #248]	; (d48cc <_GLOBAL__sub_I_serialLogHandler+0x178>)
   d47d4:	4620      	mov	r0, r4
   d47d6:	f004 f9ef 	bl	d8bb8 <__aeabi_atexit>
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   d47da:	493d      	ldr	r1, [pc, #244]	; (d48d0 <_GLOBAL__sub_I_serialLogHandler+0x17c>)
   d47dc:	483d      	ldr	r0, [pc, #244]	; (d48d4 <_GLOBAL__sub_I_serialLogHandler+0x180>)
   d47de:	f000 fda3 	bl	d5328 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   d47e2:	493d      	ldr	r1, [pc, #244]	; (d48d8 <_GLOBAL__sub_I_serialLogHandler+0x184>)
   d47e4:	483d      	ldr	r0, [pc, #244]	; (d48dc <_GLOBAL__sub_I_serialLogHandler+0x188>)
   d47e6:	f000 fd9f 	bl	d5328 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   d47ea:	493d      	ldr	r1, [pc, #244]	; (d48e0 <_GLOBAL__sub_I_serialLogHandler+0x18c>)
   d47ec:	483d      	ldr	r0, [pc, #244]	; (d48e4 <_GLOBAL__sub_I_serialLogHandler+0x190>)
   d47ee:	f000 fd9b 	bl	d5328 <_ZN8particle7BleUuidC1EPKc>
   d47f2:	2414      	movs	r4, #20
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   d47f4:	4628      	mov	r0, r5
   d47f6:	f000 fc27 	bl	d5048 <_ZN8particle10BleAddressC1Ev>
   d47fa:	f105 0008 	add.w	r0, r5, #8
   d47fe:	f000 fdf6 	bl	d53ee <_ZN8particle18BleAdvertisingDataC1Ev>
   d4802:	f105 002c 	add.w	r0, r5, #44	; 0x2c
   d4806:	f000 fdf2 	bl	d53ee <_ZN8particle18BleAdvertisingDataC1Ev>
BleScanResult scanResults[SCAN_RESULT_COUNT];
   d480a:	3c01      	subs	r4, #1
   d480c:	f105 0554 	add.w	r5, r5, #84	; 0x54
   d4810:	d1f0      	bne.n	d47f4 <_GLOBAL__sub_I_serialLogHandler+0xa0>
BleCharacteristic peerTxCharacteristic;
   d4812:	4835      	ldr	r0, [pc, #212]	; (d48e8 <_GLOBAL__sub_I_serialLogHandler+0x194>)
   d4814:	f000 ff18 	bl	d5648 <_ZN8particle17BleCharacteristicC1Ev>
   d4818:	4a2a      	ldr	r2, [pc, #168]	; (d48c4 <_GLOBAL__sub_I_serialLogHandler+0x170>)
   d481a:	4934      	ldr	r1, [pc, #208]	; (d48ec <_GLOBAL__sub_I_serialLogHandler+0x198>)
   d481c:	4832      	ldr	r0, [pc, #200]	; (d48e8 <_GLOBAL__sub_I_serialLogHandler+0x194>)
   d481e:	f004 f9cb 	bl	d8bb8 <__aeabi_atexit>
BleCharacteristic peerRxCharacteristic;
   d4822:	4833      	ldr	r0, [pc, #204]	; (d48f0 <_GLOBAL__sub_I_serialLogHandler+0x19c>)
   d4824:	f000 ff10 	bl	d5648 <_ZN8particle17BleCharacteristicC1Ev>
   d4828:	4a26      	ldr	r2, [pc, #152]	; (d48c4 <_GLOBAL__sub_I_serialLogHandler+0x170>)
   d482a:	4930      	ldr	r1, [pc, #192]	; (d48ec <_GLOBAL__sub_I_serialLogHandler+0x198>)
   d482c:	4830      	ldr	r0, [pc, #192]	; (d48f0 <_GLOBAL__sub_I_serialLogHandler+0x19c>)
   d482e:	f004 f9c3 	bl	d8bb8 <__aeabi_atexit>
BlePeerDevice peer;
   d4832:	4830      	ldr	r0, [pc, #192]	; (d48f4 <_GLOBAL__sub_I_serialLogHandler+0x1a0>)
   d4834:	f001 f87c 	bl	d5930 <_ZN8particle13BlePeerDeviceC1Ev>
   d4838:	4a22      	ldr	r2, [pc, #136]	; (d48c4 <_GLOBAL__sub_I_serialLogHandler+0x170>)
   d483a:	492f      	ldr	r1, [pc, #188]	; (d48f8 <_GLOBAL__sub_I_serialLogHandler+0x1a4>)
   d483c:	482d      	ldr	r0, [pc, #180]	; (d48f4 <_GLOBAL__sub_I_serialLogHandler+0x1a0>)
   d483e:	f004 f9bb 	bl	d8bb8 <__aeabi_atexit>
    value_ = static_cast<ValueType>(value);
   d4842:	2310      	movs	r3, #16
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   d4844:	4927      	ldr	r1, [pc, #156]	; (d48e4 <_GLOBAL__sub_I_serialLogHandler+0x190>)
   d4846:	f88d 301c 	strb.w	r3, [sp, #28]
   d484a:	a80a      	add	r0, sp, #40	; 0x28
   d484c:	f000 fc4a 	bl	d50e4 <_ZN8particle7BleUuidC1ERKS0_>
   d4850:	4920      	ldr	r1, [pc, #128]	; (d48d4 <_GLOBAL__sub_I_serialLogHandler+0x180>)
   d4852:	a80f      	add	r0, sp, #60	; 0x3c
   d4854:	f000 fc46 	bl	d50e4 <_ZN8particle7BleUuidC1ERKS0_>
   d4858:	ab0f      	add	r3, sp, #60	; 0x3c
   d485a:	9300      	str	r3, [sp, #0]
   d485c:	aa07      	add	r2, sp, #28
   d485e:	ab0a      	add	r3, sp, #40	; 0x28
   d4860:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d4864:	4925      	ldr	r1, [pc, #148]	; (d48fc <_GLOBAL__sub_I_serialLogHandler+0x1a8>)
   d4866:	4826      	ldr	r0, [pc, #152]	; (d4900 <_GLOBAL__sub_I_serialLogHandler+0x1ac>)
   d4868:	f7ff fef1 	bl	d464e <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d486c:	4a15      	ldr	r2, [pc, #84]	; (d48c4 <_GLOBAL__sub_I_serialLogHandler+0x170>)
   d486e:	491f      	ldr	r1, [pc, #124]	; (d48ec <_GLOBAL__sub_I_serialLogHandler+0x198>)
   d4870:	4823      	ldr	r0, [pc, #140]	; (d4900 <_GLOBAL__sub_I_serialLogHandler+0x1ac>)
   d4872:	f004 f9a1 	bl	d8bb8 <__aeabi_atexit>
   d4876:	2304      	movs	r3, #4
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);
   d4878:	4918      	ldr	r1, [pc, #96]	; (d48dc <_GLOBAL__sub_I_serialLogHandler+0x188>)
   d487a:	f88d 301c 	strb.w	r3, [sp, #28]
   d487e:	a80a      	add	r0, sp, #40	; 0x28
   d4880:	f000 fc30 	bl	d50e4 <_ZN8particle7BleUuidC1ERKS0_>
   d4884:	4913      	ldr	r1, [pc, #76]	; (d48d4 <_GLOBAL__sub_I_serialLogHandler+0x180>)
   d4886:	a80f      	add	r0, sp, #60	; 0x3c
   d4888:	f000 fc2c 	bl	d50e4 <_ZN8particle7BleUuidC1ERKS0_>
   d488c:	4b1d      	ldr	r3, [pc, #116]	; (d4904 <_GLOBAL__sub_I_serialLogHandler+0x1b0>)
   d488e:	9301      	str	r3, [sp, #4]
   d4890:	ab0f      	add	r3, sp, #60	; 0x3c
   d4892:	9300      	str	r3, [sp, #0]
   d4894:	aa07      	add	r2, sp, #28
   d4896:	ab0a      	add	r3, sp, #40	; 0x28
   d4898:	491b      	ldr	r1, [pc, #108]	; (d4908 <_GLOBAL__sub_I_serialLogHandler+0x1b4>)
   d489a:	9402      	str	r4, [sp, #8]
   d489c:	481b      	ldr	r0, [pc, #108]	; (d490c <_GLOBAL__sub_I_serialLogHandler+0x1b8>)
   d489e:	f7ff fed6 	bl	d464e <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d48a2:	4a08      	ldr	r2, [pc, #32]	; (d48c4 <_GLOBAL__sub_I_serialLogHandler+0x170>)
   d48a4:	4911      	ldr	r1, [pc, #68]	; (d48ec <_GLOBAL__sub_I_serialLogHandler+0x198>)
   d48a6:	4819      	ldr	r0, [pc, #100]	; (d490c <_GLOBAL__sub_I_serialLogHandler+0x1b8>)
   d48a8:	f004 f986 	bl	d8bb8 <__aeabi_atexit>
   d48ac:	b015      	add	sp, #84	; 0x54
   d48ae:	bd30      	pop	{r4, r5, pc}
   d48b0:	2003df00 	.word	0x2003df00
   d48b4:	2003e5e4 	.word	0x2003e5e4
   d48b8:	000d92b4 	.word	0x000d92b4
   d48bc:	000d9604 	.word	0x000d9604
   d48c0:	000d92cc 	.word	0x000d92cc
   d48c4:	2003dee8 	.word	0x2003dee8
   d48c8:	000d40e9 	.word	0x000d40e9
   d48cc:	2003df54 	.word	0x2003df54
   d48d0:	000d9235 	.word	0x000d9235
   d48d4:	2003deec 	.word	0x2003deec
   d48d8:	000d925a 	.word	0x000d925a
   d48dc:	2003df04 	.word	0x2003df04
   d48e0:	000d927f 	.word	0x000d927f
   d48e4:	2003df18 	.word	0x2003df18
   d48e8:	2003df44 	.word	0x2003df44
   d48ec:	000d5c69 	.word	0x000d5c69
   d48f0:	2003df3c 	.word	0x2003df3c
   d48f4:	2003df34 	.word	0x2003df34
   d48f8:	000d5c77 	.word	0x000d5c77
   d48fc:	000d92a4 	.word	0x000d92a4
   d4900:	2003e61c 	.word	0x2003e61c
   d4904:	000d418d 	.word	0x000d418d
   d4908:	000d92a7 	.word	0x000d92a7
   d490c:	2003df4c 	.word	0x2003df4c

000d4910 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d4910:	b508      	push	{r3, lr}
   d4912:	4b02      	ldr	r3, [pc, #8]	; (d491c <hal_ble_stack_init+0xc>)
   d4914:	681b      	ldr	r3, [r3, #0]
   d4916:	689b      	ldr	r3, [r3, #8]
   d4918:	9301      	str	r3, [sp, #4]
   d491a:	bd08      	pop	{r3, pc}
   d491c:	00030278 	.word	0x00030278

000d4920 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d4920:	b508      	push	{r3, lr}
   d4922:	4b02      	ldr	r3, [pc, #8]	; (d492c <hal_ble_gap_set_advertising_data+0xc>)
   d4924:	681b      	ldr	r3, [r3, #0]
   d4926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4928:	9301      	str	r3, [sp, #4]
   d492a:	bd08      	pop	{r3, pc}
   d492c:	00030278 	.word	0x00030278

000d4930 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d4930:	b508      	push	{r3, lr}
   d4932:	4b02      	ldr	r3, [pc, #8]	; (d493c <hal_ble_gap_set_scan_response_data+0xc>)
   d4934:	681b      	ldr	r3, [r3, #0]
   d4936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4938:	9301      	str	r3, [sp, #4]
   d493a:	bd08      	pop	{r3, pc}
   d493c:	00030278 	.word	0x00030278

000d4940 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d4940:	b508      	push	{r3, lr}
   d4942:	4b02      	ldr	r3, [pc, #8]	; (d494c <hal_ble_gap_start_advertising+0xc>)
   d4944:	681b      	ldr	r3, [r3, #0]
   d4946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d4948:	9301      	str	r3, [sp, #4]
   d494a:	bd08      	pop	{r3, pc}
   d494c:	00030278 	.word	0x00030278

000d4950 <hal_ble_gap_start_scan>:
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   d4950:	b508      	push	{r3, lr}
   d4952:	4b02      	ldr	r3, [pc, #8]	; (d495c <hal_ble_gap_start_scan+0xc>)
   d4954:	681b      	ldr	r3, [r3, #0]
   d4956:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d4958:	9301      	str	r3, [sp, #4]
   d495a:	bd08      	pop	{r3, pc}
   d495c:	00030278 	.word	0x00030278

000d4960 <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   d4960:	b508      	push	{r3, lr}
   d4962:	4b03      	ldr	r3, [pc, #12]	; (d4970 <hal_ble_gap_stop_scan+0x10>)
   d4964:	681b      	ldr	r3, [r3, #0]
   d4966:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   d496a:	9301      	str	r3, [sp, #4]
   d496c:	bd08      	pop	{r3, pc}
   d496e:	0000      	.short	0x0000
   d4970:	00030278 	.word	0x00030278

000d4974 <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d4974:	b508      	push	{r3, lr}
   d4976:	4b03      	ldr	r3, [pc, #12]	; (d4984 <hal_ble_gap_disconnect+0x10>)
   d4978:	681b      	ldr	r3, [r3, #0]
   d497a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d497e:	9301      	str	r3, [sp, #4]
   d4980:	bd08      	pop	{r3, pc}
   d4982:	0000      	.short	0x0000
   d4984:	00030278 	.word	0x00030278

000d4988 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   d4988:	b508      	push	{r3, lr}
   d498a:	4b03      	ldr	r3, [pc, #12]	; (d4998 <hal_ble_gatt_server_add_service+0x10>)
   d498c:	681b      	ldr	r3, [r3, #0]
   d498e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d4992:	9301      	str	r3, [sp, #4]
   d4994:	bd08      	pop	{r3, pc}
   d4996:	0000      	.short	0x0000
   d4998:	00030278 	.word	0x00030278

000d499c <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d499c:	b508      	push	{r3, lr}
   d499e:	4b03      	ldr	r3, [pc, #12]	; (d49ac <hal_ble_gatt_server_set_characteristic_value+0x10>)
   d49a0:	681b      	ldr	r3, [r3, #0]
   d49a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   d49a6:	9301      	str	r3, [sp, #4]
   d49a8:	bd08      	pop	{r3, pc}
   d49aa:	0000      	.short	0x0000
   d49ac:	00030278 	.word	0x00030278

000d49b0 <hal_ble_gatt_client_discover_all_services>:
DYNALIB_FN(46, hal_ble, hal_ble_gatt_server_get_characteristic_value, ssize_t(hal_ble_attr_handle_t, uint8_t*, size_t, void*))
DYNALIB_FN(47, hal_ble, hal_ble_gatt_client_discover_all_services, int(hal_ble_conn_handle_t, hal_ble_on_disc_service_cb_t, void*, void*))
   d49b0:	b508      	push	{r3, lr}
   d49b2:	4b03      	ldr	r3, [pc, #12]	; (d49c0 <hal_ble_gatt_client_discover_all_services+0x10>)
   d49b4:	681b      	ldr	r3, [r3, #0]
   d49b6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   d49ba:	9301      	str	r3, [sp, #4]
   d49bc:	bd08      	pop	{r3, pc}
   d49be:	0000      	.short	0x0000
   d49c0:	00030278 	.word	0x00030278

000d49c4 <hal_ble_gatt_client_discover_characteristics>:
DYNALIB_FN(48, hal_ble, hal_ble_gatt_client_discover_service_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_uuid_t*, hal_ble_on_disc_service_cb_t, void*, void*))
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
   d49c4:	b508      	push	{r3, lr}
   d49c6:	4b03      	ldr	r3, [pc, #12]	; (d49d4 <hal_ble_gatt_client_discover_characteristics+0x10>)
   d49c8:	681b      	ldr	r3, [r3, #0]
   d49ca:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   d49ce:	9301      	str	r3, [sp, #4]
   d49d0:	bd08      	pop	{r3, pc}
   d49d2:	0000      	.short	0x0000
   d49d4:	00030278 	.word	0x00030278

000d49d8 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d49d8:	b508      	push	{r3, lr}
   d49da:	4b03      	ldr	r3, [pc, #12]	; (d49e8 <hal_ble_gatt_client_write_with_response+0x10>)
   d49dc:	681b      	ldr	r3, [r3, #0]
   d49de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   d49e2:	9301      	str	r3, [sp, #4]
   d49e4:	bd08      	pop	{r3, pc}
   d49e6:	0000      	.short	0x0000
   d49e8:	00030278 	.word	0x00030278

000d49ec <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d49ec:	b508      	push	{r3, lr}
   d49ee:	4b03      	ldr	r3, [pc, #12]	; (d49fc <hal_ble_gatt_client_write_without_response+0x10>)
   d49f0:	681b      	ldr	r3, [r3, #0]
   d49f2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   d49f6:	9301      	str	r3, [sp, #4]
   d49f8:	bd08      	pop	{r3, pc}
   d49fa:	0000      	.short	0x0000
   d49fc:	00030278 	.word	0x00030278

000d4a00 <hal_ble_gatt_client_read>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))
   d4a00:	b508      	push	{r3, lr}
   d4a02:	4b03      	ldr	r3, [pc, #12]	; (d4a10 <hal_ble_gatt_client_read+0x10>)
   d4a04:	681b      	ldr	r3, [r3, #0]
   d4a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   d4a0a:	9301      	str	r3, [sp, #4]
   d4a0c:	bd08      	pop	{r3, pc}
   d4a0e:	0000      	.short	0x0000
   d4a10:	00030278 	.word	0x00030278

000d4a14 <hal_ble_gap_connect>:

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
   d4a14:	b508      	push	{r3, lr}
   d4a16:	4b03      	ldr	r3, [pc, #12]	; (d4a24 <hal_ble_gap_connect+0x10>)
   d4a18:	681b      	ldr	r3, [r3, #0]
   d4a1a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
   d4a1e:	9301      	str	r3, [sp, #4]
   d4a20:	bd08      	pop	{r3, pc}
   d4a22:	0000      	.short	0x0000
   d4a24:	00030278 	.word	0x00030278

000d4a28 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   d4a28:	b508      	push	{r3, lr}
   d4a2a:	4b03      	ldr	r3, [pc, #12]	; (d4a38 <hal_ble_gatt_server_add_characteristic+0x10>)
   d4a2c:	681b      	ldr	r3, [r3, #0]
   d4a2e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   d4a32:	9301      	str	r3, [sp, #4]
   d4a34:	bd08      	pop	{r3, pc}
   d4a36:	0000      	.short	0x0000
   d4a38:	00030278 	.word	0x00030278

000d4a3c <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d4a3c:	b508      	push	{r3, lr}
   d4a3e:	4b03      	ldr	r3, [pc, #12]	; (d4a4c <hal_ble_set_callback_on_periph_link_events+0x10>)
   d4a40:	681b      	ldr	r3, [r3, #0]
   d4a42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d4a46:	9301      	str	r3, [sp, #4]
   d4a48:	bd08      	pop	{r3, pc}
   d4a4a:	0000      	.short	0x0000
   d4a4c:	00030278 	.word	0x00030278

000d4a50 <hal_ble_gatt_client_configure_cccd>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
   d4a50:	b508      	push	{r3, lr}
   d4a52:	4b03      	ldr	r3, [pc, #12]	; (d4a60 <hal_ble_gatt_client_configure_cccd+0x10>)
   d4a54:	681b      	ldr	r3, [r3, #0]
   d4a56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
   d4a5a:	9301      	str	r3, [sp, #4]
   d4a5c:	bd08      	pop	{r3, pc}
   d4a5e:	0000      	.short	0x0000
   d4a60:	00030278 	.word	0x00030278

000d4a64 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4a64:	b508      	push	{r3, lr}
   d4a66:	4b03      	ldr	r3, [pc, #12]	; (d4a74 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   d4a68:	681b      	ldr	r3, [r3, #0]
   d4a6a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   d4a6e:	9301      	str	r3, [sp, #4]
   d4a70:	bd08      	pop	{r3, pc}
   d4a72:	0000      	.short	0x0000
   d4a74:	00030278 	.word	0x00030278

000d4a78 <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4a78:	b508      	push	{r3, lr}
   d4a7a:	4b03      	ldr	r3, [pc, #12]	; (d4a88 <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   d4a7c:	681b      	ldr	r3, [r3, #0]
   d4a7e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   d4a82:	9301      	str	r3, [sp, #4]
   d4a84:	bd08      	pop	{r3, pc}
   d4a86:	0000      	.short	0x0000
   d4a88:	00030278 	.word	0x00030278

000d4a8c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4a8c:	b508      	push	{r3, lr}
   d4a8e:	4b02      	ldr	r3, [pc, #8]	; (d4a98 <os_mutex_recursive_create+0xc>)
   d4a90:	681b      	ldr	r3, [r3, #0]
   d4a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4a94:	9301      	str	r3, [sp, #4]
   d4a96:	bd08      	pop	{r3, pc}
   d4a98:	00030248 	.word	0x00030248

000d4a9c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4a9c:	b508      	push	{r3, lr}
   d4a9e:	4b02      	ldr	r3, [pc, #8]	; (d4aa8 <os_mutex_recursive_destroy+0xc>)
   d4aa0:	681b      	ldr	r3, [r3, #0]
   d4aa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4aa4:	9301      	str	r3, [sp, #4]
   d4aa6:	bd08      	pop	{r3, pc}
   d4aa8:	00030248 	.word	0x00030248

000d4aac <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d4aac:	b508      	push	{r3, lr}
   d4aae:	4b02      	ldr	r3, [pc, #8]	; (d4ab8 <os_mutex_recursive_lock+0xc>)
   d4ab0:	681b      	ldr	r3, [r3, #0]
   d4ab2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4ab4:	9301      	str	r3, [sp, #4]
   d4ab6:	bd08      	pop	{r3, pc}
   d4ab8:	00030248 	.word	0x00030248

000d4abc <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d4abc:	b508      	push	{r3, lr}
   d4abe:	4b02      	ldr	r3, [pc, #8]	; (d4ac8 <os_mutex_recursive_unlock+0xc>)
   d4ac0:	681b      	ldr	r3, [r3, #0]
   d4ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4ac4:	9301      	str	r3, [sp, #4]
   d4ac6:	bd08      	pop	{r3, pc}
   d4ac8:	00030248 	.word	0x00030248

000d4acc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4acc:	b508      	push	{r3, lr}
   d4ace:	4b02      	ldr	r3, [pc, #8]	; (d4ad8 <HAL_RNG_GetRandomNumber+0xc>)
   d4ad0:	681b      	ldr	r3, [r3, #0]
   d4ad2:	685b      	ldr	r3, [r3, #4]
   d4ad4:	9301      	str	r3, [sp, #4]
   d4ad6:	bd08      	pop	{r3, pc}
   d4ad8:	00030218 	.word	0x00030218

000d4adc <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4adc:	b508      	push	{r3, lr}
   d4ade:	4b02      	ldr	r3, [pc, #8]	; (d4ae8 <HAL_Delay_Microseconds+0xc>)
   d4ae0:	681b      	ldr	r3, [r3, #0]
   d4ae2:	68db      	ldr	r3, [r3, #12]
   d4ae4:	9301      	str	r3, [sp, #4]
   d4ae6:	bd08      	pop	{r3, pc}
   d4ae8:	00030218 	.word	0x00030218

000d4aec <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4aec:	b508      	push	{r3, lr}
   d4aee:	4b02      	ldr	r3, [pc, #8]	; (d4af8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4af0:	681b      	ldr	r3, [r3, #0]
   d4af2:	695b      	ldr	r3, [r3, #20]
   d4af4:	9301      	str	r3, [sp, #4]
   d4af6:	bd08      	pop	{r3, pc}
   d4af8:	00030218 	.word	0x00030218

000d4afc <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4afc:	b508      	push	{r3, lr}
   d4afe:	4b02      	ldr	r3, [pc, #8]	; (d4b08 <HAL_Pin_Map+0xc>)
   d4b00:	681b      	ldr	r3, [r3, #0]
   d4b02:	681b      	ldr	r3, [r3, #0]
   d4b04:	9301      	str	r3, [sp, #4]
   d4b06:	bd08      	pop	{r3, pc}
   d4b08:	0003022c 	.word	0x0003022c

000d4b0c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4b0c:	b508      	push	{r3, lr}
   d4b0e:	4b02      	ldr	r3, [pc, #8]	; (d4b18 <inet_inet_ntop+0xc>)
   d4b10:	681b      	ldr	r3, [r3, #0]
   d4b12:	695b      	ldr	r3, [r3, #20]
   d4b14:	9301      	str	r3, [sp, #4]
   d4b16:	bd08      	pop	{r3, pc}
   d4b18:	00030264 	.word	0x00030264

000d4b1c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4b1c:	b508      	push	{r3, lr}
   d4b1e:	4b02      	ldr	r3, [pc, #8]	; (d4b28 <netdb_freeaddrinfo+0xc>)
   d4b20:	681b      	ldr	r3, [r3, #0]
   d4b22:	689b      	ldr	r3, [r3, #8]
   d4b24:	9301      	str	r3, [sp, #4]
   d4b26:	bd08      	pop	{r3, pc}
   d4b28:	00030268 	.word	0x00030268

000d4b2c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4b2c:	b508      	push	{r3, lr}
   d4b2e:	4b02      	ldr	r3, [pc, #8]	; (d4b38 <netdb_getaddrinfo+0xc>)
   d4b30:	681b      	ldr	r3, [r3, #0]
   d4b32:	68db      	ldr	r3, [r3, #12]
   d4b34:	9301      	str	r3, [sp, #4]
   d4b36:	bd08      	pop	{r3, pc}
   d4b38:	00030268 	.word	0x00030268

000d4b3c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4b3c:	b508      	push	{r3, lr}
   d4b3e:	4b02      	ldr	r3, [pc, #8]	; (d4b48 <hal_usart_init+0xc>)
   d4b40:	681b      	ldr	r3, [r3, #0]
   d4b42:	681b      	ldr	r3, [r3, #0]
   d4b44:	9301      	str	r3, [sp, #4]
   d4b46:	bd08      	pop	{r3, pc}
   d4b48:	0003023c 	.word	0x0003023c

000d4b4c <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   d4b4c:	b508      	push	{r3, lr}
   d4b4e:	4b02      	ldr	r3, [pc, #8]	; (d4b58 <hal_usart_end+0xc>)
   d4b50:	681b      	ldr	r3, [r3, #0]
   d4b52:	689b      	ldr	r3, [r3, #8]
   d4b54:	9301      	str	r3, [sp, #4]
   d4b56:	bd08      	pop	{r3, pc}
   d4b58:	0003023c 	.word	0x0003023c

000d4b5c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4b5c:	b508      	push	{r3, lr}
   d4b5e:	4b02      	ldr	r3, [pc, #8]	; (d4b68 <hal_usart_write+0xc>)
   d4b60:	681b      	ldr	r3, [r3, #0]
   d4b62:	68db      	ldr	r3, [r3, #12]
   d4b64:	9301      	str	r3, [sp, #4]
   d4b66:	bd08      	pop	{r3, pc}
   d4b68:	0003023c 	.word	0x0003023c

000d4b6c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4b6c:	b508      	push	{r3, lr}
   d4b6e:	4b02      	ldr	r3, [pc, #8]	; (d4b78 <hal_usart_available+0xc>)
   d4b70:	681b      	ldr	r3, [r3, #0]
   d4b72:	691b      	ldr	r3, [r3, #16]
   d4b74:	9301      	str	r3, [sp, #4]
   d4b76:	bd08      	pop	{r3, pc}
   d4b78:	0003023c 	.word	0x0003023c

000d4b7c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4b7c:	b508      	push	{r3, lr}
   d4b7e:	4b02      	ldr	r3, [pc, #8]	; (d4b88 <hal_usart_read+0xc>)
   d4b80:	681b      	ldr	r3, [r3, #0]
   d4b82:	695b      	ldr	r3, [r3, #20]
   d4b84:	9301      	str	r3, [sp, #4]
   d4b86:	bd08      	pop	{r3, pc}
   d4b88:	0003023c 	.word	0x0003023c

000d4b8c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4b8c:	b508      	push	{r3, lr}
   d4b8e:	4b02      	ldr	r3, [pc, #8]	; (d4b98 <hal_usart_peek+0xc>)
   d4b90:	681b      	ldr	r3, [r3, #0]
   d4b92:	699b      	ldr	r3, [r3, #24]
   d4b94:	9301      	str	r3, [sp, #4]
   d4b96:	bd08      	pop	{r3, pc}
   d4b98:	0003023c 	.word	0x0003023c

000d4b9c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4b9c:	b508      	push	{r3, lr}
   d4b9e:	4b02      	ldr	r3, [pc, #8]	; (d4ba8 <hal_usart_flush+0xc>)
   d4ba0:	681b      	ldr	r3, [r3, #0]
   d4ba2:	69db      	ldr	r3, [r3, #28]
   d4ba4:	9301      	str	r3, [sp, #4]
   d4ba6:	bd08      	pop	{r3, pc}
   d4ba8:	0003023c 	.word	0x0003023c

000d4bac <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4bac:	b508      	push	{r3, lr}
   d4bae:	4b02      	ldr	r3, [pc, #8]	; (d4bb8 <hal_usart_available_data_for_write+0xc>)
   d4bb0:	681b      	ldr	r3, [r3, #0]
   d4bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4bb4:	9301      	str	r3, [sp, #4]
   d4bb6:	bd08      	pop	{r3, pc}
   d4bb8:	0003023c 	.word	0x0003023c

000d4bbc <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d4bbc:	b508      	push	{r3, lr}
   d4bbe:	4b02      	ldr	r3, [pc, #8]	; (d4bc8 <hal_usart_begin_config+0xc>)
   d4bc0:	681b      	ldr	r3, [r3, #0]
   d4bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4bc4:	9301      	str	r3, [sp, #4]
   d4bc6:	bd08      	pop	{r3, pc}
   d4bc8:	0003023c 	.word	0x0003023c

000d4bcc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4bcc:	b508      	push	{r3, lr}
   d4bce:	4b02      	ldr	r3, [pc, #8]	; (d4bd8 <HAL_USB_USART_Init+0xc>)
   d4bd0:	681b      	ldr	r3, [r3, #0]
   d4bd2:	681b      	ldr	r3, [r3, #0]
   d4bd4:	9301      	str	r3, [sp, #4]
   d4bd6:	bd08      	pop	{r3, pc}
   d4bd8:	0003024c 	.word	0x0003024c

000d4bdc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4bdc:	b508      	push	{r3, lr}
   d4bde:	4b02      	ldr	r3, [pc, #8]	; (d4be8 <HAL_USB_USART_Begin+0xc>)
   d4be0:	681b      	ldr	r3, [r3, #0]
   d4be2:	685b      	ldr	r3, [r3, #4]
   d4be4:	9301      	str	r3, [sp, #4]
   d4be6:	bd08      	pop	{r3, pc}
   d4be8:	0003024c 	.word	0x0003024c

000d4bec <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d4bec:	b508      	push	{r3, lr}
   d4bee:	4b02      	ldr	r3, [pc, #8]	; (d4bf8 <HAL_USB_USART_End+0xc>)
   d4bf0:	681b      	ldr	r3, [r3, #0]
   d4bf2:	689b      	ldr	r3, [r3, #8]
   d4bf4:	9301      	str	r3, [sp, #4]
   d4bf6:	bd08      	pop	{r3, pc}
   d4bf8:	0003024c 	.word	0x0003024c

000d4bfc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4bfc:	b508      	push	{r3, lr}
   d4bfe:	4b02      	ldr	r3, [pc, #8]	; (d4c08 <HAL_USB_USART_Available_Data+0xc>)
   d4c00:	681b      	ldr	r3, [r3, #0]
   d4c02:	691b      	ldr	r3, [r3, #16]
   d4c04:	9301      	str	r3, [sp, #4]
   d4c06:	bd08      	pop	{r3, pc}
   d4c08:	0003024c 	.word	0x0003024c

000d4c0c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4c0c:	b508      	push	{r3, lr}
   d4c0e:	4b02      	ldr	r3, [pc, #8]	; (d4c18 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4c10:	681b      	ldr	r3, [r3, #0]
   d4c12:	695b      	ldr	r3, [r3, #20]
   d4c14:	9301      	str	r3, [sp, #4]
   d4c16:	bd08      	pop	{r3, pc}
   d4c18:	0003024c 	.word	0x0003024c

000d4c1c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4c1c:	b508      	push	{r3, lr}
   d4c1e:	4b02      	ldr	r3, [pc, #8]	; (d4c28 <HAL_USB_USART_Receive_Data+0xc>)
   d4c20:	681b      	ldr	r3, [r3, #0]
   d4c22:	699b      	ldr	r3, [r3, #24]
   d4c24:	9301      	str	r3, [sp, #4]
   d4c26:	bd08      	pop	{r3, pc}
   d4c28:	0003024c 	.word	0x0003024c

000d4c2c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4c2c:	b508      	push	{r3, lr}
   d4c2e:	4b02      	ldr	r3, [pc, #8]	; (d4c38 <HAL_USB_USART_Send_Data+0xc>)
   d4c30:	681b      	ldr	r3, [r3, #0]
   d4c32:	69db      	ldr	r3, [r3, #28]
   d4c34:	9301      	str	r3, [sp, #4]
   d4c36:	bd08      	pop	{r3, pc}
   d4c38:	0003024c 	.word	0x0003024c

000d4c3c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4c3c:	b508      	push	{r3, lr}
   d4c3e:	4b02      	ldr	r3, [pc, #8]	; (d4c48 <HAL_USB_USART_Flush_Data+0xc>)
   d4c40:	681b      	ldr	r3, [r3, #0]
   d4c42:	6a1b      	ldr	r3, [r3, #32]
   d4c44:	9301      	str	r3, [sp, #4]
   d4c46:	bd08      	pop	{r3, pc}
   d4c48:	0003024c 	.word	0x0003024c

000d4c4c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4c4c:	b508      	push	{r3, lr}
   d4c4e:	4b02      	ldr	r3, [pc, #8]	; (d4c58 <panic_+0xc>)
   d4c50:	681b      	ldr	r3, [r3, #0]
   d4c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4c54:	9301      	str	r3, [sp, #4]
   d4c56:	bd08      	pop	{r3, pc}
   d4c58:	00030260 	.word	0x00030260

000d4c5c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4c5c:	b508      	push	{r3, lr}
   d4c5e:	4b02      	ldr	r3, [pc, #8]	; (d4c68 <log_message+0xc>)
   d4c60:	681b      	ldr	r3, [r3, #0]
   d4c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4c64:	9301      	str	r3, [sp, #4]
   d4c66:	bd08      	pop	{r3, pc}
   d4c68:	00030260 	.word	0x00030260

000d4c6c <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d4c6c:	b508      	push	{r3, lr}
   d4c6e:	4b02      	ldr	r3, [pc, #8]	; (d4c78 <log_message_v+0xc>)
   d4c70:	681b      	ldr	r3, [r3, #0]
   d4c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4c74:	9301      	str	r3, [sp, #4]
   d4c76:	bd08      	pop	{r3, pc}
   d4c78:	00030260 	.word	0x00030260

000d4c7c <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d4c7c:	b508      	push	{r3, lr}
   d4c7e:	4b02      	ldr	r3, [pc, #8]	; (d4c88 <log_level_name+0xc>)
   d4c80:	681b      	ldr	r3, [r3, #0]
   d4c82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d4c84:	9301      	str	r3, [sp, #4]
   d4c86:	bd08      	pop	{r3, pc}
   d4c88:	00030260 	.word	0x00030260

000d4c8c <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d4c8c:	b508      	push	{r3, lr}
   d4c8e:	4b02      	ldr	r3, [pc, #8]	; (d4c98 <log_set_callbacks+0xc>)
   d4c90:	681b      	ldr	r3, [r3, #0]
   d4c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d4c94:	9301      	str	r3, [sp, #4]
   d4c96:	bd08      	pop	{r3, pc}
   d4c98:	00030260 	.word	0x00030260

000d4c9c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4c9c:	b508      	push	{r3, lr}
   d4c9e:	4b02      	ldr	r3, [pc, #8]	; (d4ca8 <set_system_mode+0xc>)
   d4ca0:	681b      	ldr	r3, [r3, #0]
   d4ca2:	685b      	ldr	r3, [r3, #4]
   d4ca4:	9301      	str	r3, [sp, #4]
   d4ca6:	bd08      	pop	{r3, pc}
   d4ca8:	00030220 	.word	0x00030220

000d4cac <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4cac:	b508      	push	{r3, lr}
   d4cae:	4b02      	ldr	r3, [pc, #8]	; (d4cb8 <system_delay_ms+0xc>)
   d4cb0:	681b      	ldr	r3, [r3, #0]
   d4cb2:	695b      	ldr	r3, [r3, #20]
   d4cb4:	9301      	str	r3, [sp, #4]
   d4cb6:	bd08      	pop	{r3, pc}
   d4cb8:	00030220 	.word	0x00030220

000d4cbc <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4cbc:	b508      	push	{r3, lr}
   d4cbe:	4b02      	ldr	r3, [pc, #8]	; (d4cc8 <application_thread_current+0xc>)
   d4cc0:	681b      	ldr	r3, [r3, #0]
   d4cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4cc4:	9301      	str	r3, [sp, #4]
   d4cc6:	bd08      	pop	{r3, pc}
   d4cc8:	00030220 	.word	0x00030220

000d4ccc <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4ccc:	b508      	push	{r3, lr}
   d4cce:	4b02      	ldr	r3, [pc, #8]	; (d4cd8 <application_thread_invoke+0xc>)
   d4cd0:	681b      	ldr	r3, [r3, #0]
   d4cd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4cd4:	9301      	str	r3, [sp, #4]
   d4cd6:	bd08      	pop	{r3, pc}
   d4cd8:	00030220 	.word	0x00030220

000d4cdc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4cdc:	b508      	push	{r3, lr}
   d4cde:	4b03      	ldr	r3, [pc, #12]	; (d4cec <system_ctrl_set_app_request_handler+0x10>)
   d4ce0:	681b      	ldr	r3, [r3, #0]
   d4ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4ce6:	9301      	str	r3, [sp, #4]
   d4ce8:	bd08      	pop	{r3, pc}
   d4cea:	0000      	.short	0x0000
   d4cec:	00030220 	.word	0x00030220

000d4cf0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4cf0:	b508      	push	{r3, lr}
   d4cf2:	4b03      	ldr	r3, [pc, #12]	; (d4d00 <system_ctrl_set_result+0x10>)
   d4cf4:	681b      	ldr	r3, [r3, #0]
   d4cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4cfa:	9301      	str	r3, [sp, #4]
   d4cfc:	bd08      	pop	{r3, pc}
   d4cfe:	0000      	.short	0x0000
   d4d00:	00030220 	.word	0x00030220

000d4d04 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4d04:	b508      	push	{r3, lr}
   d4d06:	4b02      	ldr	r3, [pc, #8]	; (d4d10 <spark_cloud_flag_connected+0xc>)
   d4d08:	681b      	ldr	r3, [r3, #0]
   d4d0a:	695b      	ldr	r3, [r3, #20]
   d4d0c:	9301      	str	r3, [sp, #4]
   d4d0e:	bd08      	pop	{r3, pc}
   d4d10:	00030244 	.word	0x00030244

000d4d14 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4d14:	b508      	push	{r3, lr}
   d4d16:	4b02      	ldr	r3, [pc, #8]	; (d4d20 <spark_send_event+0xc>)
   d4d18:	681b      	ldr	r3, [r3, #0]
   d4d1a:	6a1b      	ldr	r3, [r3, #32]
   d4d1c:	9301      	str	r3, [sp, #4]
   d4d1e:	bd08      	pop	{r3, pc}
   d4d20:	00030244 	.word	0x00030244

000d4d24 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4d24:	b508      	push	{r3, lr}
   d4d26:	4b02      	ldr	r3, [pc, #8]	; (d4d30 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4d28:	681b      	ldr	r3, [r3, #0]
   d4d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4d2c:	9301      	str	r3, [sp, #4]
   d4d2e:	bd08      	pop	{r3, pc}
   d4d30:	00030244 	.word	0x00030244

000d4d34 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4d34:	b508      	push	{r3, lr}
   d4d36:	4b02      	ldr	r3, [pc, #8]	; (d4d40 <network_connect+0xc>)
   d4d38:	681b      	ldr	r3, [r3, #0]
   d4d3a:	685b      	ldr	r3, [r3, #4]
   d4d3c:	9301      	str	r3, [sp, #4]
   d4d3e:	bd08      	pop	{r3, pc}
   d4d40:	00030240 	.word	0x00030240

000d4d44 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4d44:	b508      	push	{r3, lr}
   d4d46:	4b02      	ldr	r3, [pc, #8]	; (d4d50 <network_connecting+0xc>)
   d4d48:	681b      	ldr	r3, [r3, #0]
   d4d4a:	689b      	ldr	r3, [r3, #8]
   d4d4c:	9301      	str	r3, [sp, #4]
   d4d4e:	bd08      	pop	{r3, pc}
   d4d50:	00030240 	.word	0x00030240

000d4d54 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4d54:	b508      	push	{r3, lr}
   d4d56:	4b02      	ldr	r3, [pc, #8]	; (d4d60 <network_disconnect+0xc>)
   d4d58:	681b      	ldr	r3, [r3, #0]
   d4d5a:	68db      	ldr	r3, [r3, #12]
   d4d5c:	9301      	str	r3, [sp, #4]
   d4d5e:	bd08      	pop	{r3, pc}
   d4d60:	00030240 	.word	0x00030240

000d4d64 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4d64:	b508      	push	{r3, lr}
   d4d66:	4b02      	ldr	r3, [pc, #8]	; (d4d70 <network_ready+0xc>)
   d4d68:	681b      	ldr	r3, [r3, #0]
   d4d6a:	691b      	ldr	r3, [r3, #16]
   d4d6c:	9301      	str	r3, [sp, #4]
   d4d6e:	bd08      	pop	{r3, pc}
   d4d70:	00030240 	.word	0x00030240

000d4d74 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4d74:	b508      	push	{r3, lr}
   d4d76:	4b02      	ldr	r3, [pc, #8]	; (d4d80 <network_on+0xc>)
   d4d78:	681b      	ldr	r3, [r3, #0]
   d4d7a:	695b      	ldr	r3, [r3, #20]
   d4d7c:	9301      	str	r3, [sp, #4]
   d4d7e:	bd08      	pop	{r3, pc}
   d4d80:	00030240 	.word	0x00030240

000d4d84 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4d84:	b508      	push	{r3, lr}
   d4d86:	4b02      	ldr	r3, [pc, #8]	; (d4d90 <network_off+0xc>)
   d4d88:	681b      	ldr	r3, [r3, #0]
   d4d8a:	699b      	ldr	r3, [r3, #24]
   d4d8c:	9301      	str	r3, [sp, #4]
   d4d8e:	bd08      	pop	{r3, pc}
   d4d90:	00030240 	.word	0x00030240

000d4d94 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4d94:	b508      	push	{r3, lr}
   d4d96:	4b02      	ldr	r3, [pc, #8]	; (d4da0 <network_listen+0xc>)
   d4d98:	681b      	ldr	r3, [r3, #0]
   d4d9a:	69db      	ldr	r3, [r3, #28]
   d4d9c:	9301      	str	r3, [sp, #4]
   d4d9e:	bd08      	pop	{r3, pc}
   d4da0:	00030240 	.word	0x00030240

000d4da4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4da4:	b508      	push	{r3, lr}
   d4da6:	4b02      	ldr	r3, [pc, #8]	; (d4db0 <network_listening+0xc>)
   d4da8:	681b      	ldr	r3, [r3, #0]
   d4daa:	6a1b      	ldr	r3, [r3, #32]
   d4dac:	9301      	str	r3, [sp, #4]
   d4dae:	bd08      	pop	{r3, pc}
   d4db0:	00030240 	.word	0x00030240

000d4db4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4db4:	b508      	push	{r3, lr}
   d4db6:	4b02      	ldr	r3, [pc, #8]	; (d4dc0 <network_set_listen_timeout+0xc>)
   d4db8:	681b      	ldr	r3, [r3, #0]
   d4dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4dbc:	9301      	str	r3, [sp, #4]
   d4dbe:	bd08      	pop	{r3, pc}
   d4dc0:	00030240 	.word	0x00030240

000d4dc4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4dc4:	b508      	push	{r3, lr}
   d4dc6:	4b02      	ldr	r3, [pc, #8]	; (d4dd0 <network_get_listen_timeout+0xc>)
   d4dc8:	681b      	ldr	r3, [r3, #0]
   d4dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4dcc:	9301      	str	r3, [sp, #4]
   d4dce:	bd08      	pop	{r3, pc}
   d4dd0:	00030240 	.word	0x00030240

000d4dd4 <malloc>:
#include "newlib_impure.h"
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4dd4:	b508      	push	{r3, lr}
   d4dd6:	4b02      	ldr	r3, [pc, #8]	; (d4de0 <malloc+0xc>)
   d4dd8:	681b      	ldr	r3, [r3, #0]
   d4dda:	681b      	ldr	r3, [r3, #0]
   d4ddc:	9301      	str	r3, [sp, #4]
   d4dde:	bd08      	pop	{r3, pc}
   d4de0:	0003021c 	.word	0x0003021c

000d4de4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4de4:	b508      	push	{r3, lr}
   d4de6:	4b02      	ldr	r3, [pc, #8]	; (d4df0 <free+0xc>)
   d4de8:	681b      	ldr	r3, [r3, #0]
   d4dea:	685b      	ldr	r3, [r3, #4]
   d4dec:	9301      	str	r3, [sp, #4]
   d4dee:	bd08      	pop	{r3, pc}
   d4df0:	0003021c 	.word	0x0003021c

000d4df4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4df4:	b508      	push	{r3, lr}
   d4df6:	4b02      	ldr	r3, [pc, #8]	; (d4e00 <realloc+0xc>)
   d4df8:	681b      	ldr	r3, [r3, #0]
   d4dfa:	689b      	ldr	r3, [r3, #8]
   d4dfc:	9301      	str	r3, [sp, #4]
   d4dfe:	bd08      	pop	{r3, pc}
   d4e00:	0003021c 	.word	0x0003021c

000d4e04 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4e04:	b508      	push	{r3, lr}
   d4e06:	4b02      	ldr	r3, [pc, #8]	; (d4e10 <vsnprintf+0xc>)
   d4e08:	681b      	ldr	r3, [r3, #0]
   d4e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4e0c:	9301      	str	r3, [sp, #4]
   d4e0e:	bd08      	pop	{r3, pc}
   d4e10:	0003021c 	.word	0x0003021c

000d4e14 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4e14:	b508      	push	{r3, lr}
   d4e16:	4b02      	ldr	r3, [pc, #8]	; (d4e20 <abort+0xc>)
   d4e18:	681b      	ldr	r3, [r3, #0]
   d4e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4e1c:	9301      	str	r3, [sp, #4]
   d4e1e:	bd08      	pop	{r3, pc}
   d4e20:	0003021c 	.word	0x0003021c

000d4e24 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4e24:	b508      	push	{r3, lr}
   d4e26:	4b02      	ldr	r3, [pc, #8]	; (d4e30 <_malloc_r+0xc>)
   d4e28:	681b      	ldr	r3, [r3, #0]
   d4e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4e2c:	9301      	str	r3, [sp, #4]
   d4e2e:	bd08      	pop	{r3, pc}
   d4e30:	0003021c 	.word	0x0003021c

000d4e34 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4e34:	b508      	push	{r3, lr}
   d4e36:	4b02      	ldr	r3, [pc, #8]	; (d4e40 <newlib_impure_ptr_callback+0xc>)
   d4e38:	681b      	ldr	r3, [r3, #0]
   d4e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4e3c:	9301      	str	r3, [sp, #4]
   d4e3e:	bd08      	pop	{r3, pc}
   d4e40:	0003021c 	.word	0x0003021c

000d4e44 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4e44:	2100      	movs	r1, #0
   d4e46:	f7ff bf31 	b.w	d4cac <system_delay_ms>

000d4e4a <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d4e4a:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4e4c:	6883      	ldr	r3, [r0, #8]
   d4e4e:	4604      	mov	r4, r0
   d4e50:	b90b      	cbnz	r3, d4e56 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d4e52:	f003 feba 	bl	d8bca <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4e56:	68c3      	ldr	r3, [r0, #12]
   d4e58:	4798      	blx	r3
      if (_M_manager)
   d4e5a:	68a3      	ldr	r3, [r4, #8]
   d4e5c:	b11b      	cbz	r3, d4e66 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4e5e:	2203      	movs	r2, #3
   d4e60:	4621      	mov	r1, r4
   d4e62:	4620      	mov	r0, r4
   d4e64:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4e66:	4620      	mov	r0, r4
   d4e68:	2110      	movs	r1, #16
}
   d4e6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d4e6e:	f003 bea8 	b.w	d8bc2 <_ZdlPvj>

000d4e72 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d4e72:	4770      	bx	lr

000d4e74 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   d4e74:	4770      	bx	lr

000d4e76 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   d4e76:	4770      	bx	lr

000d4e78 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d4e78:	4770      	bx	lr
	...

000d4e7c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d4e7c:	4b06      	ldr	r3, [pc, #24]	; (d4e98 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d4e7e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d4e80:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d4e82:	f100 040c 	add.w	r4, r0, #12
	    ||
   d4e86:	d005      	beq.n	d4e94 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d4e88:	4608      	mov	r0, r1
   d4e8a:	f003 fea1 	bl	d8bd0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d4e8e:	2800      	cmp	r0, #0
	return nullptr;
   d4e90:	bf08      	it	eq
   d4e92:	2400      	moveq	r4, #0
      }
   d4e94:	4620      	mov	r0, r4
   d4e96:	bd10      	pop	{r4, pc}
   d4e98:	000d94d0 	.word	0x000d94d0

000d4e9c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d4e9c:	4b06      	ldr	r3, [pc, #24]	; (d4eb8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d4e9e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d4ea0:	b510      	push	{r4, lr}
   d4ea2:	f100 040c 	add.w	r4, r0, #12
	    ||
   d4ea6:	d005      	beq.n	d4eb4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d4ea8:	4608      	mov	r0, r1
   d4eaa:	f003 fe91 	bl	d8bd0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d4eae:	2800      	cmp	r0, #0
	return nullptr;
   d4eb0:	bf08      	it	eq
   d4eb2:	2400      	moveq	r4, #0
      }
   d4eb4:	4620      	mov	r0, r4
   d4eb6:	bd10      	pop	{r4, pc}
   d4eb8:	000d94d0 	.word	0x000d94d0

000d4ebc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d4ebc:	4b06      	ldr	r3, [pc, #24]	; (d4ed8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d4ebe:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d4ec0:	b510      	push	{r4, lr}
   d4ec2:	f100 040c 	add.w	r4, r0, #12
	    ||
   d4ec6:	d005      	beq.n	d4ed4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d4ec8:	4608      	mov	r0, r1
   d4eca:	f003 fe81 	bl	d8bd0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d4ece:	2800      	cmp	r0, #0
	return nullptr;
   d4ed0:	bf08      	it	eq
   d4ed2:	2400      	moveq	r4, #0
      }
   d4ed4:	4620      	mov	r0, r4
   d4ed6:	bd10      	pop	{r4, pc}
   d4ed8:	000d94d0 	.word	0x000d94d0

000d4edc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
        svcUuid_ = svcUuid;
    }

    ~BleCharacteristicImpl() = default;
   d4edc:	3048      	adds	r0, #72	; 0x48
   d4ede:	f003 bb45 	b.w	d856c <_ZN6StringD1Ev>

000d4ee2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d4ee2:	b510      	push	{r4, lr}
   d4ee4:	2160      	movs	r1, #96	; 0x60
   d4ee6:	4604      	mov	r4, r0
   d4ee8:	f003 fe6b 	bl	d8bc2 <_ZdlPvj>
   d4eec:	4620      	mov	r0, r4
   d4eee:	bd10      	pop	{r4, pc}

000d4ef0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   d4ef0:	b510      	push	{r4, lr}
   d4ef2:	2124      	movs	r1, #36	; 0x24
   d4ef4:	4604      	mov	r4, r0
   d4ef6:	f003 fe64 	bl	d8bc2 <_ZdlPvj>
   d4efa:	4620      	mov	r0, r4
   d4efc:	bd10      	pop	{r4, pc}

000d4efe <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   d4efe:	b510      	push	{r4, lr}
   d4f00:	2130      	movs	r1, #48	; 0x30
   d4f02:	4604      	mov	r4, r0
   d4f04:	f003 fe5d 	bl	d8bc2 <_ZdlPvj>
   d4f08:	4620      	mov	r0, r4
   d4f0a:	bd10      	pop	{r4, pc}

000d4f0c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d4f0c:	f7ff b8c3 	b.w	d4096 <_ZdlPv>

000d4f10 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   d4f10:	f7ff b8c1 	b.w	d4096 <_ZdlPv>

000d4f14 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   d4f14:	f7ff b8bf 	b.w	d4096 <_ZdlPv>

000d4f18 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4f18:	b510      	push	{r4, lr}
          _M_dispose();
   d4f1a:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4f1c:	4604      	mov	r4, r0
          _M_dispose();
   d4f1e:	689b      	ldr	r3, [r3, #8]
   d4f20:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4f22:	68a3      	ldr	r3, [r4, #8]
   d4f24:	3b01      	subs	r3, #1
   d4f26:	60a3      	str	r3, [r4, #8]
   d4f28:	b92b      	cbnz	r3, d4f36 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d4f2a:	6823      	ldr	r3, [r4, #0]
   d4f2c:	4620      	mov	r0, r4
   d4f2e:	68db      	ldr	r3, [r3, #12]
    }
   d4f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d4f34:	4718      	bx	r3
    }
   d4f36:	bd10      	pop	{r4, pc}

000d4f38 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4f38:	b510      	push	{r4, lr}
   d4f3a:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4f3c:	6800      	ldr	r0, [r0, #0]
   d4f3e:	b108      	cbz	r0, d4f44 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4f40:	f7ff fdac 	bl	d4a9c <os_mutex_recursive_destroy>
    }
   d4f44:	4620      	mov	r0, r4
   d4f46:	bd10      	pop	{r4, pc}

000d4f48 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d4f48:	b5f0      	push	{r4, r5, r6, r7, lr}
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d4f4a:	2500      	movs	r5, #0
   d4f4c:	1cec      	adds	r4, r5, #3
   d4f4e:	428c      	cmp	r4, r1
   d4f50:	d80d      	bhi.n	d4f6e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        if (buf[i + 1] == adsType) {
   d4f52:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   d4f54:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   d4f56:	5d87      	ldrb	r7, [r0, r6]
   d4f58:	4297      	cmp	r7, r2
   d4f5a:	d105      	bne.n	d4f68 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            if ((i + adsLen + 1) <= len) {
   d4f5c:	4426      	add	r6, r4
   d4f5e:	42b1      	cmp	r1, r6
   d4f60:	d305      	bcc.n	d4f6e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   d4f62:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   d4f64:	1c60      	adds	r0, r4, #1
}
   d4f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   d4f68:	3401      	adds	r4, #1
   d4f6a:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d4f6c:	e7ee      	b.n	d4f4c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   d4f6e:	2000      	movs	r0, #0
   d4f70:	e7f9      	b.n	d4f66 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000d4f74 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>:
        CHECK(discoverAllServices(peer));
        CHECK(discoverAllCharacteristics(peer));
        return SYSTEM_ERROR_NONE;
    }

    int discoverAllServices(BlePeerDevice& peer) {
   d4f74:	b510      	push	{r4, lr}
        LOG(TRACE, "Start discovering services.");
   d4f76:	2300      	movs	r3, #0
    int discoverAllServices(BlePeerDevice& peer) {
   d4f78:	b08a      	sub	sp, #40	; 0x28
        LOG(TRACE, "Start discovering services.");
   d4f7a:	2220      	movs	r2, #32
   d4f7c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    int discoverAllServices(BlePeerDevice& peer) {
   d4f80:	4604      	mov	r4, r0
        LOG(TRACE, "Start discovering services.");
   d4f82:	4a08      	ldr	r2, [pc, #32]	; (d4fa4 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x30>)
   d4f84:	9200      	str	r2, [sp, #0]
   d4f86:	4908      	ldr	r1, [pc, #32]	; (d4fa8 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x34>)
   d4f88:	aa02      	add	r2, sp, #8
   d4f8a:	2001      	movs	r0, #1
   d4f8c:	f7ff fe66 	bl	d4c5c <log_message>
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   d4f90:	6820      	ldr	r0, [r4, #0]
   d4f92:	4906      	ldr	r1, [pc, #24]	; (d4fac <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x38>)
   d4f94:	8800      	ldrh	r0, [r0, #0]
   d4f96:	2300      	movs	r3, #0
   d4f98:	4622      	mov	r2, r4
   d4f9a:	f7ff fd09 	bl	d49b0 <hal_ble_gatt_client_discover_all_services>
    }
   d4f9e:	b00a      	add	sp, #40	; 0x28
   d4fa0:	bd10      	pop	{r4, pc}
   d4fa2:	bf00      	nop
   d4fa4:	000d92e7 	.word	0x000d92e7
   d4fa8:	000d92dc 	.word	0x000d92dc
   d4fac:	000d6285 	.word	0x000d6285

000d4fb0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
        SPARK_ASSERT(false);
   d4fb0:	4a02      	ldr	r2, [pc, #8]	; (d4fbc <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   d4fb2:	2100      	movs	r1, #0
   d4fb4:	200a      	movs	r0, #10
   d4fb6:	f7ff be49 	b.w	d4c4c <panic_>
   d4fba:	bf00      	nop
   d4fbc:	000d4add 	.word	0x000d4add

000d4fc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>:
      operator=(const __shared_count& __r) noexcept
   d4fc0:	b538      	push	{r3, r4, r5, lr}
	if (__tmp != _M_pi)
   d4fc2:	6803      	ldr	r3, [r0, #0]
   d4fc4:	428b      	cmp	r3, r1
      operator=(const __shared_count& __r) noexcept
   d4fc6:	4605      	mov	r5, r0
   d4fc8:	460c      	mov	r4, r1
	if (__tmp != _M_pi)
   d4fca:	d00c      	beq.n	d4fe6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x26>
	    if (__tmp != 0)
   d4fcc:	b111      	cbz	r1, d4fd4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x14>
    { ++_M_use_count; }
   d4fce:	684b      	ldr	r3, [r1, #4]
   d4fd0:	3301      	adds	r3, #1
   d4fd2:	604b      	str	r3, [r1, #4]
	    if (_M_pi != 0)
   d4fd4:	6828      	ldr	r0, [r5, #0]
   d4fd6:	b128      	cbz	r0, d4fe4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x24>
      if (--_M_use_count == 0)
   d4fd8:	6843      	ldr	r3, [r0, #4]
   d4fda:	3b01      	subs	r3, #1
   d4fdc:	6043      	str	r3, [r0, #4]
   d4fde:	b90b      	cbnz	r3, d4fe4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x24>
   d4fe0:	f7ff ff9a 	bl	d4f18 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d4fe4:	602c      	str	r4, [r5, #0]
      }
   d4fe6:	4628      	mov	r0, r5
   d4fe8:	bd38      	pop	{r3, r4, r5, pc}

000d4fea <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d4fea:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d4fee:	b2da      	uxtb	r2, r3
   d4ff0:	2a09      	cmp	r2, #9
   d4ff2:	d801      	bhi.n	d4ff8 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d4ff4:	4618      	mov	r0, r3
   d4ff6:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d4ff8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d4ffc:	2b05      	cmp	r3, #5
   d4ffe:	d801      	bhi.n	d5004 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d5000:	3857      	subs	r0, #87	; 0x57
   d5002:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d5004:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d5008:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d500a:	bf94      	ite	ls
   d500c:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d500e:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   d5012:	4770      	bx	lr

000d5014 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   d5014:	b510      	push	{r4, lr}
            locked_(false) {
   d5016:	2300      	movs	r3, #0
   d5018:	7003      	strb	r3, [r0, #0]
        mutex_.lock();
   d501a:	4b04      	ldr	r3, [pc, #16]	; (d502c <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   d501c:	4604      	mov	r4, r0
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d501e:	6818      	ldr	r0, [r3, #0]
   d5020:	f7ff fd44 	bl	d4aac <os_mutex_recursive_lock>
        locked_ = true;
   d5024:	2301      	movs	r3, #1
   d5026:	7023      	strb	r3, [r4, #0]
    }
   d5028:	4620      	mov	r0, r4
   d502a:	bd10      	pop	{r4, pc}
   d502c:	2003e630 	.word	0x2003e630

000d5030 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   d5030:	b510      	push	{r4, lr}
        if (locked_) {
   d5032:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   d5034:	4604      	mov	r4, r0
        if (locked_) {
   d5036:	b11b      	cbz	r3, d5040 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
        mutex_.unlock();
   d5038:	4b02      	ldr	r3, [pc, #8]	; (d5044 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d503a:	6818      	ldr	r0, [r3, #0]
   d503c:	f7ff fd3e 	bl	d4abc <os_mutex_recursive_unlock>
    }
   d5040:	4620      	mov	r0, r4
   d5042:	bd10      	pop	{r4, pc}
   d5044:	2003e630 	.word	0x2003e630

000d5048 <_ZN8particle10BleAddressC1Ev>:
        : address_{} {
   d5048:	2200      	movs	r2, #0
   d504a:	6042      	str	r2, [r0, #4]
   d504c:	6002      	str	r2, [r0, #0]
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   d504e:	7182      	strb	r2, [r0, #6]
}
   d5050:	4770      	bx	lr

000d5052 <_ZNK8particle10BleAddressixEh>:
    if (i >= BLE_SIG_ADDR_LEN) {
   d5052:	2905      	cmp	r1, #5
    return address_.addr[i];
   d5054:	bf94      	ite	ls
   d5056:	5c40      	ldrbls	r0, [r0, r1]
        return 0;
   d5058:	2000      	movhi	r0, #0
}
   d505a:	4770      	bx	lr

000d505c <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   d505c:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d505e:	7982      	ldrb	r2, [r0, #6]
   d5060:	798b      	ldrb	r3, [r1, #6]
   d5062:	429a      	cmp	r2, r3
   d5064:	d106      	bne.n	d5074 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d5066:	2206      	movs	r2, #6
   d5068:	f003 fed2 	bl	d8e10 <memcmp>
   d506c:	fab0 f080 	clz	r0, r0
   d5070:	0940      	lsrs	r0, r0, #5
}
   d5072:	bd08      	pop	{r3, pc}
    return false;
   d5074:	2000      	movs	r0, #0
   d5076:	e7fc      	b.n	d5072 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000d5078 <_ZN8particle7BleUuidC1Ev>:
        : type_(BleUuidType::LONG) {
   d5078:	2201      	movs	r2, #1
   d507a:	6102      	str	r2, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d507c:	4a06      	ldr	r2, [pc, #24]	; (d5098 <_ZN8particle7BleUuidC1Ev+0x20>)
   d507e:	6811      	ldr	r1, [r2, #0]
   d5080:	6001      	str	r1, [r0, #0]
   d5082:	6851      	ldr	r1, [r2, #4]
   d5084:	6041      	str	r1, [r0, #4]
   d5086:	8911      	ldrh	r1, [r2, #8]
   d5088:	7a92      	ldrb	r2, [r2, #10]
   d508a:	7282      	strb	r2, [r0, #10]
   d508c:	2200      	movs	r2, #0
   d508e:	8101      	strh	r1, [r0, #8]
   d5090:	f8c0 200b 	str.w	r2, [r0, #11]
   d5094:	73c2      	strb	r2, [r0, #15]
}
   d5096:	4770      	bx	lr
   d5098:	000d94d8 	.word	0x000d94d8

000d509c <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>:
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   d509c:	7c0b      	ldrb	r3, [r1, #16]
   d509e:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
   d50a2:	b510      	push	{r4, lr}
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   d50a4:	d10f      	bne.n	d50c6 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x2a>
        memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d50a6:	4a0e      	ldr	r2, [pc, #56]	; (d50e0 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x44>)
   d50a8:	f8c0 300b 	str.w	r3, [r0, #11]
   d50ac:	6814      	ldr	r4, [r2, #0]
   d50ae:	6004      	str	r4, [r0, #0]
   d50b0:	6854      	ldr	r4, [r2, #4]
   d50b2:	6044      	str	r4, [r0, #4]
   d50b4:	8914      	ldrh	r4, [r2, #8]
   d50b6:	7a92      	ldrb	r2, [r2, #10]
        type_ = BleUuidType::SHORT;
   d50b8:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d50ba:	8104      	strh	r4, [r0, #8]
   d50bc:	7282      	strb	r2, [r0, #10]
   d50be:	73c3      	strb	r3, [r0, #15]
        uuid128_[UUID16_LO] = (uint8_t)uuid.uuid16;
   d50c0:	880b      	ldrh	r3, [r1, #0]
   d50c2:	8183      	strh	r3, [r0, #12]
}
   d50c4:	bd10      	pop	{r4, pc}
        type_ = BleUuidType::LONG;
   d50c6:	2301      	movs	r3, #1
   d50c8:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, uuid.uuid128, BLE_SIG_UUID_128BIT_LEN);
   d50ca:	f101 0210 	add.w	r2, r1, #16
   d50ce:	4603      	mov	r3, r0
   d50d0:	f851 4b04 	ldr.w	r4, [r1], #4
   d50d4:	f843 4b04 	str.w	r4, [r3], #4
   d50d8:	4291      	cmp	r1, r2
   d50da:	d1f9      	bne.n	d50d0 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x34>
   d50dc:	e7f2      	b.n	d50c4 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x28>
   d50de:	bf00      	nop
   d50e0:	000d94d8 	.word	0x000d94d8

000d50e4 <_ZN8particle7BleUuidC1ERKS0_>:
BleUuid::BleUuid(const BleUuid& uuid)
   d50e4:	b510      	push	{r4, lr}
        : type_(uuid.type_) {
   d50e6:	690b      	ldr	r3, [r1, #16]
   d50e8:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d50ea:	f101 0210 	add.w	r2, r1, #16
   d50ee:	4603      	mov	r3, r0
   d50f0:	f851 4b04 	ldr.w	r4, [r1], #4
   d50f4:	f843 4b04 	str.w	r4, [r3], #4
   d50f8:	4291      	cmp	r1, r2
   d50fa:	d1f9      	bne.n	d50f0 <_ZN8particle7BleUuidC1ERKS0_+0xc>
}
   d50fc:	bd10      	pop	{r4, pc}

000d50fe <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d50fe:	b510      	push	{r4, lr}
    if (uuid128) {
   d5100:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d5102:	4604      	mov	r4, r0
    if (uuid128) {
   d5104:	b1b1      	cbz	r1, d5134 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   d5106:	2a01      	cmp	r2, #1
   d5108:	f101 0210 	add.w	r2, r1, #16
   d510c:	d10a      	bne.n	d5124 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d510e:	4601      	mov	r1, r0
   d5110:	f853 0b04 	ldr.w	r0, [r3], #4
   d5114:	f841 0b04 	str.w	r0, [r1], #4
   d5118:	4293      	cmp	r3, r2
   d511a:	d1f9      	bne.n	d5110 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   d511c:	2301      	movs	r3, #1
   d511e:	6123      	str	r3, [r4, #16]
}
   d5120:	4620      	mov	r0, r4
   d5122:	bd10      	pop	{r4, pc}
   d5124:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   d5126:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   d512a:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d512e:	429a      	cmp	r2, r3
   d5130:	d1f9      	bne.n	d5126 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   d5132:	e7f3      	b.n	d511c <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d5134:	2210      	movs	r2, #16
   d5136:	f003 fea1 	bl	d8e7c <memset>
   d513a:	e7f1      	b.n	d5120 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000d513c <_ZN8particle7BleUuidC1Et>:
BleUuid::BleUuid(uint16_t uuid16)
   d513c:	b510      	push	{r4, lr}
   d513e:	4603      	mov	r3, r0
   d5140:	460c      	mov	r4, r1
        : BleUuid() {
   d5142:	f7ff ff99 	bl	d5078 <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
   d5146:	2200      	movs	r2, #0
   d5148:	611a      	str	r2, [r3, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   d514a:	819c      	strh	r4, [r3, #12]
}
   d514c:	4618      	mov	r0, r3
   d514e:	bd10      	pop	{r4, pc}

000d5150 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   d5150:	b538      	push	{r3, r4, r5, lr}
   d5152:	4604      	mov	r4, r0
   d5154:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   d5156:	461a      	mov	r2, r3
   d5158:	f7ff ffd1 	bl	d50fe <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   d515c:	81a5      	strh	r5, [r4, #12]
}
   d515e:	4620      	mov	r0, r4
   d5160:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5164 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   d5164:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   d5166:	6902      	ldr	r2, [r0, #16]
   d5168:	b922      	cbnz	r2, d5174 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   d516a:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d516c:	3800      	subs	r0, #0
   d516e:	bf18      	it	ne
   d5170:	2001      	movne	r0, #1
}
   d5172:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d5174:	4902      	ldr	r1, [pc, #8]	; (d5180 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   d5176:	2210      	movs	r2, #16
   d5178:	f003 fe4a 	bl	d8e10 <memcmp>
   d517c:	e7f6      	b.n	d516c <_ZNK8particle7BleUuid7isValidEv+0x8>
   d517e:	bf00      	nop
   d5180:	000d94f8 	.word	0x000d94f8

000d5184 <_ZNK8particle7BleUuid4typeEv>:
}
   d5184:	6900      	ldr	r0, [r0, #16]
   d5186:	4770      	bx	lr

000d5188 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   d5188:	b538      	push	{r3, r4, r5, lr}
   d518a:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   d518c:	2214      	movs	r2, #20
   d518e:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   d5190:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   d5192:	f003 fe73 	bl	d8e7c <memset>
    if (type_ == BleUuidType::SHORT) {
   d5196:	6923      	ldr	r3, [r4, #16]
   d5198:	b93b      	cbnz	r3, d51aa <_ZN8particle7BleUuid7halUUIDEv+0x22>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d519a:	7b62      	ldrb	r2, [r4, #13]
        uuid.type = BLE_UUID_TYPE_16BIT;
   d519c:	742b      	strb	r3, [r5, #16]
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d519e:	7b23      	ldrb	r3, [r4, #12]
   d51a0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d51a4:	802b      	strh	r3, [r5, #0]
}
   d51a6:	4628      	mov	r0, r5
   d51a8:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   d51aa:	2301      	movs	r3, #1
   d51ac:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d51ae:	f104 0210 	add.w	r2, r4, #16
   d51b2:	462b      	mov	r3, r5
   d51b4:	f854 1b04 	ldr.w	r1, [r4], #4
   d51b8:	f843 1b04 	str.w	r1, [r3], #4
   d51bc:	4294      	cmp	r4, r2
   d51be:	d1f9      	bne.n	d51b4 <_ZN8particle7BleUuid7halUUIDEv+0x2c>
   d51c0:	e7f1      	b.n	d51a6 <_ZN8particle7BleUuid7halUUIDEv+0x1e>

000d51c2 <_ZNK8particle7BleUuid7shortedEv>:
    return ((uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8));
   d51c2:	7b42      	ldrb	r2, [r0, #13]
   d51c4:	7b00      	ldrb	r0, [r0, #12]
}
   d51c6:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   d51ca:	4770      	bx	lr

000d51cc <_ZNK8particle7BleUuid8rawBytesEv>:
}
   d51cc:	4770      	bx	lr

000d51ce <_ZN8particle7BleUuidaSERKS0_>:
BleUuid& BleUuid::operator=(const BleUuid& uuid) {
   d51ce:	b510      	push	{r4, lr}
    type_ = uuid.type_;
   d51d0:	690b      	ldr	r3, [r1, #16]
   d51d2:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d51d4:	f101 0210 	add.w	r2, r1, #16
   d51d8:	4603      	mov	r3, r0
   d51da:	f851 4b04 	ldr.w	r4, [r1], #4
   d51de:	f843 4b04 	str.w	r4, [r3], #4
   d51e2:	4291      	cmp	r1, r2
   d51e4:	d1f9      	bne.n	d51da <_ZN8particle7BleUuidaSERKS0_+0xc>
}
   d51e6:	bd10      	pop	{r4, pc}

000d51e8 <_ZN8particle7BleUuidaSEPKh>:
BleUuid& BleUuid::operator=(const uint8_t* uuid128) {
   d51e8:	b510      	push	{r4, lr}
   d51ea:	b086      	sub	sp, #24
   d51ec:	4604      	mov	r4, r0
    return *this = BleUuid(uuid128);
   d51ee:	2201      	movs	r2, #1
   d51f0:	a801      	add	r0, sp, #4
   d51f2:	f7ff ff84 	bl	d50fe <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   d51f6:	a901      	add	r1, sp, #4
   d51f8:	4620      	mov	r0, r4
   d51fa:	f7ff ffe8 	bl	d51ce <_ZN8particle7BleUuidaSERKS0_>
}
   d51fe:	b006      	add	sp, #24
   d5200:	bd10      	pop	{r4, pc}

000d5202 <_ZN8particle7BleUuidaSEt>:
BleUuid& BleUuid::operator=(uint16_t uuid16) {
   d5202:	b510      	push	{r4, lr}
   d5204:	b086      	sub	sp, #24
   d5206:	4604      	mov	r4, r0
    return *this = BleUuid(uuid16);
   d5208:	a801      	add	r0, sp, #4
   d520a:	f7ff ff97 	bl	d513c <_ZN8particle7BleUuidC1Et>
   d520e:	a901      	add	r1, sp, #4
   d5210:	4620      	mov	r0, r4
   d5212:	f7ff ffdc 	bl	d51ce <_ZN8particle7BleUuidaSERKS0_>
}
   d5216:	b006      	add	sp, #24
   d5218:	bd10      	pop	{r4, pc}

000d521a <_ZN8particle7BleUuidaSERK14hal_ble_uuid_t>:
BleUuid& BleUuid::operator=(const hal_ble_uuid_t& uuid) {
   d521a:	b510      	push	{r4, lr}
   d521c:	b086      	sub	sp, #24
   d521e:	4604      	mov	r4, r0
    return *this = BleUuid(uuid);
   d5220:	a801      	add	r0, sp, #4
   d5222:	f7ff ff3b 	bl	d509c <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   d5226:	a901      	add	r1, sp, #4
   d5228:	4620      	mov	r0, r4
   d522a:	f7ff ffd0 	bl	d51ce <_ZN8particle7BleUuidaSERKS0_>
}
   d522e:	b006      	add	sp, #24
   d5230:	bd10      	pop	{r4, pc}

000d5232 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   d5232:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d5234:	6902      	ldr	r2, [r0, #16]
   d5236:	690b      	ldr	r3, [r1, #16]
   d5238:	429a      	cmp	r2, r3
   d523a:	d106      	bne.n	d524a <_ZNK8particle7BleUuideqERKS0_+0x18>
   d523c:	2210      	movs	r2, #16
   d523e:	f003 fde7 	bl	d8e10 <memcmp>
   d5242:	fab0 f080 	clz	r0, r0
   d5246:	0940      	lsrs	r0, r0, #5
}
   d5248:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d524a:	2000      	movs	r0, #0
   d524c:	e7fc      	b.n	d5248 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000d5250 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   d5250:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   d5252:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   d5256:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d5258:	4b32      	ldr	r3, [pc, #200]	; (d5324 <_ZN8particle7BleUuid9constructEPKc+0xd4>)
   d525a:	681a      	ldr	r2, [r3, #0]
   d525c:	6002      	str	r2, [r0, #0]
   d525e:	685a      	ldr	r2, [r3, #4]
   d5260:	6042      	str	r2, [r0, #4]
   d5262:	2500      	movs	r5, #0
   d5264:	891a      	ldrh	r2, [r3, #8]
   d5266:	7a9b      	ldrb	r3, [r3, #10]
   d5268:	8102      	strh	r2, [r0, #8]
void BleUuid::construct(const char* uuid) {
   d526a:	4604      	mov	r4, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d526c:	7283      	strb	r3, [r0, #10]
   d526e:	f8c0 500b 	str.w	r5, [r0, #11]
   d5272:	73c5      	strb	r5, [r0, #15]
    if (uuid == nullptr) {
   d5274:	460e      	mov	r6, r1
   d5276:	b321      	cbz	r1, d52c2 <_ZN8particle7BleUuid9constructEPKc+0x72>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d5278:	2124      	movs	r1, #36	; 0x24
   d527a:	4630      	mov	r0, r6
   d527c:	f003 fe8b 	bl	d8f96 <strnlen>
   d5280:	2804      	cmp	r0, #4
   d5282:	d121      	bne.n	d52c8 <_ZN8particle7BleUuid9constructEPKc+0x78>
        char buf[2] = {};
   d5284:	f8ad 5004 	strh.w	r5, [sp, #4]
   d5288:	af01      	add	r7, sp, #4
   d528a:	1cb5      	adds	r5, r6, #2
   d528c:	3606      	adds	r6, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d528e:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   d5292:	f7ff feaa 	bl	d4fea <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d5296:	f1b0 0800 	subs.w	r8, r0, #0
   d529a:	db10      	blt.n	d52be <_ZN8particle7BleUuid9constructEPKc+0x6e>
            break;
        }
        const int l = hexToNibble(*src++);
   d529c:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   d52a0:	f7ff fea3 	bl	d4fea <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d52a4:	2800      	cmp	r0, #0
   d52a6:	db0a      	blt.n	d52be <_ZN8particle7BleUuid9constructEPKc+0x6e>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d52a8:	3502      	adds	r5, #2
   d52aa:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   d52ae:	42ae      	cmp	r6, r5
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d52b0:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   d52b4:	d1eb      	bne.n	d528e <_ZN8particle7BleUuid9constructEPKc+0x3e>
            uuid128_[UUID16_LO] = buf[1];
   d52b6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   d52ba:	ba5b      	rev16	r3, r3
   d52bc:	81a3      	strh	r3, [r4, #12]
        type_ = BleUuidType::SHORT;
   d52be:	2300      	movs	r3, #0
   d52c0:	6123      	str	r3, [r4, #16]
}
   d52c2:	b002      	add	sp, #8
   d52c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   d52c8:	2710      	movs	r7, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d52ca:	2124      	movs	r1, #36	; 0x24
   d52cc:	4630      	mov	r0, r6
   d52ce:	f003 fe62 	bl	d8f96 <strnlen>
   d52d2:	42a8      	cmp	r0, r5
   d52d4:	d806      	bhi.n	d52e4 <_ZN8particle7BleUuid9constructEPKc+0x94>
   d52d6:	4427      	add	r7, r4
        uuid128_[len - 1] = 0x00;
   d52d8:	2300      	movs	r3, #0
    while (len > 0) {
   d52da:	42bc      	cmp	r4, r7
   d52dc:	d0f1      	beq.n	d52c2 <_ZN8particle7BleUuid9constructEPKc+0x72>
        uuid128_[len - 1] = 0x00;
   d52de:	f807 3d01 	strb.w	r3, [r7, #-1]!
    while (len > 0) {
   d52e2:	e7fa      	b.n	d52da <_ZN8particle7BleUuid9constructEPKc+0x8a>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d52e4:	2f00      	cmp	r7, #0
   d52e6:	d0ec      	beq.n	d52c2 <_ZN8particle7BleUuid9constructEPKc+0x72>
        int8_t hi = hexToNibble(uuid[i]);
   d52e8:	5d70      	ldrb	r0, [r6, r5]
   d52ea:	f7ff fe7e 	bl	d4fea <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d52ee:	0603      	lsls	r3, r0, #24
   d52f0:	d415      	bmi.n	d531e <_ZN8particle7BleUuid9constructEPKc+0xce>
            uuid128_[len - 1] = hi << 4;
   d52f2:	0100      	lsls	r0, r0, #4
   d52f4:	3f01      	subs	r7, #1
   d52f6:	fa5f f880 	uxtb.w	r8, r0
   d52fa:	f804 8007 	strb.w	r8, [r4, r7]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d52fe:	2124      	movs	r1, #36	; 0x24
   d5300:	4630      	mov	r0, r6
   d5302:	f003 fe48 	bl	d8f96 <strnlen>
   d5306:	3501      	adds	r5, #1
   d5308:	42a8      	cmp	r0, r5
   d530a:	d908      	bls.n	d531e <_ZN8particle7BleUuid9constructEPKc+0xce>
                int8_t lo = hexToNibble(uuid[i]);
   d530c:	5d70      	ldrb	r0, [r6, r5]
   d530e:	f7ff fe6c 	bl	d4fea <_ZN8particle11hexToNibbleEc>
   d5312:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d5314:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   d5316:	bfa4      	itt	ge
   d5318:	ea40 0008 	orrge.w	r0, r0, r8
   d531c:	55e0      	strbge	r0, [r4, r7]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d531e:	3501      	adds	r5, #1
   d5320:	e7d3      	b.n	d52ca <_ZN8particle7BleUuid9constructEPKc+0x7a>
   d5322:	bf00      	nop
   d5324:	000d94d8 	.word	0x000d94d8

000d5328 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   d5328:	b513      	push	{r0, r1, r4, lr}
   d532a:	4604      	mov	r4, r0
   d532c:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   d532e:	f7ff fea3 	bl	d5078 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d5332:	4620      	mov	r0, r4
   d5334:	9901      	ldr	r1, [sp, #4]
   d5336:	f7ff ff8b 	bl	d5250 <_ZN8particle7BleUuid9constructEPKc>
}
   d533a:	4620      	mov	r0, r4
   d533c:	b002      	add	sp, #8
   d533e:	bd10      	pop	{r4, pc}

000d5340 <_ZN8particle18BleAdvertisingData3setEPKhj>:
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   d5340:	b538      	push	{r3, r4, r5, lr}
   d5342:	4605      	mov	r5, r0
    if (buf == nullptr || len == 0) {
   d5344:	b101      	cbz	r1, d5348 <_ZN8particle18BleAdvertisingData3setEPKhj+0x8>
   d5346:	b91a      	cbnz	r2, d5350 <_ZN8particle18BleAdvertisingData3setEPKhj+0x10>
        selfLen_ = 0;
   d5348:	2400      	movs	r4, #0
    selfLen_ = len;
   d534a:	622c      	str	r4, [r5, #32]
}
   d534c:	4620      	mov	r0, r4
   d534e:	bd38      	pop	{r3, r4, r5, pc}
    len = std::min(len, (size_t)BLE_MAX_ADV_DATA_LEN);
   d5350:	2a1f      	cmp	r2, #31
   d5352:	bf28      	it	cs
   d5354:	221f      	movcs	r2, #31
   d5356:	4614      	mov	r4, r2
    memcpy(selfData_, buf, len);
   d5358:	f003 fd68 	bl	d8e2c <memcpy>
   d535c:	e7f5      	b.n	d534a <_ZN8particle18BleAdvertisingData3setEPKhj+0xa>

000d535e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d535e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5362:	4689      	mov	r9, r1
   d5364:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
   d5368:	6a01      	ldr	r1, [r0, #32]
   d536a:	4604      	mov	r4, r0
   d536c:	461e      	mov	r6, r3
    if (buf == nullptr) {
   d536e:	4690      	mov	r8, r2
   d5370:	b332      	cbz	r2, d53c0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x62>
    if (offset == nullptr) {
   d5372:	ab01      	add	r3, sp, #4
   d5374:	464a      	mov	r2, r9
   d5376:	f7ff fde7 	bl	d4f48 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (!force && adsLen > 0) {
   d537a:	6a25      	ldr	r5, [r4, #32]
   d537c:	1cb3      	adds	r3, r6, #2
   d537e:	bb1f      	cbnz	r7, d53c8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x6a>
   d5380:	b310      	cbz	r0, d53c8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x6a>
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d5382:	18ef      	adds	r7, r5, r3
   d5384:	1a3f      	subs	r7, r7, r0
   d5386:	2f1f      	cmp	r7, #31
   d5388:	d819      	bhi.n	d53be <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x60>
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d538a:	f8dd 9004 	ldr.w	r9, [sp, #4]
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d538e:	f109 0a02 	add.w	sl, r9, #2
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d5392:	eba5 0209 	sub.w	r2, r5, r9
   d5396:	1a12      	subs	r2, r2, r0
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d5398:	eb00 0109 	add.w	r1, r0, r9
   d539c:	eb06 000a 	add.w	r0, r6, sl
   d53a0:	b292      	uxth	r2, r2
   d53a2:	4421      	add	r1, r4
   d53a4:	4420      	add	r0, r4
   d53a6:	f003 fd4f 	bl	d8e48 <memmove>
            selfData_[offset] = len + 1;
   d53aa:	1c73      	adds	r3, r6, #1
   d53ac:	f804 3009 	strb.w	r3, [r4, r9]
            memcpy(&selfData_[offset + 2], buf, len);
   d53b0:	4632      	mov	r2, r6
   d53b2:	4641      	mov	r1, r8
   d53b4:	eb04 000a 	add.w	r0, r4, sl
   d53b8:	f003 fd38 	bl	d8e2c <memcpy>
            selfLen_ = staLen + len + 2;
   d53bc:	6227      	str	r7, [r4, #32]
    return selfLen_;
   d53be:	6a21      	ldr	r1, [r4, #32]
}
   d53c0:	4608      	mov	r0, r1
   d53c2:	b002      	add	sp, #8
   d53c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d53c8:	442b      	add	r3, r5
   d53ca:	2b1f      	cmp	r3, #31
   d53cc:	d8f7      	bhi.n	d53be <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x60>
        selfData_[selfLen_++] = len + 1;
   d53ce:	1c73      	adds	r3, r6, #1
   d53d0:	5563      	strb	r3, [r4, r5]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d53d2:	1ca8      	adds	r0, r5, #2
   d53d4:	4425      	add	r5, r4
   d53d6:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d53d8:	4632      	mov	r2, r6
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d53da:	f885 9001 	strb.w	r9, [r5, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d53de:	4641      	mov	r1, r8
   d53e0:	4420      	add	r0, r4
   d53e2:	f003 fd23 	bl	d8e2c <memcpy>
        selfLen_ += len;
   d53e6:	6a23      	ldr	r3, [r4, #32]
   d53e8:	4433      	add	r3, r6
   d53ea:	6223      	str	r3, [r4, #32]
   d53ec:	e7e7      	b.n	d53be <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x60>

000d53ee <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   d53ee:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d53f0:	4604      	mov	r4, r0
          selfLen_(0) {
   d53f2:	4602      	mov	r2, r0
   d53f4:	f100 011f 	add.w	r1, r0, #31
   d53f8:	2300      	movs	r3, #0
   d53fa:	f802 3b01 	strb.w	r3, [r2], #1
   d53fe:	4291      	cmp	r1, r2
   d5400:	d1fb      	bne.n	d53fa <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
   d5402:	6223      	str	r3, [r4, #32]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d5404:	9300      	str	r3, [sp, #0]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d5406:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d5408:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d540a:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d540e:	4619      	mov	r1, r3
   d5410:	f10d 020f 	add.w	r2, sp, #15
   d5414:	4620      	mov	r0, r4
   d5416:	f7ff ffa2 	bl	d535e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d541a:	4620      	mov	r0, r4
   d541c:	b004      	add	sp, #16
   d541e:	bd10      	pop	{r4, pc}

000d5420 <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>:
size_t BleAdvertisingData::appendLocalName(const char* name) {
   d5420:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d5422:	460a      	mov	r2, r1
   d5424:	4604      	mov	r4, r0
    return append(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, (const uint8_t*)name, strnlen(name, BLE_MAX_DEV_NAME_LEN), false);
   d5426:	2114      	movs	r1, #20
   d5428:	4610      	mov	r0, r2
   d542a:	9203      	str	r2, [sp, #12]
   d542c:	f003 fdb3 	bl	d8f96 <strnlen>
   d5430:	2100      	movs	r1, #0
   d5432:	4603      	mov	r3, r0
   d5434:	9100      	str	r1, [sp, #0]
   d5436:	9a03      	ldr	r2, [sp, #12]
   d5438:	2109      	movs	r1, #9
   d543a:	4620      	mov	r0, r4
   d543c:	f7ff ff8f 	bl	d535e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d5440:	b004      	add	sp, #16
   d5442:	bd10      	pop	{r4, pc}

000d5444 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d5444:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (offset == nullptr) {
   d5446:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d5448:	460e      	mov	r6, r1
   d544a:	ab01      	add	r3, sp, #4
   d544c:	6a01      	ldr	r1, [r0, #32]
   d544e:	4604      	mov	r4, r0
   d5450:	f7ff fd7a 	bl	d4f48 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   d5454:	4605      	mov	r5, r0
   d5456:	b178      	cbz	r0, d5478 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d5458:	9801      	ldr	r0, [sp, #4]
   d545a:	6a22      	ldr	r2, [r4, #32]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d545c:	1941      	adds	r1, r0, r5
        size_t moveLen = selfLen_ - offset - len;
   d545e:	1a12      	subs	r2, r2, r0
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d5460:	4421      	add	r1, r4
   d5462:	1b52      	subs	r2, r2, r5
   d5464:	4420      	add	r0, r4
   d5466:	f003 fce1 	bl	d8e2c <memcpy>
        selfLen_ -= len;
   d546a:	6a20      	ldr	r0, [r4, #32]
   d546c:	1b40      	subs	r0, r0, r5
   d546e:	6220      	str	r0, [r4, #32]
        remove(type);
   d5470:	4631      	mov	r1, r6
   d5472:	4620      	mov	r0, r4
   d5474:	f7ff ffe6 	bl	d5444 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   d5478:	b002      	add	sp, #8
   d547a:	bd70      	pop	{r4, r5, r6, pc}

000d547c <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>:
size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
   d547c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d547e:	4615      	mov	r5, r2
   d5480:	461f      	mov	r7, r3
   d5482:	460a      	mov	r2, r1
   d5484:	ab01      	add	r3, sp, #4
   d5486:	6a01      	ldr	r1, [r0, #32]
   d5488:	4606      	mov	r6, r0
   d548a:	f7ff fd5d 	bl	d4f48 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (adsLen > 0) {
   d548e:	f030 0402 	bics.w	r4, r0, #2
   d5492:	d00b      	beq.n	d54ac <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x30>
            adsLen -= 2;
   d5494:	1e84      	subs	r4, r0, #2
   d5496:	42bc      	cmp	r4, r7
   d5498:	bf28      	it	cs
   d549a:	463c      	movcs	r4, r7
            if (buf != nullptr) {
   d549c:	b135      	cbz	r5, d54ac <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x30>
                memcpy(buf, &selfData_[offset + 2], len);
   d549e:	9901      	ldr	r1, [sp, #4]
   d54a0:	3102      	adds	r1, #2
   d54a2:	4622      	mov	r2, r4
   d54a4:	4431      	add	r1, r6
   d54a6:	4628      	mov	r0, r5
   d54a8:	f003 fcc0 	bl	d8e2c <memcpy>
}
   d54ac:	4620      	mov	r0, r4
   d54ae:	b003      	add	sp, #12
   d54b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d54b2 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>:
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   d54b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d54b4:	4613      	mov	r3, r2
   d54b6:	460c      	mov	r4, r1
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   d54b8:	9201      	str	r2, [sp, #4]
   d54ba:	460a      	mov	r2, r1
   d54bc:	2108      	movs	r1, #8
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   d54be:	4605      	mov	r5, r0
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   d54c0:	f7ff ffdc 	bl	d547c <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (nameLen > 0) {
   d54c4:	b940      	cbnz	r0, d54d8 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj+0x26>
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   d54c6:	9b01      	ldr	r3, [sp, #4]
   d54c8:	4622      	mov	r2, r4
   d54ca:	2109      	movs	r1, #9
   d54cc:	4628      	mov	r0, r5
}
   d54ce:	b003      	add	sp, #12
   d54d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   d54d4:	f7ff bfd2 	b.w	d547c <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
}
   d54d8:	b003      	add	sp, #12
   d54da:	bd30      	pop	{r4, r5, pc}

000d54dc <_ZNK8particle18BleAdvertisingData10deviceNameEv>:
String BleAdvertisingData::deviceName() const {
   d54dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d54de:	460c      	mov	r4, r1
   d54e0:	b089      	sub	sp, #36	; 0x24
    String name;
   d54e2:	490c      	ldr	r1, [pc, #48]	; (d5514 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x38>)
String BleAdvertisingData::deviceName() const {
   d54e4:	4605      	mov	r5, r0
    String name;
   d54e6:	f003 f88c 	bl	d8602 <_ZN6StringC1EPKc>
    size_t len = deviceName(buf, sizeof(buf));
   d54ea:	221f      	movs	r2, #31
   d54ec:	4669      	mov	r1, sp
   d54ee:	4620      	mov	r0, r4
   d54f0:	f7ff ffdf 	bl	d54b2 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>
    if (len > 0) {
   d54f4:	4606      	mov	r6, r0
   d54f6:	b150      	cbz	r0, d550e <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
   d54f8:	466c      	mov	r4, sp
        for (size_t i = 0; i < len; i++) {
   d54fa:	2700      	movs	r7, #0
            if (!name.concat(buf[i])) {
   d54fc:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5500:	4628      	mov	r0, r5
   d5502:	f003 f8fd 	bl	d8700 <_ZN6String6concatEc>
   d5506:	b110      	cbz	r0, d550e <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
        for (size_t i = 0; i < len; i++) {
   d5508:	3701      	adds	r7, #1
   d550a:	42be      	cmp	r6, r7
   d550c:	d1f6      	bne.n	d54fc <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x20>
}
   d550e:	4628      	mov	r0, r5
   d5510:	b009      	add	sp, #36	; 0x24
   d5512:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5514:	000d95cb 	.word	0x000d95cb

000d5518 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>:
size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
   d5518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d551c:	b085      	sub	sp, #20
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d551e:	2600      	movs	r6, #0
size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
   d5520:	4607      	mov	r7, r0
   d5522:	4689      	mov	r9, r1
   d5524:	4690      	mov	r8, r2
   d5526:	9300      	str	r3, [sp, #0]
    size_t offset, adsLen = 0, found = 0;
   d5528:	4635      	mov	r5, r6
                uuids[found++] = &selfData_[i + offset + 2];
   d552a:	f04f 0b14 	mov.w	fp, #20
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d552e:	6a39      	ldr	r1, [r7, #32]
   d5530:	42b1      	cmp	r1, r6
   d5532:	d92c      	bls.n	d558e <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x76>
    if (offset == nullptr) {
   d5534:	ab03      	add	r3, sp, #12
   d5536:	464a      	mov	r2, r9
   d5538:	1b89      	subs	r1, r1, r6
   d553a:	19b8      	adds	r0, r7, r6
   d553c:	f7ff fd04 	bl	d4f48 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
        if (adsLen > 0 && found < count) {
   d5540:	4682      	mov	sl, r0
   d5542:	b320      	cbz	r0, d558e <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x76>
   d5544:	9b00      	ldr	r3, [sp, #0]
   d5546:	429d      	cmp	r5, r3
   d5548:	d221      	bcs.n	d558e <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x76>
            if (adsLen == 4) { // length field + type field + 16-bits UUID
   d554a:	2804      	cmp	r0, #4
   d554c:	9c03      	ldr	r4, [sp, #12]
   d554e:	d112      	bne.n	d5576 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x5e>
                uuids[found++] = (uint16_t)selfData_[i + offset + 2] | ((uint16_t)selfData_[i + offset + 3] << 8);
   d5550:	4434      	add	r4, r6
   d5552:	443c      	add	r4, r7
   d5554:	1c6a      	adds	r2, r5, #1
   d5556:	78e0      	ldrb	r0, [r4, #3]
   d5558:	78a1      	ldrb	r1, [r4, #2]
   d555a:	9201      	str	r2, [sp, #4]
   d555c:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
   d5560:	fb0b 8005 	mla	r0, fp, r5, r8
   d5564:	f7ff fe4d 	bl	d5202 <_ZN8particle7BleUuidaSEt>
                uuids[found++] = &selfData_[i + offset + 2];
   d5568:	9a01      	ldr	r2, [sp, #4]
   d556a:	4615      	mov	r5, r2
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d556c:	9803      	ldr	r0, [sp, #12]
   d556e:	eb0a 0300 	add.w	r3, sl, r0
   d5572:	441e      	add	r6, r3
   d5574:	e7db      	b.n	d552e <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x16>
            } else if (adsLen == 18) {
   d5576:	2812      	cmp	r0, #18
   d5578:	d1f8      	bne.n	d556c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x54>
                uuids[found++] = &selfData_[i + offset + 2];
   d557a:	3402      	adds	r4, #2
   d557c:	19a1      	adds	r1, r4, r6
   d557e:	1c6a      	adds	r2, r5, #1
   d5580:	4439      	add	r1, r7
   d5582:	fb0b 8005 	mla	r0, fp, r5, r8
   d5586:	9201      	str	r2, [sp, #4]
   d5588:	f7ff fe2e 	bl	d51e8 <_ZN8particle7BleUuidaSEPKh>
   d558c:	e7ec      	b.n	d5568 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x50>
}
   d558e:	4628      	mov	r0, r5
   d5590:	b005      	add	sp, #20
   d5592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5596 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>:
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d5596:	e92d 43e0 	stmdb	sp!, {r5, r6, r7, r8, r9, lr}
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d559a:	4613      	mov	r3, r2
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d559c:	460e      	mov	r6, r1
   d559e:	4617      	mov	r7, r2
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d55a0:	460a      	mov	r2, r1
   d55a2:	2102      	movs	r1, #2
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d55a4:	4680      	mov	r8, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d55a6:	f7ff ffb7 	bl	d5518 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, &uuids[found], count - found);
   d55aa:	f04f 0914 	mov.w	r9, #20
   d55ae:	1a3b      	subs	r3, r7, r0
   d55b0:	fb09 6200 	mla	r2, r9, r0, r6
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d55b4:	4605      	mov	r5, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, &uuids[found], count - found);
   d55b6:	2103      	movs	r1, #3
   d55b8:	4640      	mov	r0, r8
   d55ba:	f7ff ffad 	bl	d5518 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
   d55be:	4405      	add	r5, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d55c0:	1b7b      	subs	r3, r7, r5
   d55c2:	fb09 6205 	mla	r2, r9, r5, r6
   d55c6:	2106      	movs	r1, #6
   d55c8:	4640      	mov	r0, r8
   d55ca:	f7ff ffa5 	bl	d5518 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
   d55ce:	4405      	add	r5, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, &uuids[found], count - found);
   d55d0:	1b7b      	subs	r3, r7, r5
   d55d2:	fb09 6205 	mla	r2, r9, r5, r6
   d55d6:	2107      	movs	r1, #7
   d55d8:	4640      	mov	r0, r8
   d55da:	f7ff ff9d 	bl	d5518 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
}
   d55de:	4428      	add	r0, r5
   d55e0:	e8bd 83e0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, pc}

000d55e4 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   d55e4:	b538      	push	{r3, r4, r5, lr}
              context_(nullptr) {
   d55e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d55ea:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   d55ec:	4604      	mov	r4, r0
              context_(nullptr) {
   d55ee:	8043      	strh	r3, [r0, #2]
   d55f0:	220e      	movs	r2, #14
   d55f2:	4629      	mov	r1, r5
   d55f4:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d55f6:	7105      	strb	r5, [r0, #4]
   d55f8:	3006      	adds	r0, #6
   d55fa:	f003 fc3f 	bl	d8e7c <memset>
   d55fe:	f104 0014 	add.w	r0, r4, #20
   d5602:	f7ff fd39 	bl	d5078 <_ZN8particle7BleUuidC1Ev>
   d5606:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d560a:	f7ff fd35 	bl	d5078 <_ZN8particle7BleUuidC1Ev>
   d560e:	4904      	ldr	r1, [pc, #16]	; (d5620 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d5610:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d5614:	f002 fff5 	bl	d8602 <_ZN6StringC1EPKc>
   d5618:	e9c4 5513 	strd	r5, r5, [r4, #76]	; 0x4c
    }
   d561c:	4620      	mov	r0, r4
   d561e:	bd38      	pop	{r3, r4, r5, pc}
   d5620:	000d95cb 	.word	0x000d95cb

000d5624 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d5624:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5626:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   d562a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d562e:	4293      	cmp	r3, r2
   d5630:	4618      	mov	r0, r3
   d5632:	d006      	beq.n	d5642 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d5634:	6804      	ldr	r4, [r0, #0]
   d5636:	8824      	ldrh	r4, [r4, #0]
   d5638:	428c      	cmp	r4, r1
   d563a:	f103 0308 	add.w	r3, r3, #8
   d563e:	d1f6      	bne.n	d562e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   d5640:	bd10      	pop	{r4, pc}
        return nullptr;
   d5642:	2000      	movs	r0, #0
   d5644:	e7fc      	b.n	d5640 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000d5648 <_ZN8particle17BleCharacteristicC1Ev>:

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d5648:	2300      	movs	r3, #0
BleCharacteristic::BleCharacteristic()
   d564a:	b570      	push	{r4, r5, r6, lr}
   d564c:	6003      	str	r3, [r0, #0]
   d564e:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5650:	2060      	movs	r0, #96	; 0x60
   d5652:	f7fe fd1e 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d5656:	1e04      	subs	r4, r0, #0
   d5658:	f104 060c 	add.w	r6, r4, #12
   d565c:	d007      	beq.n	d566e <_ZN8particle17BleCharacteristicC1Ev+0x26>
      : _M_use_count(1), _M_weak_count(1) { }
   d565e:	2301      	movs	r3, #1
   d5660:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   d5664:	4b04      	ldr	r3, [pc, #16]	; (d5678 <_ZN8particle17BleCharacteristicC1Ev+0x30>)
   d5666:	6023      	str	r3, [r4, #0]
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d5668:	4630      	mov	r0, r6
   d566a:	f7ff ffbb 	bl	d55e4 <_ZN8particle21BleCharacteristicImplC1Ev>
	  __p = __pi->_M_ptr();
   d566e:	e9c5 6400 	strd	r6, r4, [r5]
}
   d5672:	4628      	mov	r0, r5
   d5674:	bd70      	pop	{r4, r5, r6, pc}
   d5676:	bf00      	nop
   d5678:	000d9484 	.word	0x000d9484

000d567c <_ZN8particle17BleCharacteristicaSERKS0_>:
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   d567c:	b510      	push	{r4, lr}
    int subscribe(bool enable) const;

    void onDataReceived(BleOnDataReceivedCallback callback, void* context);

    BleCharacteristicImpl* impl() const {
        return impl_.get();
   d567e:	6802      	ldr	r2, [r0, #0]
   d5680:	4604      	mov	r4, r0
        if (charImpl.callback_) {
   d5682:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
   d5684:	b118      	cbz	r0, d568e <_ZN8particle17BleCharacteristicaSERKS0_+0x12>
   d5686:	680b      	ldr	r3, [r1, #0]
            callback_ = charImpl.callback_;
   d5688:	64d8      	str	r0, [r3, #76]	; 0x4c
            context_ = charImpl.context_;
   d568a:	6d12      	ldr	r2, [r2, #80]	; 0x50
   d568c:	651a      	str	r2, [r3, #80]	; 0x50
    class __shared_ptr
   d568e:	4620      	mov	r0, r4
   d5690:	680b      	ldr	r3, [r1, #0]
   d5692:	f840 3b04 	str.w	r3, [r0], #4
   d5696:	6849      	ldr	r1, [r1, #4]
   d5698:	f7ff fc92 	bl	d4fc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
}
   d569c:	4620      	mov	r0, r4
   d569e:	bd10      	pop	{r4, pc}

000d56a0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   d56a0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d56a2:	4606      	mov	r6, r0
   d56a4:	b085      	sub	sp, #20
   d56a6:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   d56a8:	460d      	mov	r5, r1
   d56aa:	2900      	cmp	r1, #0
   d56ac:	d050      	beq.n	d5750 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   d56ae:	2a00      	cmp	r2, #0
   d56b0:	d04e      	beq.n	d5750 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   d56b2:	6804      	ldr	r4, [r0, #0]
    if (impl()->local()) {
   d56b4:	7823      	ldrb	r3, [r4, #0]
   d56b6:	2af4      	cmp	r2, #244	; 0xf4
   d56b8:	bf28      	it	cs
   d56ba:	22f4      	movcs	r2, #244	; 0xf4
   d56bc:	b343      	cbz	r3, d5710 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   d56be:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   d56c0:	0798      	lsls	r0, r3, #30
   d56c2:	d509      	bpl.n	d56d8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   d56c4:	89a0      	ldrh	r0, [r4, #12]
   d56c6:	9203      	str	r2, [sp, #12]
   d56c8:	2300      	movs	r3, #0
   d56ca:	f7ff f967 	bl	d499c <hal_ble_gatt_server_set_characteristic_value>
   d56ce:	2800      	cmp	r0, #0
   d56d0:	9a03      	ldr	r2, [sp, #12]
   d56d2:	da03      	bge.n	d56dc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
}
   d56d4:	b005      	add	sp, #20
   d56d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   d56d8:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d56dc:	6834      	ldr	r4, [r6, #0]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   d56de:	7923      	ldrb	r3, [r4, #4]
   d56e0:	06d9      	lsls	r1, r3, #27
   d56e2:	d509      	bpl.n	d56f8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   d56e4:	2f01      	cmp	r7, #1
   d56e6:	d007      	beq.n	d56f8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d56e8:	89a0      	ldrh	r0, [r4, #12]
   d56ea:	2300      	movs	r3, #0
   d56ec:	4629      	mov	r1, r5
}
   d56ee:	b005      	add	sp, #20
   d56f0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d56f4:	f7ff b9b6 	b.w	d4a64 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   d56f8:	069b      	lsls	r3, r3, #26
   d56fa:	d5eb      	bpl.n	d56d4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   d56fc:	2f02      	cmp	r7, #2
   d56fe:	d0e9      	beq.n	d56d4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d5700:	89a0      	ldrh	r0, [r4, #12]
   d5702:	2300      	movs	r3, #0
   d5704:	4629      	mov	r1, r5
}
   d5706:	b005      	add	sp, #20
   d5708:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d570c:	f7ff b9b4 	b.w	d4a78 <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   d5710:	8860      	ldrh	r0, [r4, #2]
   d5712:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d5716:	4288      	cmp	r0, r1
   d5718:	d01c      	beq.n	d5754 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   d571a:	7921      	ldrb	r1, [r4, #4]
   d571c:	074e      	lsls	r6, r1, #29
   d571e:	d501      	bpl.n	d5724 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   d5720:	2f01      	cmp	r7, #1
   d5722:	d104      	bne.n	d572e <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d5724:	070b      	lsls	r3, r1, #28
   d5726:	d409      	bmi.n	d573c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   d5728:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d572c:	e7d2      	b.n	d56d4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d572e:	89a1      	ldrh	r1, [r4, #12]
   d5730:	9300      	str	r3, [sp, #0]
   d5732:	4613      	mov	r3, r2
   d5734:	462a      	mov	r2, r5
   d5736:	f7ff f959 	bl	d49ec <hal_ble_gatt_client_write_without_response>
   d573a:	e7cb      	b.n	d56d4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d573c:	2f02      	cmp	r7, #2
   d573e:	d0f3      	beq.n	d5728 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d5740:	2300      	movs	r3, #0
   d5742:	89a1      	ldrh	r1, [r4, #12]
   d5744:	9300      	str	r3, [sp, #0]
   d5746:	4613      	mov	r3, r2
   d5748:	462a      	mov	r2, r5
   d574a:	f7ff f945 	bl	d49d8 <hal_ble_gatt_client_write_with_response>
   d574e:	e7c1      	b.n	d56d4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d5750:	4802      	ldr	r0, [pc, #8]	; (d575c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   d5752:	e7bf      	b.n	d56d4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   d5754:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d5758:	e7bc      	b.n	d56d4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   d575a:	bf00      	nop
   d575c:	fffffef2 	.word	0xfffffef2

000d5760 <_ZNK8particle17BleCharacteristic9subscribeEb>:
int BleCharacteristic::subscribe(bool enable) const {
   d5760:	b510      	push	{r4, lr}
   d5762:	6803      	ldr	r3, [r0, #0]
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
   d5764:	781a      	ldrb	r2, [r3, #0]
int BleCharacteristic::subscribe(bool enable) const {
   d5766:	b086      	sub	sp, #24
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
   d5768:	bb52      	cbnz	r2, d57c0 <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
   d576a:	885c      	ldrh	r4, [r3, #2]
   d576c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d5770:	4284      	cmp	r4, r0
   d5772:	d025      	beq.n	d57c0 <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   d5774:	8a18      	ldrh	r0, [r3, #16]
   d5776:	b330      	cbz	r0, d57c6 <_ZNK8particle17BleCharacteristic9subscribeEb+0x66>
    config.version = BLE_API_VERSION;
   d5778:	4814      	ldr	r0, [pc, #80]	; (d57cc <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>)
   d577a:	9000      	str	r0, [sp, #0]
    config.callback = impl()->onBleCharEvents;
   d577c:	4814      	ldr	r0, [pc, #80]	; (d57d0 <_ZNK8particle17BleCharacteristic9subscribeEb+0x70>)
    hal_ble_cccd_config_t config = {};
   d577e:	9205      	str	r2, [sp, #20]
   d5780:	e9cd 2203 	strd	r2, r2, [sp, #12]
    config.context = impl();
   d5784:	e9cd 0301 	strd	r0, r3, [sp, #4]
    config.conn_handle = impl()->connHandle();
   d5788:	8858      	ldrh	r0, [r3, #2]
   d578a:	f8ad 000c 	strh.w	r0, [sp, #12]
    config.cccd_handle = impl()->attrHandles().cccd_handle;
   d578e:	8a18      	ldrh	r0, [r3, #16]
   d5790:	f8ad 000e 	strh.w	r0, [sp, #14]
    config.value_handle = impl()->attrHandles().value_handle;
   d5794:	8998      	ldrh	r0, [r3, #12]
   d5796:	f8ad 0010 	strh.w	r0, [sp, #16]
    if (enable) {
   d579a:	b159      	cbz	r1, d57b4 <_ZNK8particle17BleCharacteristic9subscribeEb+0x54>
   d579c:	791a      	ldrb	r2, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE)) {
   d579e:	0692      	lsls	r2, r2, #26
            config.cccd_value = BLE_SIG_CCCD_VAL_INDICATION;
   d57a0:	bf44      	itt	mi
   d57a2:	2202      	movmi	r2, #2
   d57a4:	9205      	strmi	r2, [sp, #20]
   d57a6:	791b      	ldrb	r3, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
   d57a8:	06db      	lsls	r3, r3, #27
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
   d57aa:	bf42      	ittt	mi
   d57ac:	9b05      	ldrmi	r3, [sp, #20]
   d57ae:	f043 0301 	orrmi.w	r3, r3, #1
   d57b2:	9305      	strmi	r3, [sp, #20]
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
   d57b4:	2100      	movs	r1, #0
   d57b6:	4668      	mov	r0, sp
   d57b8:	f7ff f94a 	bl	d4a50 <hal_ble_gatt_client_configure_cccd>
}
   d57bc:	b006      	add	sp, #24
   d57be:	bd10      	pop	{r4, pc}
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
   d57c0:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d57c4:	e7fa      	b.n	d57bc <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   d57c6:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d57ca:	e7f7      	b.n	d57bc <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
   d57cc:	00180001 	.word	0x00180001
   d57d0:	000d5ad1 	.word	0x000d5ad1

000d57d4 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>:
   d57d4:	6803      	ldr	r3, [r0, #0]
        context_ = context;
   d57d6:	e9c3 1213 	strd	r1, r2, [r3, #76]	; 0x4c
}
   d57da:	4770      	bx	lr

000d57dc <_ZN8particle10BleServiceC1Ev>:
BleService::BleService()
   d57dc:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d57de:	2600      	movs	r6, #0
   d57e0:	6006      	str	r6, [r0, #0]
   d57e2:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d57e4:	2024      	movs	r0, #36	; 0x24
   d57e6:	f7fe fc54 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d57ea:	1e03      	subs	r3, r0, #0
   d57ec:	f103 050c 	add.w	r5, r3, #12
   d57f0:	d008      	beq.n	d5804 <_ZN8particle10BleServiceC1Ev+0x28>
      : _M_use_count(1), _M_weak_count(1) { }
   d57f2:	2201      	movs	r2, #1
   d57f4:	e9c3 2201 	strd	r2, r2, [r3, #4]
	: _M_impl(__a)
   d57f8:	4a04      	ldr	r2, [pc, #16]	; (d580c <_ZN8particle10BleServiceC1Ev+0x30>)
   d57fa:	601a      	str	r2, [r3, #0]
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d57fc:	4628      	mov	r0, r5
   d57fe:	f7ff fc3b 	bl	d5078 <_ZN8particle7BleUuidC1Ev>
   d5802:	621e      	str	r6, [r3, #32]
	  __p = __pi->_M_ptr();
   d5804:	e9c4 5300 	strd	r5, r3, [r4]
}
   d5808:	4620      	mov	r0, r4
   d580a:	bd70      	pop	{r4, r5, r6, pc}
   d580c:	000d94a0 	.word	0x000d94a0

000d5810 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
BleService::BleService(const BleUuid& uuid)
   d5810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d5814:	f04f 0800 	mov.w	r8, #0
   d5818:	f8c0 8000 	str.w	r8, [r0]
   d581c:	4605      	mov	r5, r0
   d581e:	2024      	movs	r0, #36	; 0x24
   d5820:	460f      	mov	r7, r1
   d5822:	f7fe fc36 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d5826:	1e04      	subs	r4, r0, #0
   d5828:	f104 060c 	add.w	r6, r4, #12
   d582c:	d00d      	beq.n	d584a <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   d582e:	2301      	movs	r3, #1
   d5830:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   d5834:	4b07      	ldr	r3, [pc, #28]	; (d5854 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   d5836:	6023      	str	r3, [r4, #0]
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d5838:	4630      	mov	r0, r6
   d583a:	f7ff fc1d 	bl	d5078 <_ZN8particle7BleUuidC1Ev>
   d583e:	f8c4 8020 	str.w	r8, [r4, #32]
        uuid_ = svcUuid;
   d5842:	4639      	mov	r1, r7
   d5844:	4630      	mov	r0, r6
   d5846:	f7ff fcc2 	bl	d51ce <_ZN8particle7BleUuidaSERKS0_>
	  __p = __pi->_M_ptr();
   d584a:	e9c5 6400 	strd	r6, r4, [r5]
}
   d584e:	4628      	mov	r0, r5
   d5850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5854:	000d94a0 	.word	0x000d94a0

000d5858 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE>:

    int discoverAllCharacteristics(BlePeerDevice& peer) {
   d5858:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        LOG(TRACE, "Start discovering characteristics.");
   d585c:	2320      	movs	r3, #32
    int discoverAllCharacteristics(BlePeerDevice& peer) {
   d585e:	b08b      	sub	sp, #44	; 0x2c
        LOG(TRACE, "Start discovering characteristics.");
   d5860:	2600      	movs	r6, #0
   d5862:	e9cd 3602 	strd	r3, r6, [sp, #8]
    int discoverAllCharacteristics(BlePeerDevice& peer) {
   d5866:	460d      	mov	r5, r1
        LOG(TRACE, "Start discovering characteristics.");
   d5868:	4b2e      	ldr	r3, [pc, #184]	; (d5924 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xcc>)
   d586a:	9300      	str	r3, [sp, #0]
   d586c:	492e      	ldr	r1, [pc, #184]	; (d5928 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xd0>)
        for (auto& service : peer.impl()->services()) {
            hal_ble_svc_t halService;
            halService.size = sizeof(hal_ble_svc_t);
            halService.start_handle = service.impl()->startHandle();
            halService.end_handle = service.impl()->endHandle();
            CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, &peer, nullptr));
   d586e:	f8df 90bc 	ldr.w	r9, [pc, #188]	; d592c <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xd4>
        LOG(TRACE, "Start discovering characteristics.");
   d5872:	4633      	mov	r3, r6
   d5874:	aa02      	add	r2, sp, #8
   d5876:	2001      	movs	r0, #1
   d5878:	f7ff f9f0 	bl	d4c5c <log_message>
    bool operator==(const BlePeerDevice& device) const;

    BlePeerDevice& operator=(const BlePeerDevice& peer);

    BlePeerDeviceImpl* impl() const {
        return impl_.get();
   d587c:	682b      	ldr	r3, [r5, #0]
   d587e:	e9d3 4703 	ldrd	r4, r7, [r3, #12]
            halService.size = sizeof(hal_ble_svc_t);
   d5882:	f04f 081c 	mov.w	r8, #28
   d5886:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
   d588a:	3408      	adds	r4, #8
        for (auto& service : peer.impl()->services()) {
   d588c:	f1a4 0308 	sub.w	r3, r4, #8
   d5890:	429f      	cmp	r7, r3
   d5892:	6829      	ldr	r1, [r5, #0]
   d5894:	d019      	beq.n	d58ca <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0x72>
            halService.size = sizeof(hal_ble_svc_t);
   d5896:	f8ad 800a 	strh.w	r8, [sp, #10]
            halService.start_handle = service.impl()->startHandle();
   d589a:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d589e:	8a9b      	ldrh	r3, [r3, #20]
   d58a0:	f8ad 3020 	strh.w	r3, [sp, #32]
            halService.end_handle = service.impl()->endHandle();
   d58a4:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d58a8:	8adb      	ldrh	r3, [r3, #22]
   d58aa:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, &peer, nullptr));
   d58ae:	8808      	ldrh	r0, [r1, #0]
   d58b0:	9600      	str	r6, [sp, #0]
   d58b2:	462b      	mov	r3, r5
   d58b4:	464a      	mov	r2, r9
   d58b6:	a902      	add	r1, sp, #8
   d58b8:	f7ff f884 	bl	d49c4 <hal_ble_gatt_client_discover_characteristics>
   d58bc:	2800      	cmp	r0, #0
   d58be:	f104 0408 	add.w	r4, r4, #8
   d58c2:	dae3      	bge.n	d588c <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0x34>
                    LOG_DEBUG(TRACE, "User description: %s.", desc);
                }
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   d58c4:	b00b      	add	sp, #44	; 0x2c
   d58c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d58ca:	e9d1 4606 	ldrd	r4, r6, [r1, #24]
                char desc[BLE_MAX_DESC_LEN] = {};
   d58ce:	2700      	movs	r7, #0
   d58d0:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
   d58d4:	3408      	adds	r4, #8
        for (auto& characteristic : peer.impl()->characteristics()) {
   d58d6:	f1a4 0308 	sub.w	r3, r4, #8
   d58da:	429e      	cmp	r6, r3
   d58dc:	d020      	beq.n	d5920 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xc8>
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
   d58de:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d58e2:	89db      	ldrh	r3, [r3, #14]
   d58e4:	b1d3      	cbz	r3, d591c <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xc4>
                char desc[BLE_MAX_DESC_LEN] = {};
   d58e6:	2210      	movs	r2, #16
   d58e8:	2100      	movs	r1, #0
   d58ea:	a803      	add	r0, sp, #12
   d58ec:	9702      	str	r7, [sp, #8]
   d58ee:	f003 fac5 	bl	d8e7c <memset>
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
   d58f2:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d58f6:	89d9      	ldrh	r1, [r3, #14]
   d58f8:	682b      	ldr	r3, [r5, #0]
   d58fa:	aa02      	add	r2, sp, #8
   d58fc:	8818      	ldrh	r0, [r3, #0]
   d58fe:	9700      	str	r7, [sp, #0]
   d5900:	2313      	movs	r3, #19
   d5902:	f7ff f87d 	bl	d4a00 <hal_ble_gatt_client_read>
                if (len > 0) {
   d5906:	b148      	cbz	r0, d591c <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xc4>
                    desc[len] = '\0';
   d5908:	ab0a      	add	r3, sp, #40	; 0x28
   d590a:	4418      	add	r0, r3
                    characteristic.impl()->description() = desc;
   d590c:	a902      	add	r1, sp, #8
                    desc[len] = '\0';
   d590e:	f800 7c20 	strb.w	r7, [r0, #-32]
        return description_;
   d5912:	f854 0c08 	ldr.w	r0, [r4, #-8]
                    characteristic.impl()->description() = desc;
   d5916:	303c      	adds	r0, #60	; 0x3c
   d5918:	f002 fec9 	bl	d86ae <_ZN6StringaSEPKc>
        for (auto& characteristic : peer.impl()->characteristics()) {
   d591c:	3408      	adds	r4, #8
   d591e:	e7da      	b.n	d58d6 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0x7e>
   d5920:	2000      	movs	r0, #0
   d5922:	e7cf      	b.n	d58c4 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0x6c>
   d5924:	000d9303 	.word	0x000d9303
   d5928:	000d92dc 	.word	0x000d92dc
   d592c:	000d65a1 	.word	0x000d65a1

000d5930 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d5930:	b538      	push	{r3, r4, r5, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d5932:	2400      	movs	r4, #0
   d5934:	6004      	str	r4, [r0, #0]
   d5936:	4605      	mov	r5, r0
   d5938:	2030      	movs	r0, #48	; 0x30
   d593a:	f7fe fbaa 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d593e:	4603      	mov	r3, r0
   d5940:	b188      	cbz	r0, d5966 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   d5942:	2201      	movs	r2, #1
   d5944:	e9c0 2201 	strd	r2, r2, [r0, #4]
	: _M_impl(__a)
   d5948:	4a09      	ldr	r2, [pc, #36]	; (d5970 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   d594a:	6002      	str	r2, [r0, #0]
              characteristicsDiscovered_(false) {
   d594c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5950:	8182      	strh	r2, [r0, #12]
   d5952:	300e      	adds	r0, #14
   d5954:	f7ff fb78 	bl	d5048 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   d5958:	e9c3 4406 	strd	r4, r4, [r3, #24]
   d595c:	e9c3 4408 	strd	r4, r4, [r3, #32]
   d5960:	e9c3 440a 	strd	r4, r4, [r3, #40]	; 0x28
   d5964:	82dc      	strh	r4, [r3, #22]
	  _M_pi = __pi;
   d5966:	606b      	str	r3, [r5, #4]
   d5968:	330c      	adds	r3, #12
	  __p = __pi->_M_ptr();
   d596a:	602b      	str	r3, [r5, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   d596c:	4628      	mov	r0, r5
   d596e:	bd38      	pop	{r3, r4, r5, pc}
   d5970:	000d94bc 	.word	0x000d94bc

000d5974 <_ZN8particle13BlePeerDeviceaSERKS0_>:

BlePeerDevice::~BlePeerDevice() {
    DEBUG("~BlePeerDevice(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}

BlePeerDevice& BlePeerDevice::operator=(const BlePeerDevice& peer) {
   d5974:	b510      	push	{r4, lr}
    class __shared_ptr
   d5976:	680b      	ldr	r3, [r1, #0]
   d5978:	4604      	mov	r4, r0
   d597a:	f840 3b04 	str.w	r3, [r0], #4
   d597e:	6849      	ldr	r1, [r1, #4]
   d5980:	f7ff fb1e 	bl	d4fc0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
    impl_ = peer.impl_;
    return *this;
}
   d5984:	4620      	mov	r0, r4
   d5986:	bd10      	pop	{r4, pc}

000d5988 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>:

bool BlePeerDevice::getCharacteristicByDescription(BleCharacteristic& characteristic, const String& desc) const {
    return getCharacteristicByDescription(characteristic, desc.c_str());
}

bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   d5988:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d598c:	6803      	ldr	r3, [r0, #0]
    return data_ + size_;
   d598e:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
   d5992:	b087      	sub	sp, #28
   d5994:	460e      	mov	r6, r1
   d5996:	4617      	mov	r7, r2
   d5998:	eb04 08c3 	add.w	r8, r4, r3, lsl #3
    for (auto& existChar : impl()->characteristics()) {
   d599c:	4544      	cmp	r4, r8
   d599e:	46a1      	mov	r9, r4
   d59a0:	d014      	beq.n	d59cc <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x44>
        return charUuid_;
   d59a2:	f854 1b08 	ldr.w	r1, [r4], #8
    return impl()->charUUID();
   d59a6:	a801      	add	r0, sp, #4
   d59a8:	3114      	adds	r1, #20
   d59aa:	f7ff fb9b 	bl	d50e4 <_ZN8particle7BleUuidC1ERKS0_>
        if (existChar.UUID() == uuid) {
   d59ae:	4639      	mov	r1, r7
   d59b0:	a801      	add	r0, sp, #4
   d59b2:	f7ff fc3e 	bl	d5232 <_ZNK8particle7BleUuideqERKS0_>
   d59b6:	4605      	mov	r5, r0
   d59b8:	2800      	cmp	r0, #0
   d59ba:	d0ef      	beq.n	d599c <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x14>
            characteristic = existChar;
   d59bc:	4649      	mov	r1, r9
   d59be:	4630      	mov	r0, r6
   d59c0:	f7ff fe5c 	bl	d567c <_ZN8particle17BleCharacteristicaSERKS0_>
            return true;
        }
    }
    return false;
}
   d59c4:	4628      	mov	r0, r5
   d59c6:	b007      	add	sp, #28
   d59c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return false;
   d59cc:	2500      	movs	r5, #0
   d59ce:	e7f9      	b.n	d59c4 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x3c>

000d59d0 <_ZNK8particle13BlePeerDevice9connectedEv>:
    impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
    return SYSTEM_ERROR_NONE;
}

bool BlePeerDevice::connected() const {
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   d59d0:	6803      	ldr	r3, [r0, #0]
   d59d2:	8818      	ldrh	r0, [r3, #0]
}
   d59d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d59d8:	1ac0      	subs	r0, r0, r3
   d59da:	bf18      	it	ne
   d59dc:	2001      	movne	r0, #1
   d59de:	4770      	bx	lr

000d59e0 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>:
   d59e0:	6802      	ldr	r2, [r0, #0]

void BlePeerDevice::bind(const BleAddress& address) const {
    impl()->address() = address;
   d59e2:	680b      	ldr	r3, [r1, #0]
   d59e4:	f8c2 3002 	str.w	r3, [r2, #2]
   d59e8:	684b      	ldr	r3, [r1, #4]
   d59ea:	f8c2 3006 	str.w	r3, [r2, #6]
}
   d59ee:	4770      	bx	lr

000d59f0 <_ZNK8particle13BlePeerDevice7addressEv>:

BleAddress BlePeerDevice::address() const {
    return impl()->address();
   d59f0:	6809      	ldr	r1, [r1, #0]
   d59f2:	f851 2f02 	ldr.w	r2, [r1, #2]!
   d59f6:	6002      	str	r2, [r0, #0]
   d59f8:	684a      	ldr	r2, [r1, #4]
   d59fa:	6042      	str	r2, [r0, #4]
}
   d59fc:	4770      	bx	lr

000d59fe <_ZNK8particle13BlePeerDeviceeqERKS0_>:

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d59fe:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d5a00:	460b      	mov	r3, r1
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d5a02:	6801      	ldr	r1, [r0, #0]
   d5a04:	681a      	ldr	r2, [r3, #0]
   d5a06:	8809      	ldrh	r1, [r1, #0]
   d5a08:	8812      	ldrh	r2, [r2, #0]
   d5a0a:	4291      	cmp	r1, r2
   d5a0c:	d10c      	bne.n	d5a28 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2a>
   d5a0e:	4601      	mov	r1, r0
   d5a10:	4668      	mov	r0, sp
   d5a12:	f7ff ffed 	bl	d59f0 <_ZNK8particle13BlePeerDevice7addressEv>
   d5a16:	a802      	add	r0, sp, #8
   d5a18:	4619      	mov	r1, r3
   d5a1a:	f7ff ffe9 	bl	d59f0 <_ZNK8particle13BlePeerDevice7addressEv>
   d5a1e:	a902      	add	r1, sp, #8
   d5a20:	4668      	mov	r0, sp
   d5a22:	f7ff fb1b 	bl	d505c <_ZNK8particle10BleAddresseqERKS0_>
   d5a26:	b900      	cbnz	r0, d5a2a <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2c>
        return true;
    }
    return false;
   d5a28:	2000      	movs	r0, #0
}
   d5a2a:	b005      	add	sp, #20
   d5a2c:	f85d fb04 	ldr.w	pc, [sp], #4

000d5a30 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d5a30:	b510      	push	{r4, lr}
   d5a32:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d5a34:	2034      	movs	r0, #52	; 0x34
   d5a36:	f7fe fb2c 	bl	d4092 <_Znwj>
   d5a3a:	4601      	mov	r1, r0
   d5a3c:	b168      	cbz	r0, d5a5a <_ZN8particle14BleLocalDeviceC1Ev+0x2a>
        capacity_(0) {
   d5a3e:	2300      	movs	r3, #0
   d5a40:	e9c0 3300 	strd	r3, r3, [r0]
   d5a44:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d5a48:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d5a4c:	e9c0 3306 	strd	r3, r3, [r0, #24]
              disconnectedContext_(nullptr) {
   d5a50:	e9c0 3308 	strd	r3, r3, [r0, #32]
   d5a54:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
   d5a58:	6303      	str	r3, [r0, #48]	; 0x30
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d5a5a:	6021      	str	r1, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d5a5c:	b919      	cbnz	r1, d5a66 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   d5a5e:	4a0a      	ldr	r2, [pc, #40]	; (d5a88 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d5a60:	200a      	movs	r0, #10
   d5a62:	f7ff f8f3 	bl	d4c4c <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d5a66:	2000      	movs	r0, #0
   d5a68:	f7fe ff52 	bl	d4910 <hal_ble_stack_init>
   d5a6c:	b120      	cbz	r0, d5a78 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   d5a6e:	4a06      	ldr	r2, [pc, #24]	; (d5a88 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d5a70:	2100      	movs	r1, #0
   d5a72:	200a      	movs	r0, #10
   d5a74:	f7ff f8ea 	bl	d4c4c <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d5a78:	6821      	ldr	r1, [r4, #0]
   d5a7a:	4804      	ldr	r0, [pc, #16]	; (d5a8c <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   d5a7c:	2200      	movs	r2, #0
   d5a7e:	f7fe ffdd 	bl	d4a3c <hal_ble_set_callback_on_periph_link_events>
}
   d5a82:	4620      	mov	r0, r4
   d5a84:	bd10      	pop	{r4, pc}
   d5a86:	bf00      	nop
   d5a88:	000d4add 	.word	0x000d4add
   d5a8c:	000d5ef1 	.word	0x000d5ef1

000d5a90 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d5a90:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d5a92:	4c0b      	ldr	r4, [pc, #44]	; (d5ac0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d5a94:	7823      	ldrb	r3, [r4, #0]
   d5a96:	f3bf 8f5b 	dmb	ish
   d5a9a:	07db      	lsls	r3, r3, #31
   d5a9c:	d40e      	bmi.n	d5abc <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   d5a9e:	4620      	mov	r0, r4
   d5aa0:	f7fe fb06 	bl	d40b0 <__cxa_guard_acquire>
   d5aa4:	b150      	cbz	r0, d5abc <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   d5aa6:	4807      	ldr	r0, [pc, #28]	; (d5ac4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d5aa8:	f7ff ffc2 	bl	d5a30 <_ZN8particle14BleLocalDeviceC1Ev>
   d5aac:	4620      	mov	r0, r4
   d5aae:	f7fe fb04 	bl	d40ba <__cxa_guard_release>
   d5ab2:	4a05      	ldr	r2, [pc, #20]	; (d5ac8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d5ab4:	4905      	ldr	r1, [pc, #20]	; (d5acc <_ZN8particle14BleLocalDevice11getInstanceEv+0x3c>)
   d5ab6:	4803      	ldr	r0, [pc, #12]	; (d5ac4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d5ab8:	f003 f87e 	bl	d8bb8 <__aeabi_atexit>
    return instance;
}
   d5abc:	4801      	ldr	r0, [pc, #4]	; (d5ac4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d5abe:	bd10      	pop	{r4, pc}
   d5ac0:	2003e628 	.word	0x2003e628
   d5ac4:	2003e634 	.word	0x2003e634
   d5ac8:	2003dee8 	.word	0x2003dee8
   d5acc:	000d5ce1 	.word	0x000d5ce1

000d5ad0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d5ad0:	b570      	push	{r4, r5, r6, lr}
    switch (event->type) {
   d5ad2:	6803      	ldr	r3, [r0, #0]
   d5ad4:	3b09      	subs	r3, #9
   d5ad6:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d5ad8:	b08a      	sub	sp, #40	; 0x28
   d5ada:	4604      	mov	r4, r0
   d5adc:	460d      	mov	r5, r1
    switch (event->type) {
   d5ade:	d812      	bhi.n	d5b06 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x36>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d5ae0:	f7ff ffd6 	bl	d5a90 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d5ae4:	88a1      	ldrh	r1, [r4, #4]
   d5ae6:	6800      	ldr	r0, [r0, #0]
   d5ae8:	f7ff fd9c 	bl	d5624 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d5aec:	4602      	mov	r2, r0
   d5aee:	b960      	cbnz	r0, d5b0a <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x3a>
                LOG(ERROR, "Peer device is missing!");
   d5af0:	2320      	movs	r3, #32
   d5af2:	e9cd 3002 	strd	r3, r0, [sp, #8]
   d5af6:	4b09      	ldr	r3, [pc, #36]	; (d5b1c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x4c>)
   d5af8:	9300      	str	r3, [sp, #0]
   d5afa:	4909      	ldr	r1, [pc, #36]	; (d5b20 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x50>)
   d5afc:	4603      	mov	r3, r0
   d5afe:	aa02      	add	r2, sp, #8
   d5b00:	2032      	movs	r0, #50	; 0x32
   d5b02:	f7ff f8ab 	bl	d4c5c <log_message>
}
   d5b06:	b00a      	add	sp, #40	; 0x28
   d5b08:	bd70      	pop	{r4, r5, r6, pc}
            if (impl->callback_) {
   d5b0a:	6cee      	ldr	r6, [r5, #76]	; 0x4c
   d5b0c:	2e00      	cmp	r6, #0
   d5b0e:	d0fa      	beq.n	d5b06 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x36>
                impl->callback_(event->params.data_written.data, event->params.data_written.len, *peer, impl->context_);
   d5b10:	e9d4 1003 	ldrd	r1, r0, [r4, #12]
   d5b14:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   d5b16:	47b0      	blx	r6
}
   d5b18:	e7f5      	b.n	d5b06 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x36>
   d5b1a:	bf00      	nop
   d5b1c:	000d9326 	.word	0x000d9326
   d5b20:	000d92dc 	.word	0x000d92dc

000d5b24 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   d5b24:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d5b26:	a801      	add	r0, sp, #4
   d5b28:	f7ff fa74 	bl	d5014 <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(hal_ble_stack_init(nullptr));
   d5b2c:	2000      	movs	r0, #0
   d5b2e:	f7fe feef 	bl	d4910 <hal_ble_stack_init>
   d5b32:	4604      	mov	r4, r0
    WiringBleLock lk;
   d5b34:	a801      	add	r0, sp, #4
   d5b36:	f7ff fa7b 	bl	d5030 <_ZN8particle3ble13WiringBleLockD1Ev>
    return SYSTEM_ERROR_NONE;
}
   d5b3a:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   d5b3e:	b002      	add	sp, #8
   d5b40:	bd10      	pop	{r4, pc}

000d5b42 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams* params) const {
    return hal_ble_gap_get_advertising_parameters(params, nullptr);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d5b42:	4608      	mov	r0, r1
   d5b44:	b911      	cbnz	r1, d5b4c <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d5b46:	460a      	mov	r2, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d5b48:	f7fe beea 	b.w	d4920 <hal_ble_gap_set_advertising_data>
   d5b4c:	6a09      	ldr	r1, [r1, #32]
   d5b4e:	2200      	movs	r2, #0
   d5b50:	e7fa      	b.n	d5b48 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000d5b52 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
    }
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d5b52:	b507      	push	{r0, r1, r2, lr}
    if (scanResponse == nullptr) {
   d5b54:	4608      	mov	r0, r1
   d5b56:	b929      	cbnz	r1, d5b64 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d5b58:	460a      	mov	r2, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   d5b5a:	b003      	add	sp, #12
   d5b5c:	f85d eb04 	ldr.w	lr, [sp], #4
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d5b60:	f7fe bee6 	b.w	d4930 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d5b64:	2101      	movs	r1, #1
   d5b66:	9001      	str	r0, [sp, #4]
   d5b68:	f7ff fc6c 	bl	d5444 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d5b6c:	9801      	ldr	r0, [sp, #4]
   d5b6e:	2200      	movs	r2, #0
   d5b70:	6a01      	ldr	r1, [r0, #32]
   d5b72:	e7f2      	b.n	d5b5a <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x8>

000d5b74 <_ZNK8particle14BleLocalDevice9advertiseEv>:
    size_t len = CHECK(hal_ble_gap_get_scan_response_data(scanResponse->data(), BLE_MAX_ADV_DATA_LEN, nullptr));
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
   d5b74:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d5b76:	a801      	add	r0, sp, #4
   d5b78:	f7ff fa4c 	bl	d5014 <_ZN8particle3ble13WiringBleLockC1Ev>
    return hal_ble_gap_start_advertising(nullptr);
   d5b7c:	2000      	movs	r0, #0
   d5b7e:	f7fe fedf 	bl	d4940 <hal_ble_gap_start_advertising>
   d5b82:	4604      	mov	r4, r0
    WiringBleLock lk;
   d5b84:	a801      	add	r0, sp, #4
   d5b86:	f7ff fa53 	bl	d5030 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   d5b8a:	4620      	mov	r0, r4
   d5b8c:	b002      	add	sp, #8
   d5b8e:	bd10      	pop	{r4, pc}

000d5b90 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d5b90:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d5b92:	4605      	mov	r5, r0
    WiringBleLock lk;
   d5b94:	a803      	add	r0, sp, #12
int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d5b96:	9101      	str	r1, [sp, #4]
   d5b98:	4616      	mov	r6, r2
    WiringBleLock lk;
   d5b9a:	f7ff fa3b 	bl	d5014 <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(setAdvertisingData(advertisingData));
   d5b9e:	9901      	ldr	r1, [sp, #4]
   d5ba0:	4628      	mov	r0, r5
   d5ba2:	f7ff ffce 	bl	d5b42 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d5ba6:	1e04      	subs	r4, r0, #0
   d5ba8:	db09      	blt.n	d5bbe <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2e>
    CHECK(setScanResponseData(scanResponse));
   d5baa:	4631      	mov	r1, r6
   d5bac:	4628      	mov	r0, r5
   d5bae:	f7ff ffd0 	bl	d5b52 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d5bb2:	1e04      	subs	r4, r0, #0
   d5bb4:	db03      	blt.n	d5bbe <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2e>
    return advertise();
   d5bb6:	4628      	mov	r0, r5
   d5bb8:	f7ff ffdc 	bl	d5b74 <_ZNK8particle14BleLocalDevice9advertiseEv>
   d5bbc:	4604      	mov	r4, r0
    WiringBleLock lk;
   d5bbe:	a803      	add	r0, sp, #12
   d5bc0:	f7ff fa36 	bl	d5030 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   d5bc4:	4620      	mov	r0, r4
   d5bc6:	b004      	add	sp, #16
   d5bc8:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5bcc <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>:
    WiringBleLock lk;
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   d5bcc:	b530      	push	{r4, r5, lr}
   d5bce:	b08b      	sub	sp, #44	; 0x2c
   d5bd0:	460d      	mov	r5, r1
    WiringBleLock lk;
   d5bd2:	a801      	add	r0, sp, #4
int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   d5bd4:	4614      	mov	r4, r2
    WiringBleLock lk;
   d5bd6:	f7ff fa1d 	bl	d5014 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (results == nullptr || resultCount == 0) {
   d5bda:	b1cd      	cbz	r5, d5c10 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x44>
   d5bdc:	b1c4      	cbz	r4, d5c10 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x44>
   d5bde:	2200      	movs	r2, #0
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   d5be0:	480c      	ldr	r0, [pc, #48]	; (d5c14 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x48>)
   d5be2:	9204      	str	r2, [sp, #16]
   d5be4:	a902      	add	r1, sp, #8
        targetCount_ = resultCount;
   d5be6:	e9cd 5405 	strd	r5, r4, [sp, #20]
   d5bea:	e9cd 2202 	strd	r2, r2, [sp, #8]
              context_(nullptr) {
   d5bee:	e9cd 2207 	strd	r2, r2, [sp, #28]
   d5bf2:	9209      	str	r2, [sp, #36]	; 0x24
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   d5bf4:	f7fe feac 	bl	d4950 <hal_ble_gap_start_scan>
   d5bf8:	1e04      	subs	r4, r0, #0
    ::free(ptr);
   d5bfa:	9802      	ldr	r0, [sp, #8]
        return foundCount_;
   d5bfc:	bfa8      	it	ge
   d5bfe:	9c07      	ldrge	r4, [sp, #28]
   d5c00:	f7ff f8f0 	bl	d4de4 <free>
    WiringBleLock lk;
   d5c04:	a801      	add	r0, sp, #4
   d5c06:	f7ff fa13 	bl	d5030 <_ZN8particle3ble13WiringBleLockD1Ev>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    BleScanDelegator scanner;
    return scanner.start(results, resultCount);
}
   d5c0a:	4620      	mov	r0, r4
   d5c0c:	b00b      	add	sp, #44	; 0x2c
   d5c0e:	bd30      	pop	{r4, r5, pc}
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d5c10:	4c01      	ldr	r4, [pc, #4]	; (d5c18 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x4c>)
   d5c12:	e7f7      	b.n	d5c04 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x38>
   d5c14:	000d605d 	.word	0x000d605d
   d5c18:	fffffef2 	.word	0xfffffef2

000d5c1c <_ZNK8particle14BleLocalDevice9connectedEv>:
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   d5c1c:	6803      	ldr	r3, [r0, #0]
   d5c1e:	69d8      	ldr	r0, [r3, #28]
}
   d5c20:	2800      	cmp	r0, #0
   d5c22:	bfd4      	ite	le
   d5c24:	2000      	movle	r0, #0
   d5c26:	2001      	movgt	r0, #1
   d5c28:	4770      	bx	lr

000d5c2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d5c2a:	680b      	ldr	r3, [r1, #0]
   d5c2c:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d5c2e:	b113      	cbz	r3, d5c36 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d5c30:	685a      	ldr	r2, [r3, #4]
   d5c32:	3201      	adds	r2, #1
   d5c34:	605a      	str	r2, [r3, #4]
      }
   d5c36:	4770      	bx	lr

000d5c38 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d5c38:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5c3a:	f851 3b04 	ldr.w	r3, [r1], #4
   d5c3e:	4604      	mov	r4, r0
   d5c40:	f840 3b04 	str.w	r3, [r0], #4
   d5c44:	f7ff fff1 	bl	d5c2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   d5c48:	6823      	ldr	r3, [r4, #0]
   d5c4a:	b90b      	cbnz	r3, d5c50 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d5c4c:	f7ff f9b0 	bl	d4fb0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   d5c50:	4620      	mov	r0, r4
   d5c52:	bd10      	pop	{r4, pc}

000d5c54 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d5c54:	b510      	push	{r4, lr}
   d5c56:	f851 3b04 	ldr.w	r3, [r1], #4
   d5c5a:	4604      	mov	r4, r0
   d5c5c:	f840 3b04 	str.w	r3, [r0], #4
   d5c60:	f7ff ffe3 	bl	d5c2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d5c64:	4620      	mov	r0, r4
   d5c66:	bd10      	pop	{r4, pc}

000d5c68 <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   d5c68:	b510      	push	{r4, lr}
   d5c6a:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   d5c6c:	3004      	adds	r0, #4
   d5c6e:	f7fe fa76 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5c72:	4620      	mov	r0, r4
   d5c74:	bd10      	pop	{r4, pc}

000d5c76 <_ZN8particle13BlePeerDeviceD1Ev>:
BlePeerDevice::~BlePeerDevice() {
   d5c76:	b510      	push	{r4, lr}
   d5c78:	4604      	mov	r4, r0
   d5c7a:	3004      	adds	r0, #4
   d5c7c:	f7fe fa6f 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5c80:	4620      	mov	r0, r4
   d5c82:	bd10      	pop	{r4, pc}

000d5c84 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5c84:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5c86:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5c8a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d5c8c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d5c90:	42ae      	cmp	r6, r5
   d5c92:	d004      	beq.n	d5c9e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d5c94:	1d28      	adds	r0, r5, #4
   d5c96:	f7fe fa62 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5c9a:	3508      	adds	r5, #8
   d5c9c:	e7f8      	b.n	d5c90 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d5c9e:	6820      	ldr	r0, [r4, #0]
   d5ca0:	f7ff f8a0 	bl	d4de4 <free>
}
   d5ca4:	4620      	mov	r0, r4
   d5ca6:	bd70      	pop	{r4, r5, r6, pc}

000d5ca8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5ca8:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5caa:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5cae:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d5cb0:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d5cb4:	42ae      	cmp	r6, r5
   d5cb6:	d004      	beq.n	d5cc2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d5cb8:	1d28      	adds	r0, r5, #4
   d5cba:	f7fe fa50 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5cbe:	3508      	adds	r5, #8
   d5cc0:	e7f8      	b.n	d5cb4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d5cc2:	6820      	ldr	r0, [r4, #0]
   d5cc4:	f7ff f88e 	bl	d4de4 <free>
}
   d5cc8:	4620      	mov	r0, r4
   d5cca:	bd70      	pop	{r4, r5, r6, pc}

000d5ccc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d5ccc:	b510      	push	{r4, lr}
   d5cce:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   d5cd0:	3024      	adds	r0, #36	; 0x24
   d5cd2:	f7ff ffe9 	bl	d5ca8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d5cd6:	f104 0018 	add.w	r0, r4, #24
   d5cda:	f7ff ffd3 	bl	d5c84 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   d5cde:	bd10      	pop	{r4, pc}

000d5ce0 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d5ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__ptr != nullptr)
   d5ce2:	6804      	ldr	r4, [r0, #0]
   d5ce4:	4606      	mov	r6, r0
   d5ce6:	b1c4      	cbz	r4, d5d1a <_ZN8particle14BleLocalDeviceD1Ev+0x3a>
    destruct(data_, data_ + size_);
   d5ce8:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   d5cec:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (; p != end; ++p) {
   d5cf0:	42af      	cmp	r7, r5
   d5cf2:	d004      	beq.n	d5cfe <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
      ~__shared_ptr() = default;
   d5cf4:	1d28      	adds	r0, r5, #4
   d5cf6:	f7fe fa32 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5cfa:	3508      	adds	r5, #8
   d5cfc:	e7f8      	b.n	d5cf0 <_ZN8particle14BleLocalDeviceD1Ev+0x10>
    ::free(ptr);
   d5cfe:	69a0      	ldr	r0, [r4, #24]
   d5d00:	f7ff f870 	bl	d4de4 <free>
    ~BleLocalDeviceImpl() = default;
   d5d04:	f104 000c 	add.w	r0, r4, #12
   d5d08:	f7ff ffce 	bl	d5ca8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d5d0c:	4620      	mov	r0, r4
   d5d0e:	f7ff ffb9 	bl	d5c84 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   d5d12:	2134      	movs	r1, #52	; 0x34
   d5d14:	4620      	mov	r0, r4
   d5d16:	f002 ff54 	bl	d8bc2 <_ZdlPvj>
   d5d1a:	4630      	mov	r0, r6
   d5d1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d5d20 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   d5d20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5d24:	b085      	sub	sp, #20
   d5d26:	4680      	mov	r8, r0
   d5d28:	4699      	mov	r9, r3
   d5d2a:	2060      	movs	r0, #96	; 0x60
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d5d2c:	2300      	movs	r3, #0
   d5d2e:	460d      	mov	r5, r1
   d5d30:	4616      	mov	r6, r2
   d5d32:	9300      	str	r3, [sp, #0]
   d5d34:	f7fe f9ad 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d5d38:	1e04      	subs	r4, r0, #0
   d5d3a:	f104 070c 	add.w	r7, r4, #12
   d5d3e:	d01c      	beq.n	d5d7a <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5a>
	: _M_impl(__a)
   d5d40:	4b1c      	ldr	r3, [pc, #112]	; (d5db4 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   d5d42:	6023      	str	r3, [r4, #0]
      : _M_use_count(1), _M_weak_count(1) { }
   d5d44:	2201      	movs	r2, #1
   d5d46:	e9c4 2201 	strd	r2, r2, [r4, #4]
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
   d5d4a:	7836      	ldrb	r6, [r6, #0]
            : BleCharacteristicImpl() {
   d5d4c:	4638      	mov	r0, r7
   d5d4e:	f7ff fc49 	bl	d55e4 <_ZN8particle21BleCharacteristicImplC1Ev>
        description_ = desc;
   d5d52:	4629      	mov	r1, r5
        properties_ = properties;
   d5d54:	7426      	strb	r6, [r4, #16]
        description_ = desc;
   d5d56:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d5d5a:	f002 fca8 	bl	d86ae <_ZN6StringaSEPKc>
        callback_ = callback;
   d5d5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d5d60:	65a3      	str	r3, [r4, #88]	; 0x58
        context_ = context;
   d5d62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d5d64:	65e3      	str	r3, [r4, #92]	; 0x5c
        charUuid_ = charUuid;
   d5d66:	4649      	mov	r1, r9
   d5d68:	f104 0020 	add.w	r0, r4, #32
   d5d6c:	f7ff fa2f 	bl	d51ce <_ZN8particle7BleUuidaSERKS0_>
        svcUuid_ = svcUuid;
   d5d70:	990c      	ldr	r1, [sp, #48]	; 0x30
   d5d72:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d5d76:	f7ff fa2a 	bl	d51ce <_ZN8particle7BleUuidaSERKS0_>
	__r._M_pi = _M_pi;
   d5d7a:	2300      	movs	r3, #0
	__r._M_ptr = 0;
   d5d7c:	e9cd 3300 	strd	r3, r3, [sp]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5d80:	f8d8 3000 	ldr.w	r3, [r8]
   d5d84:	9302      	str	r3, [sp, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5d86:	f8c8 7000 	str.w	r7, [r8]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5d8a:	f8d8 3004 	ldr.w	r3, [r8, #4]
	__r._M_pi = _M_pi;
   d5d8e:	f8c8 4004 	str.w	r4, [r8, #4]
      ~__shared_ptr() = default;
   d5d92:	a803      	add	r0, sp, #12
	_M_pi = __tmp;
   d5d94:	9303      	str	r3, [sp, #12]
      ~__shared_ptr() = default;
   d5d96:	f7fe f9e2 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5d9a:	a801      	add	r0, sp, #4
   d5d9c:	f7fe f9df 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   d5da0:	f8d8 1000 	ldr.w	r1, [r8]
   d5da4:	b919      	cbnz	r1, d5dae <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8e>
        SPARK_ASSERT(false);
   d5da6:	4a04      	ldr	r2, [pc, #16]	; (d5db8 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x98>)
   d5da8:	200a      	movs	r0, #10
   d5daa:	f7fe ff4f 	bl	d4c4c <panic_>
}
   d5dae:	b005      	add	sp, #20
   d5db0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5db4:	000d9484 	.word	0x000d9484
   d5db8:	000d4add 	.word	0x000d4add

000d5dbc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d5dbc:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d5dbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5dc0:	4606      	mov	r6, r0
   d5dc2:	460c      	mov	r4, r1
   d5dc4:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5dc6:	d918      	bls.n	d5dfa <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d5dc8:	4290      	cmp	r0, r2
   d5dca:	d217      	bcs.n	d5dfc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            --end;
   d5dcc:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d5dd0:	f1a1 0708 	sub.w	r7, r1, #8
   d5dd4:	1a69      	subs	r1, r5, r1
   d5dd6:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d5dd8:	42af      	cmp	r7, r5
   d5dda:	d020      	beq.n	d5e1e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x62>
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
   d5ddc:	1d2e      	adds	r6, r5, #4
                new(dest) T(std::move(*end));
   d5dde:	b134      	cbz	r4, d5dee <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5de0:	4620      	mov	r0, r4
   d5de2:	682b      	ldr	r3, [r5, #0]
   d5de4:	f840 3b04 	str.w	r3, [r0], #4
   d5de8:	4631      	mov	r1, r6
   d5dea:	f7ff ff1e 	bl	d5c2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      ~__shared_ptr() = default;
   d5dee:	4630      	mov	r0, r6
   d5df0:	f7fe f9b5 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d5df4:	3d08      	subs	r5, #8
   d5df6:	3c08      	subs	r4, #8
   d5df8:	e7ee      	b.n	d5dd8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d5dfa:	d010      	beq.n	d5e1e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x62>
            for (; p != end; ++p, ++dest) {
   d5dfc:	42ac      	cmp	r4, r5
   d5dfe:	d00e      	beq.n	d5e1e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x62>
   d5e00:	1d27      	adds	r7, r4, #4
                new(dest) T(std::move(*p));
   d5e02:	b136      	cbz	r6, d5e12 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x56>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5e04:	4630      	mov	r0, r6
   d5e06:	6823      	ldr	r3, [r4, #0]
   d5e08:	f840 3b04 	str.w	r3, [r0], #4
   d5e0c:	4639      	mov	r1, r7
   d5e0e:	f7ff ff0c 	bl	d5c2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      ~__shared_ptr() = default;
   d5e12:	4638      	mov	r0, r7
   d5e14:	f7fe f9a3 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d5e18:	3408      	adds	r4, #8
   d5e1a:	3608      	adds	r6, #8
   d5e1c:	e7ee      	b.n	d5dfc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
    }
   d5e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5e20 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d5e24:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5e28:	4605      	mov	r5, r0
   d5e2a:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d5e2c:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
        for (; p != end; ++p) {
   d5e30:	42a7      	cmp	r7, r4
   d5e32:	d01a      	beq.n	d5e6a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4a>
            if (*p == value) {
   d5e34:	4641      	mov	r1, r8
   d5e36:	4620      	mov	r0, r4
   d5e38:	f7ff fde1 	bl	d59fe <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d5e3c:	4606      	mov	r6, r0
   d5e3e:	b908      	cbnz	r0, d5e44 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
        for (; p != end; ++p) {
   d5e40:	3408      	adds	r4, #8
   d5e42:	e7f5      	b.n	d5e30 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
    if (!p) {
   d5e44:	b19c      	cbz	r4, d5e6e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4e>
   d5e46:	1d20      	adds	r0, r4, #4
   d5e48:	f7fe f989 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   d5e4c:	e9d5 3200 	ldrd	r3, r2, [r5]
   d5e50:	f104 0108 	add.w	r1, r4, #8
   d5e54:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d5e58:	4620      	mov	r0, r4
   d5e5a:	f7ff ffaf 	bl	d5dbc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d5e5e:	686b      	ldr	r3, [r5, #4]
   d5e60:	3b01      	subs	r3, #1
   d5e62:	606b      	str	r3, [r5, #4]
}
   d5e64:	4630      	mov	r0, r6
   d5e66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return false;
   d5e6a:	2600      	movs	r6, #0
   d5e6c:	e7fa      	b.n	d5e64 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x44>
   d5e6e:	4626      	mov	r6, r4
   d5e70:	e7f8      	b.n	d5e64 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x44>

000d5e72 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d5e72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5e74:	4604      	mov	r4, r0
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5e76:	f851 3b04 	ldr.w	r3, [r1], #4
    return insert(size_, std::move(value));
   d5e7a:	6847      	ldr	r7, [r0, #4]
   d5e7c:	9300      	str	r3, [sp, #0]
   d5e7e:	a801      	add	r0, sp, #4
   d5e80:	f7ff fed3 	bl	d5c2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5e84:	e9d4 6301 	ldrd	r6, r3, [r4, #4]
   d5e88:	429e      	cmp	r6, r3
   d5e8a:	db12      	blt.n	d5eb2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x40>
   d5e8c:	3601      	adds	r6, #1
        if (n > 0) {
   d5e8e:	2e00      	cmp	r6, #0
   d5e90:	dd2c      	ble.n	d5eec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x7a>
    return ::malloc(size);
   d5e92:	00f0      	lsls	r0, r6, #3
   d5e94:	f7fe ff9e 	bl	d4dd4 <malloc>
            if (!d) {
   d5e98:	4605      	mov	r5, r0
   d5e9a:	b308      	cbz	r0, d5ee0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
            move(d, data_, data_ + size_);
   d5e9c:	e9d4 1200 	ldrd	r1, r2, [r4]
   d5ea0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d5ea4:	f7ff ff8a 	bl	d5dbc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d5ea8:	6820      	ldr	r0, [r4, #0]
   d5eaa:	f7fe ff9b 	bl	d4de4 <free>
        data_ = d;
   d5eae:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d5eb0:	60a6      	str	r6, [r4, #8]
    T* const p = data_ + i;
   d5eb2:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d5eb4:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d5eb6:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d5eba:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d5ebe:	4629      	mov	r1, r5
   d5ec0:	f105 0008 	add.w	r0, r5, #8
   d5ec4:	f7ff ff7a 	bl	d5dbc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d5ec8:	b135      	cbz	r5, d5ed8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x66>
   d5eca:	9b00      	ldr	r3, [sp, #0]
   d5ecc:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d5ed0:	a901      	add	r1, sp, #4
   d5ed2:	1d28      	adds	r0, r5, #4
   d5ed4:	f7ff fea9 	bl	d5c2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d5ed8:	6863      	ldr	r3, [r4, #4]
   d5eda:	3301      	adds	r3, #1
   d5edc:	6063      	str	r3, [r4, #4]
    return true;
   d5ede:	2501      	movs	r5, #1
      ~__shared_ptr() = default;
   d5ee0:	a801      	add	r0, sp, #4
   d5ee2:	f7fe f93c 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5ee6:	4628      	mov	r0, r5
   d5ee8:	b003      	add	sp, #12
   d5eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   d5eec:	2500      	movs	r5, #0
   d5eee:	e7db      	b.n	d5ea8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x36>

000d5ef0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d5ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5ef4:	4604      	mov	r4, r0
   d5ef6:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   d5ef8:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d5efa:	460d      	mov	r5, r1
        WiringBleLock lk;
   d5efc:	f7ff f88a 	bl	d5014 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d5f00:	6823      	ldr	r3, [r4, #0]
   d5f02:	2b03      	cmp	r3, #3
   d5f04:	d007      	beq.n	d5f16 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x26>
   d5f06:	2b04      	cmp	r3, #4
   d5f08:	d048      	beq.n	d5f9c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xac>
        WiringBleLock lk;
   d5f0a:	a803      	add	r0, sp, #12
   d5f0c:	f7ff f890 	bl	d5030 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   d5f10:	b00e      	add	sp, #56	; 0x38
   d5f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                BlePeerDevice peer;
   d5f16:	a804      	add	r0, sp, #16
   d5f18:	f7ff fd0a 	bl	d5930 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d5f1c:	9b04      	ldr	r3, [sp, #16]
   d5f1e:	8922      	ldrh	r2, [r4, #8]
   d5f20:	801a      	strh	r2, [r3, #0]
    address_ = addr;
   d5f22:	6862      	ldr	r2, [r4, #4]
        return impl_.get();
   d5f24:	9904      	ldr	r1, [sp, #16]
   d5f26:	f852 3f08 	ldr.w	r3, [r2, #8]!
   d5f2a:	f8c1 3002 	str.w	r3, [r1, #2]
   d5f2e:	6853      	ldr	r3, [r2, #4]
   d5f30:	f8c1 3006 	str.w	r3, [r1, #6]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5f34:	a807      	add	r0, sp, #28
   d5f36:	9b04      	ldr	r3, [sp, #16]
   d5f38:	9306      	str	r3, [sp, #24]
   d5f3a:	a905      	add	r1, sp, #20
   d5f3c:	f7ff fe75 	bl	d5c2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
                if (!impl->peers_.append(peer)) {
   d5f40:	a906      	add	r1, sp, #24
   d5f42:	f105 0018 	add.w	r0, r5, #24
   d5f46:	f7ff ff94 	bl	d5e72 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d5f4a:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   d5f4c:	a807      	add	r0, sp, #28
   d5f4e:	f7fe f906 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5f52:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d5f54:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   d5f56:	b98c      	cbnz	r4, d5f7c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    LOG(ERROR, "Failed to append peer Central device.");
   d5f58:	4b33      	ldr	r3, [pc, #204]	; (d6028 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>)
   d5f5a:	4934      	ldr	r1, [pc, #208]	; (d602c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5f5c:	9300      	str	r3, [sp, #0]
   d5f5e:	2032      	movs	r0, #50	; 0x32
   d5f60:	4623      	mov	r3, r4
   d5f62:	aa06      	add	r2, sp, #24
   d5f64:	9407      	str	r4, [sp, #28]
   d5f66:	f7fe fe79 	bl	d4c5c <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d5f6a:	9b04      	ldr	r3, [sp, #16]
   d5f6c:	4621      	mov	r1, r4
   d5f6e:	8818      	ldrh	r0, [r3, #0]
   d5f70:	f7fe fd00 	bl	d4974 <hal_ble_gap_disconnect>
   d5f74:	a805      	add	r0, sp, #20
   d5f76:	f7fe f8f2 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5f7a:	e7c6      	b.n	d5f0a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a>
                LOG(TRACE, "Connected by Central device.");
   d5f7c:	4a2c      	ldr	r2, [pc, #176]	; (d6030 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x140>)
   d5f7e:	9200      	str	r2, [sp, #0]
   d5f80:	2300      	movs	r3, #0
   d5f82:	492a      	ldr	r1, [pc, #168]	; (d602c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5f84:	9307      	str	r3, [sp, #28]
   d5f86:	aa06      	add	r2, sp, #24
   d5f88:	2001      	movs	r0, #1
   d5f8a:	f7fe fe67 	bl	d4c5c <log_message>
                if (impl->connectedCb_) {
   d5f8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d5f90:	2b00      	cmp	r3, #0
   d5f92:	d0ef      	beq.n	d5f74 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x84>
                    impl->connectedCb_(peer, impl->connectedContext_);
   d5f94:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   d5f96:	a804      	add	r0, sp, #16
   d5f98:	4798      	blx	r3
   d5f9a:	e7eb      	b.n	d5f74 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x84>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d5f9c:	8921      	ldrh	r1, [r4, #8]
   d5f9e:	4628      	mov	r0, r5
   d5fa0:	f7ff fb40 	bl	d5624 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d5fa4:	4606      	mov	r6, r0
   d5fa6:	2800      	cmp	r0, #0
   d5fa8:	d0af      	beq.n	d5f0a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a>
   d5faa:	6804      	ldr	r4, [r0, #0]
    return data_ + size_;
   d5fac:	e9d4 3106 	ldrd	r3, r1, [r4, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d5fb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5fb4:	8022      	strh	r2, [r4, #0]
   d5fb6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics_) {
   d5fba:	4299      	cmp	r1, r3
   d5fbc:	d003      	beq.n	d5fc6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd6>
        return impl_.get();
   d5fbe:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d5fc2:	8042      	strh	r2, [r0, #2]
        for (auto& characteristic : characteristics_) {
   d5fc4:	e7f9      	b.n	d5fba <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
    destruct(data_, data_ + size_);
   d5fc6:	e9d4 7303 	ldrd	r7, r3, [r4, #12]
   d5fca:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   d5fce:	45b8      	cmp	r8, r7
   d5fd0:	d004      	beq.n	d5fdc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   d5fd2:	1d38      	adds	r0, r7, #4
   d5fd4:	f7fe f8c3 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5fd8:	3708      	adds	r7, #8
   d5fda:	e7f8      	b.n	d5fce <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xde>
    size_ = 0;
   d5fdc:	2300      	movs	r3, #0
   d5fde:	6123      	str	r3, [r4, #16]
    destruct(data_, data_ + size_);
   d5fe0:	e9d4 7306 	ldrd	r7, r3, [r4, #24]
   d5fe4:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   d5fe8:	45b8      	cmp	r8, r7
   d5fea:	d004      	beq.n	d5ff6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x106>
   d5fec:	1d38      	adds	r0, r7, #4
   d5fee:	f7fe f8b6 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5ff2:	3708      	adds	r7, #8
   d5ff4:	e7f8      	b.n	d5fe8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf8>
    size_ = 0;
   d5ff6:	2300      	movs	r3, #0
   d5ff8:	61e3      	str	r3, [r4, #28]
        servicesDiscovered_ = false;
   d5ffa:	8163      	strh	r3, [r4, #10]
                    if (impl->disconnectedCb_) {
   d5ffc:	6aab      	ldr	r3, [r5, #40]	; 0x28
   d5ffe:	b113      	cbz	r3, d6006 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x116>
                        impl->disconnectedCb_(*peer, impl->disconnectedContext_);
   d6000:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d6002:	4630      	mov	r0, r6
   d6004:	4798      	blx	r3
                    LOG(TRACE, "Disconnected by remote device.");
   d6006:	2300      	movs	r3, #0
   d6008:	2220      	movs	r2, #32
   d600a:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d600e:	4a09      	ldr	r2, [pc, #36]	; (d6034 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x144>)
   d6010:	9200      	str	r2, [sp, #0]
   d6012:	4906      	ldr	r1, [pc, #24]	; (d602c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d6014:	aa06      	add	r2, sp, #24
   d6016:	2001      	movs	r0, #1
   d6018:	f7fe fe20 	bl	d4c5c <log_message>
                    impl->peers_.removeOne(*peer);
   d601c:	4631      	mov	r1, r6
   d601e:	f105 0018 	add.w	r0, r5, #24
   d6022:	f7ff fefd 	bl	d5e20 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
   d6026:	e770      	b.n	d5f0a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a>
   d6028:	000d933e 	.word	0x000d933e
   d602c:	000d92dc 	.word	0x000d92dc
   d6030:	000d9364 	.word	0x000d9364
   d6034:	000d9381 	.word	0x000d9381

000d6038 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   d6038:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   d603a:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   d603c:	4604      	mov	r4, r0
   d603e:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   d6040:	dd05      	ble.n	d604e <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
    return ::realloc(ptr, size);
   d6042:	2154      	movs	r1, #84	; 0x54
   d6044:	4369      	muls	r1, r5
   d6046:	f7fe fed5 	bl	d4df4 <realloc>
            if (!d) {
   d604a:	b918      	cbnz	r0, d6054 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1c>
    }
   d604c:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   d604e:	f7fe fec9 	bl	d4de4 <free>
        T* d = nullptr;
   d6052:	2000      	movs	r0, #0
        data_ = d;
   d6054:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d6056:	60a5      	str	r5, [r4, #8]
        return true;
   d6058:	2001      	movs	r0, #1
   d605a:	e7f7      	b.n	d604c <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x14>

000d605c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d605c:	b5f0      	push	{r4, r5, r6, r7, lr}
        BleScanResult result = {};
   d605e:	2654      	movs	r6, #84	; 0x54
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d6060:	b0c1      	sub	sp, #260	; 0x104
   d6062:	4605      	mov	r5, r0
        BleScanResult result = {};
   d6064:	4632      	mov	r2, r6
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d6066:	460c      	mov	r4, r1
        BleScanResult result = {};
   d6068:	a801      	add	r0, sp, #4
   d606a:	2100      	movs	r1, #0
   d606c:	f002 ff06 	bl	d8e7c <memset>
   d6070:	a801      	add	r0, sp, #4
   d6072:	f7fe ffe9 	bl	d5048 <_ZN8particle10BleAddressC1Ev>
   d6076:	a803      	add	r0, sp, #12
   d6078:	f7ff f9b9 	bl	d53ee <_ZN8particle18BleAdvertisingDataC1Ev>
   d607c:	a80c      	add	r0, sp, #48	; 0x30
   d607e:	f7ff f9b6 	bl	d53ee <_ZN8particle18BleAdvertisingDataC1Ev>
    address_ = addr;
   d6082:	462a      	mov	r2, r5
   d6084:	ab01      	add	r3, sp, #4
   d6086:	f852 0f10 	ldr.w	r0, [r2, #16]!
   d608a:	6851      	ldr	r1, [r2, #4]
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d608c:	89ea      	ldrh	r2, [r5, #14]
    address_ = addr;
   d608e:	c303      	stmia	r3!, {r0, r1}
        result.rssi = event->rssi;
   d6090:	782b      	ldrb	r3, [r5, #0]
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d6092:	68a9      	ldr	r1, [r5, #8]
        result.rssi = event->rssi;
   d6094:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d6098:	a80c      	add	r0, sp, #48	; 0x30
   d609a:	f7ff f951 	bl	d5340 <_ZN8particle18BleAdvertisingData3setEPKhj>
        result.advertisingData.set(event->adv_data, event->adv_data_len);
   d609e:	89aa      	ldrh	r2, [r5, #12]
   d60a0:	6869      	ldr	r1, [r5, #4]
   d60a2:	a803      	add	r0, sp, #12
   d60a4:	f7ff f94c 	bl	d5340 <_ZN8particle18BleAdvertisingData3setEPKhj>
        if (delegator->callback_) {
   d60a8:	69a5      	ldr	r5, [r4, #24]
   d60aa:	b135      	cbz	r5, d60ba <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x5e>
            delegator->callback_(&result, delegator->context_);
   d60ac:	69e1      	ldr	r1, [r4, #28]
   d60ae:	a801      	add	r0, sp, #4
   d60b0:	47a8      	blx	r5
            delegator->foundCount_++;
   d60b2:	6963      	ldr	r3, [r4, #20]
   d60b4:	3301      	adds	r3, #1
   d60b6:	6163      	str	r3, [r4, #20]
   d60b8:	e014      	b.n	d60e4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x88>
        if (delegator->resultsPtr_) {
   d60ba:	68e0      	ldr	r0, [r4, #12]
   d60bc:	b1a0      	cbz	r0, d60e8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x8c>
            if (delegator->foundCount_ < delegator->targetCount_) {
   d60be:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   d60c2:	4293      	cmp	r3, r2
   d60c4:	d20e      	bcs.n	d60e4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x88>
                delegator->resultsPtr_[delegator->foundCount_++] = result;
   d60c6:	1c5a      	adds	r2, r3, #1
   d60c8:	6162      	str	r2, [r4, #20]
   d60ca:	fb06 0003 	mla	r0, r6, r3, r0
   d60ce:	2251      	movs	r2, #81	; 0x51
   d60d0:	a901      	add	r1, sp, #4
   d60d2:	f002 feab 	bl	d8e2c <memcpy>
                if (delegator->foundCount_ >= delegator->targetCount_) {
   d60d6:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   d60da:	429a      	cmp	r2, r3
   d60dc:	d302      	bcc.n	d60e4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x88>
                    hal_ble_gap_stop_scan(nullptr);
   d60de:	4628      	mov	r0, r5
   d60e0:	f7fe fc3e 	bl	d4960 <hal_ble_gap_stop_scan>
    }
   d60e4:	b041      	add	sp, #260	; 0x104
   d60e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (delegator->resultsVector_.append(result)) {
   d60e8:	4632      	mov	r2, r6
   d60ea:	a901      	add	r1, sp, #4
   d60ec:	a816      	add	r0, sp, #88	; 0x58
   d60ee:	f002 fe9d 	bl	d8e2c <memcpy>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d60f2:	4632      	mov	r2, r6
   d60f4:	a916      	add	r1, sp, #88	; 0x58
   d60f6:	a82b      	add	r0, sp, #172	; 0xac
    return insert(size_, std::move(value));
   d60f8:	6865      	ldr	r5, [r4, #4]
   d60fa:	f002 fe97 	bl	d8e2c <memcpy>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d60fe:	68a3      	ldr	r3, [r4, #8]
   d6100:	429d      	cmp	r5, r3
   d6102:	db05      	blt.n	d6110 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xb4>
   d6104:	1c69      	adds	r1, r5, #1
   d6106:	4620      	mov	r0, r4
   d6108:	f7ff ff96 	bl	d6038 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d610c:	2800      	cmp	r0, #0
   d610e:	d0e9      	beq.n	d60e4 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x88>
    T* const p = data_ + i;
   d6110:	2754      	movs	r7, #84	; 0x54
   d6112:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d6114:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d6116:	437d      	muls	r5, r7
   d6118:	442e      	add	r6, r5
    move(p + 1, p, data_ + size_);
   d611a:	437a      	muls	r2, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   d611c:	1b52      	subs	r2, r2, r5
   d611e:	4631      	mov	r1, r6
   d6120:	19f0      	adds	r0, r6, r7
   d6122:	f002 fe91 	bl	d8e48 <memmove>
    new(p) T(std::move(value));
   d6126:	463a      	mov	r2, r7
   d6128:	a92b      	add	r1, sp, #172	; 0xac
   d612a:	4630      	mov	r0, r6
   d612c:	f002 fe7e 	bl	d8e2c <memcpy>
    ++size_;
   d6130:	6863      	ldr	r3, [r4, #4]
   d6132:	3301      	adds	r3, #1
   d6134:	6063      	str	r3, [r4, #4]
   d6136:	e7bc      	b.n	d60b2 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x56>

000d6138 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d6138:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d613a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d613c:	4604      	mov	r4, r0
   d613e:	460d      	mov	r5, r1
   d6140:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d6142:	d914      	bls.n	d616e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d6144:	4290      	cmp	r0, r2
   d6146:	d213      	bcs.n	d6170 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d6148:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d614c:	1a75      	subs	r5, r6, r1
   d614e:	f1a1 0708 	sub.w	r7, r1, #8
   d6152:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d6154:	42b7      	cmp	r7, r6
   d6156:	d018      	beq.n	d618a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d6158:	b11c      	cbz	r4, d6162 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d615a:	4631      	mov	r1, r6
   d615c:	4620      	mov	r0, r4
   d615e:	f7ff fd79 	bl	d5c54 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d6162:	1d30      	adds	r0, r6, #4
   d6164:	f7fd fffb 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d6168:	3e08      	subs	r6, #8
   d616a:	3c08      	subs	r4, #8
   d616c:	e7f2      	b.n	d6154 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d616e:	d00c      	beq.n	d618a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d6170:	42b5      	cmp	r5, r6
   d6172:	d00a      	beq.n	d618a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d6174:	b11c      	cbz	r4, d617e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d6176:	4629      	mov	r1, r5
   d6178:	4620      	mov	r0, r4
   d617a:	f7ff fd6b 	bl	d5c54 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d617e:	1d28      	adds	r0, r5, #4
   d6180:	f7fd ffed 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d6184:	3508      	adds	r5, #8
   d6186:	3408      	adds	r4, #8
   d6188:	e7f2      	b.n	d6170 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d618a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d618c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   d618c:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d618e:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d6190:	4605      	mov	r5, r0
        if (n > 0) {
   d6192:	dd11      	ble.n	d61b8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   d6194:	00f0      	lsls	r0, r6, #3
   d6196:	f7fe fe1d 	bl	d4dd4 <malloc>
            if (!d) {
   d619a:	4604      	mov	r4, r0
   d619c:	b158      	cbz	r0, d61b6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d619e:	e9d5 1200 	ldrd	r1, r2, [r5]
   d61a2:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d61a6:	f7ff ffc7 	bl	d6138 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d61aa:	6828      	ldr	r0, [r5, #0]
   d61ac:	f7fe fe1a 	bl	d4de4 <free>
        data_ = d;
   d61b0:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d61b2:	60ae      	str	r6, [r5, #8]
        return true;
   d61b4:	2001      	movs	r0, #1
    }
   d61b6:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d61b8:	2400      	movs	r4, #0
   d61ba:	e7f6      	b.n	d61aa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000d61bc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d61bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d61c0:	2300      	movs	r3, #0
   d61c2:	e9c0 3300 	strd	r3, r3, [r0]
   d61c6:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d61c8:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d61ca:	6849      	ldr	r1, [r1, #4]
   d61cc:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d61ce:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d61d0:	dd13      	ble.n	d61fa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   d61d2:	f7ff ffdb 	bl	d618c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d61d6:	b180      	cbz	r0, d61fa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d61d8:	e9d5 6300 	ldrd	r6, r3, [r5]
   d61dc:	6827      	ldr	r7, [r4, #0]
   d61de:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   d61e2:	45b0      	cmp	r8, r6
   d61e4:	d007      	beq.n	d61f6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   d61e6:	b11f      	cbz	r7, d61f0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   d61e8:	4631      	mov	r1, r6
   d61ea:	4638      	mov	r0, r7
   d61ec:	f7ff fd32 	bl	d5c54 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        for (; it != end; ++it, ++dest) {
   d61f0:	3608      	adds	r6, #8
   d61f2:	3708      	adds	r7, #8
   d61f4:	e7f5      	b.n	d61e2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   d61f6:	686b      	ldr	r3, [r5, #4]
   d61f8:	6063      	str	r3, [r4, #4]
}
   d61fa:	4620      	mov	r0, r4
   d61fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6200 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>:
Vector<BleService> BlePeerDevice::discoverAllServices() {
   d6200:	b538      	push	{r3, r4, r5, lr}
    if (!impl()->servicesDiscovered()) {
   d6202:	680b      	ldr	r3, [r1, #0]
   d6204:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleService> BlePeerDevice::discoverAllServices() {
   d6206:	4605      	mov	r5, r0
   d6208:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   d620a:	b933      	cbnz	r3, d621a <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
   d620c:	4608      	mov	r0, r1
   d620e:	f7fe feb1 	bl	d4f74 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>
   d6212:	b910      	cbnz	r0, d621a <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
        return impl_.get();
   d6214:	6823      	ldr	r3, [r4, #0]
            impl()->servicesDiscovered() = true;
   d6216:	2201      	movs	r2, #1
   d6218:	729a      	strb	r2, [r3, #10]
        return services_;
   d621a:	6821      	ldr	r1, [r4, #0]
    return impl()->services();
   d621c:	4628      	mov	r0, r5
   d621e:	310c      	adds	r1, #12
   d6220:	f7ff ffcc 	bl	d61bc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>
}
   d6224:	4628      	mov	r0, r5
   d6226:	bd38      	pop	{r3, r4, r5, pc}

000d6228 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d6228:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d622a:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d622c:	6845      	ldr	r5, [r0, #4]
   d622e:	4668      	mov	r0, sp
   d6230:	f7ff fd10 	bl	d5c54 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6234:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   d6238:	4299      	cmp	r1, r3
   d623a:	da10      	bge.n	d625e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   d623c:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d623e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d6240:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d6244:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d6248:	4629      	mov	r1, r5
   d624a:	f105 0008 	add.w	r0, r5, #8
   d624e:	f7ff ff73 	bl	d6138 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d6252:	b98d      	cbnz	r5, d6278 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   d6254:	6863      	ldr	r3, [r4, #4]
   d6256:	3301      	adds	r3, #1
   d6258:	6063      	str	r3, [r4, #4]
    return true;
   d625a:	2601      	movs	r6, #1
   d625c:	e006      	b.n	d626c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d625e:	3101      	adds	r1, #1
   d6260:	4620      	mov	r0, r4
   d6262:	f7ff ff93 	bl	d618c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d6266:	4606      	mov	r6, r0
   d6268:	2800      	cmp	r0, #0
   d626a:	d1e7      	bne.n	d623c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   d626c:	a801      	add	r0, sp, #4
   d626e:	f7fd ff76 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6272:	4630      	mov	r0, r6
   d6274:	b002      	add	sp, #8
   d6276:	bd70      	pop	{r4, r5, r6, pc}
   d6278:	4669      	mov	r1, sp
   d627a:	4628      	mov	r0, r5
   d627c:	f7ff fcea 	bl	d5c54 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d6280:	e7e8      	b.n	d6254 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>
	...

000d6284 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv>:
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   d6284:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
                LOG(ERROR, "Failed to append discovered service.");
   d6288:	f8df 8080 	ldr.w	r8, [pc, #128]	; d630c <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x88>
   d628c:	f8df 9080 	ldr.w	r9, [pc, #128]	; d6310 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x8c>
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   d6290:	b08d      	sub	sp, #52	; 0x34
   d6292:	4604      	mov	r4, r0
   d6294:	460f      	mov	r7, r1
        for (size_t i = 0; i < event->count; i++) {
   d6296:	2600      	movs	r6, #0
   d6298:	6823      	ldr	r3, [r4, #0]
   d629a:	42b3      	cmp	r3, r6
   d629c:	d933      	bls.n	d6306 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x82>
            BleService service;
   d629e:	a802      	add	r0, sp, #8
   d62a0:	f7ff fa9c 	bl	d57dc <_ZN8particle10BleServiceC1Ev>
        return uuid_;
   d62a4:	251c      	movs	r5, #28
            service.impl()->UUID() = event->services[i].uuid;
   d62a6:	6861      	ldr	r1, [r4, #4]
   d62a8:	9802      	ldr	r0, [sp, #8]
   d62aa:	4375      	muls	r5, r6
   d62ac:	4429      	add	r1, r5
   d62ae:	3104      	adds	r1, #4
   d62b0:	f7fe ffb3 	bl	d521a <_ZN8particle7BleUuidaSERK14hal_ble_uuid_t>
            service.impl()->startHandle() = event->services[i].start_handle;
   d62b4:	6863      	ldr	r3, [r4, #4]
        return impl_.get();
   d62b6:	9a02      	ldr	r2, [sp, #8]
   d62b8:	442b      	add	r3, r5
   d62ba:	a902      	add	r1, sp, #8
   d62bc:	8b1b      	ldrh	r3, [r3, #24]
   d62be:	8293      	strh	r3, [r2, #20]
            service.impl()->endHandle() = event->services[i].end_handle;
   d62c0:	6863      	ldr	r3, [r4, #4]
   d62c2:	441d      	add	r5, r3
   d62c4:	8b6b      	ldrh	r3, [r5, #26]
   d62c6:	82d3      	strh	r3, [r2, #22]
        return services_;
   d62c8:	6838      	ldr	r0, [r7, #0]
   d62ca:	f100 050c 	add.w	r5, r0, #12
   d62ce:	a804      	add	r0, sp, #16
   d62d0:	f7ff fcc0 	bl	d5c54 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
            if (!peer->impl()->services().append(service)) {
   d62d4:	4628      	mov	r0, r5
   d62d6:	a904      	add	r1, sp, #16
   d62d8:	f7ff ffa6 	bl	d6228 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d62dc:	4605      	mov	r5, r0
   d62de:	a805      	add	r0, sp, #20
   d62e0:	f7fd ff3d 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d62e4:	b955      	cbnz	r5, d62fc <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x78>
                LOG(ERROR, "Failed to append discovered service.");
   d62e6:	2320      	movs	r3, #32
   d62e8:	e9cd 3504 	strd	r3, r5, [sp, #16]
   d62ec:	f8cd 8000 	str.w	r8, [sp]
   d62f0:	462b      	mov	r3, r5
   d62f2:	aa04      	add	r2, sp, #16
   d62f4:	4649      	mov	r1, r9
   d62f6:	2032      	movs	r0, #50	; 0x32
   d62f8:	f7fe fcb0 	bl	d4c5c <log_message>
   d62fc:	a803      	add	r0, sp, #12
   d62fe:	f7fd ff2e 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   d6302:	3601      	adds	r6, #1
   d6304:	e7c8      	b.n	d6298 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x14>
    }
   d6306:	b00d      	add	sp, #52	; 0x34
   d6308:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d630c:	000d93a0 	.word	0x000d93a0
   d6310:	000d92dc 	.word	0x000d92dc

000d6314 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d6314:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d6316:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6318:	4604      	mov	r4, r0
   d631a:	460d      	mov	r5, r1
   d631c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d631e:	d914      	bls.n	d634a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d6320:	4290      	cmp	r0, r2
   d6322:	d213      	bcs.n	d634c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d6324:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d6328:	1a75      	subs	r5, r6, r1
   d632a:	f1a1 0708 	sub.w	r7, r1, #8
   d632e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d6330:	42b7      	cmp	r7, r6
   d6332:	d018      	beq.n	d6366 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d6334:	b11c      	cbz	r4, d633e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d6336:	4631      	mov	r1, r6
   d6338:	4620      	mov	r0, r4
   d633a:	f7ff fc7d 	bl	d5c38 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d633e:	1d30      	adds	r0, r6, #4
   d6340:	f7fd ff0d 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d6344:	3e08      	subs	r6, #8
   d6346:	3c08      	subs	r4, #8
   d6348:	e7f2      	b.n	d6330 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d634a:	d00c      	beq.n	d6366 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d634c:	42b5      	cmp	r5, r6
   d634e:	d00a      	beq.n	d6366 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d6350:	b11c      	cbz	r4, d635a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d6352:	4629      	mov	r1, r5
   d6354:	4620      	mov	r0, r4
   d6356:	f7ff fc6f 	bl	d5c38 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d635a:	1d28      	adds	r0, r5, #4
   d635c:	f7fd feff 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d6360:	3508      	adds	r5, #8
   d6362:	3408      	adds	r4, #8
   d6364:	e7f2      	b.n	d634c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d6366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6368 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   d6368:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d636a:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d636c:	4605      	mov	r5, r0
        if (n > 0) {
   d636e:	dd11      	ble.n	d6394 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   d6370:	00f0      	lsls	r0, r6, #3
   d6372:	f7fe fd2f 	bl	d4dd4 <malloc>
            if (!d) {
   d6376:	4604      	mov	r4, r0
   d6378:	b158      	cbz	r0, d6392 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d637a:	e9d5 1200 	ldrd	r1, r2, [r5]
   d637e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d6382:	f7ff ffc7 	bl	d6314 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d6386:	6828      	ldr	r0, [r5, #0]
   d6388:	f7fe fd2c 	bl	d4de4 <free>
        data_ = d;
   d638c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d638e:	60ae      	str	r6, [r5, #8]
        return true;
   d6390:	2001      	movs	r0, #1
    }
   d6392:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d6394:	2400      	movs	r4, #0
   d6396:	e7f6      	b.n	d6386 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000d6398 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d6398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d639c:	2300      	movs	r3, #0
   d639e:	e9c0 3300 	strd	r3, r3, [r0]
   d63a2:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d63a4:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d63a6:	6849      	ldr	r1, [r1, #4]
   d63a8:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d63aa:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d63ac:	dd13      	ble.n	d63d6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   d63ae:	f7ff ffdb 	bl	d6368 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d63b2:	b180      	cbz	r0, d63d6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d63b4:	e9d5 6300 	ldrd	r6, r3, [r5]
   d63b8:	6827      	ldr	r7, [r4, #0]
   d63ba:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   d63be:	45b0      	cmp	r8, r6
   d63c0:	d007      	beq.n	d63d2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   d63c2:	b11f      	cbz	r7, d63cc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   d63c4:	4631      	mov	r1, r6
   d63c6:	4638      	mov	r0, r7
   d63c8:	f7ff fc36 	bl	d5c38 <_ZN8particle17BleCharacteristicC1ERKS0_>
        for (; it != end; ++it, ++dest) {
   d63cc:	3608      	adds	r6, #8
   d63ce:	3708      	adds	r7, #8
   d63d0:	e7f5      	b.n	d63be <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   d63d2:	686b      	ldr	r3, [r5, #4]
   d63d4:	6063      	str	r3, [r4, #4]
}
   d63d6:	4620      	mov	r0, r4
   d63d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d63dc <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   d63dc:	b530      	push	{r4, r5, lr}
    if (!impl()->servicesDiscovered()) {
   d63de:	680b      	ldr	r3, [r1, #0]
   d63e0:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   d63e2:	b085      	sub	sp, #20
   d63e4:	4605      	mov	r5, r0
   d63e6:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   d63e8:	b92b      	cbnz	r3, d63f6 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x1a>
        discoverAllServices();
   d63ea:	a801      	add	r0, sp, #4
   d63ec:	f7ff ff08 	bl	d6200 <_ZN8particle13BlePeerDevice19discoverAllServicesEv>
   d63f0:	a801      	add	r0, sp, #4
   d63f2:	f7ff fc47 	bl	d5c84 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
    if (!impl()->characteristicsDiscovered()) {
   d63f6:	6823      	ldr	r3, [r4, #0]
   d63f8:	7adb      	ldrb	r3, [r3, #11]
   d63fa:	b93b      	cbnz	r3, d640c <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x30>
        if (discovery.discoverAllCharacteristics(*this) == SYSTEM_ERROR_NONE) {
   d63fc:	4621      	mov	r1, r4
   d63fe:	a801      	add	r0, sp, #4
   d6400:	f7ff fa2a 	bl	d5858 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE>
   d6404:	b910      	cbnz	r0, d640c <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x30>
        return impl_.get();
   d6406:	6823      	ldr	r3, [r4, #0]
            impl()->characteristicsDiscovered() = true;
   d6408:	2201      	movs	r2, #1
   d640a:	72da      	strb	r2, [r3, #11]
        return characteristics_;
   d640c:	6821      	ldr	r1, [r4, #0]
    return impl()->characteristics();
   d640e:	4628      	mov	r0, r5
   d6410:	3118      	adds	r1, #24
   d6412:	f7ff ffc1 	bl	d6398 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>
}
   d6416:	4628      	mov	r0, r5
   d6418:	b005      	add	sp, #20
   d641a:	bd30      	pop	{r4, r5, pc}

000d641c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>:
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   d641c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6420:	b091      	sub	sp, #68	; 0x44
   d6422:	4605      	mov	r5, r0
   d6424:	460f      	mov	r7, r1
    return address_;
   d6426:	6808      	ldr	r0, [r1, #0]
   d6428:	6849      	ldr	r1, [r1, #4]
    connCfg.conn_params = params;
   d642a:	9205      	str	r2, [sp, #20]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   d642c:	4698      	mov	r8, r3
    connCfg.version = BLE_API_VERSION;
   d642e:	4b38      	ldr	r3, [pc, #224]	; (d6510 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xf4>)
   d6430:	9302      	str	r3, [sp, #8]
    hal_ble_conn_cfg_t connCfg = {};
   d6432:	f04f 0900 	mov.w	r9, #0
    connCfg.address = addr.halAddress();
   d6436:	ab03      	add	r3, sp, #12
    return address_;
   d6438:	ac08      	add	r4, sp, #32
   d643a:	c403      	stmia	r4!, {r0, r1}
    connCfg.address = addr.halAddress();
   d643c:	e883 0003 	stmia.w	r3, {r0, r1}
    hal_ble_conn_cfg_t connCfg = {};
   d6440:	e9cd 9906 	strd	r9, r9, [sp, #24]
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
   d6444:	f7ff fb24 	bl	d5a90 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d6448:	4b32      	ldr	r3, [pc, #200]	; (d6514 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xf8>)
   d644a:	9306      	str	r3, [sp, #24]
    connCfg.context = BleLocalDevice::getInstance().impl();
   d644c:	f7ff fb20 	bl	d5a90 <_ZN8particle14BleLocalDevice11getInstanceEv>
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   d6450:	6829      	ldr	r1, [r5, #0]
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d6452:	6803      	ldr	r3, [r0, #0]
    connCfg.context = BleLocalDevice::getInstance().impl();
   d6454:	9307      	str	r3, [sp, #28]
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   d6456:	464a      	mov	r2, r9
   d6458:	a802      	add	r0, sp, #8
   d645a:	f7fe fadb 	bl	d4a14 <hal_ble_gap_connect>
    connCfg.address = addr.halAddress();
   d645e:	ae08      	add	r6, sp, #32
    if (ret != SYSTEM_ERROR_NONE) {
   d6460:	4604      	mov	r4, r0
   d6462:	b138      	cbz	r0, d6474 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x58>
   d6464:	682b      	ldr	r3, [r5, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d6466:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d646a:	801a      	strh	r2, [r3, #0]
}
   d646c:	4620      	mov	r0, r4
   d646e:	b011      	add	sp, #68	; 0x44
   d6470:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bind(addr);
   d6474:	4639      	mov	r1, r7
   d6476:	4628      	mov	r0, r5
   d6478:	f7ff fab2 	bl	d59e0 <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   d647c:	f7ff fb08 	bl	d5a90 <_ZN8particle14BleLocalDevice11getInstanceEv>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6480:	4629      	mov	r1, r5
        return peers_;
   d6482:	6807      	ldr	r7, [r0, #0]
   d6484:	f851 3b04 	ldr.w	r3, [r1], #4
   d6488:	9308      	str	r3, [sp, #32]
   d648a:	3718      	adds	r7, #24
   d648c:	a809      	add	r0, sp, #36	; 0x24
   d648e:	f7ff fbcc 	bl	d5c2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   d6492:	4631      	mov	r1, r6
   d6494:	4638      	mov	r0, r7
   d6496:	f7ff fcec 	bl	d5e72 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d649a:	4607      	mov	r7, r0
      ~__shared_ptr() = default;
   d649c:	a809      	add	r0, sp, #36	; 0x24
   d649e:	f7fd fe5e 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d64a2:	2320      	movs	r3, #32
        LOG(ERROR, "Cannot add new peer device.");
   d64a4:	e9cd 3408 	strd	r3, r4, [sp, #32]
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   d64a8:	b997      	cbnz	r7, d64d0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xb4>
        LOG(ERROR, "Cannot add new peer device.");
   d64aa:	4b1b      	ldr	r3, [pc, #108]	; (d6518 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xfc>)
   d64ac:	491b      	ldr	r1, [pc, #108]	; (d651c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x100>)
   d64ae:	9300      	str	r3, [sp, #0]
   d64b0:	4632      	mov	r2, r6
   d64b2:	4623      	mov	r3, r4
   d64b4:	2032      	movs	r0, #50	; 0x32
   d64b6:	f7fe fbd1 	bl	d4c5c <log_message>
        hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   d64ba:	682b      	ldr	r3, [r5, #0]
   d64bc:	4621      	mov	r1, r4
   d64be:	8818      	ldrh	r0, [r3, #0]
        return SYSTEM_ERROR_NO_MEMORY;
   d64c0:	4c17      	ldr	r4, [pc, #92]	; (d6520 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x104>)
        hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   d64c2:	f7fe fa57 	bl	d4974 <hal_ble_gap_disconnect>
   d64c6:	682b      	ldr	r3, [r5, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d64c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d64cc:	801a      	strh	r2, [r3, #0]
        return SYSTEM_ERROR_NO_MEMORY;
   d64ce:	e7cd      	b.n	d646c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
    LOG(TRACE, "New peripheral is connected.");
   d64d0:	4b14      	ldr	r3, [pc, #80]	; (d6524 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x108>)
   d64d2:	9300      	str	r3, [sp, #0]
   d64d4:	4911      	ldr	r1, [pc, #68]	; (d651c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x100>)
   d64d6:	4623      	mov	r3, r4
   d64d8:	4632      	mov	r2, r6
   d64da:	2001      	movs	r0, #1
   d64dc:	f7fe fbbe 	bl	d4c5c <log_message>
    if (automatic) {
   d64e0:	f1b8 0f00 	cmp.w	r8, #0
   d64e4:	d0c2      	beq.n	d646c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   d64e6:	4629      	mov	r1, r5
   d64e8:	4630      	mov	r0, r6
   d64ea:	f7ff ff77 	bl	d63dc <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>
    return data_ + size_;
   d64ee:	e9dd 5308 	ldrd	r5, r3, [sp, #32]
   d64f2:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (auto& characteristic : characteristics) {
   d64f6:	42af      	cmp	r7, r5
   d64f8:	d005      	beq.n	d6506 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xea>
            characteristic.subscribe(true);
   d64fa:	4628      	mov	r0, r5
   d64fc:	2101      	movs	r1, #1
   d64fe:	f7ff f92f 	bl	d5760 <_ZNK8particle17BleCharacteristic9subscribeEb>
        for (auto& characteristic : characteristics) {
   d6502:	3508      	adds	r5, #8
   d6504:	e7f7      	b.n	d64f6 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xda>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   d6506:	4630      	mov	r0, r6
   d6508:	f7ff fbce 	bl	d5ca8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d650c:	e7ae      	b.n	d646c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
   d650e:	bf00      	nop
   d6510:	00180001 	.word	0x00180001
   d6514:	000d5ef1 	.word	0x000d5ef1
   d6518:	000d93c5 	.word	0x000d93c5
   d651c:	000d92dc 	.word	0x000d92dc
   d6520:	fffffefc 	.word	0xfffffefc
   d6524:	000d93e1 	.word	0x000d93e1

000d6528 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>:
    BlePeerDevice peer;
    peer.connect(addr, interval, latency, timeout, automatic);
    return peer;
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
   d6528:	b513      	push	{r0, r1, r4, lr}
   d652a:	4604      	mov	r4, r0
   d652c:	e9cd 3200 	strd	r3, r2, [sp]
    BlePeerDevice peer;
   d6530:	f7ff f9fe 	bl	d5930 <_ZN8particle13BlePeerDeviceC1Ev>
    peer.connect(addr, params, automatic);
   d6534:	9b00      	ldr	r3, [sp, #0]
   d6536:	9901      	ldr	r1, [sp, #4]
   d6538:	2200      	movs	r2, #0
   d653a:	4620      	mov	r0, r4
   d653c:	f7ff ff6e 	bl	d641c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    return connect(addr, nullptr, automatic);
}
   d6540:	4620      	mov	r0, r4
   d6542:	b002      	add	sp, #8
   d6544:	bd10      	pop	{r4, pc}

000d6546 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d6546:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6548:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d654a:	6845      	ldr	r5, [r0, #4]
   d654c:	4668      	mov	r0, sp
   d654e:	f7ff fb73 	bl	d5c38 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6552:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   d6556:	4299      	cmp	r1, r3
   d6558:	da10      	bge.n	d657c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   d655a:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d655c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d655e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d6562:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d6566:	4629      	mov	r1, r5
   d6568:	f105 0008 	add.w	r0, r5, #8
   d656c:	f7ff fed2 	bl	d6314 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d6570:	b98d      	cbnz	r5, d6596 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   d6572:	6863      	ldr	r3, [r4, #4]
   d6574:	3301      	adds	r3, #1
   d6576:	6063      	str	r3, [r4, #4]
    return true;
   d6578:	2601      	movs	r6, #1
   d657a:	e006      	b.n	d658a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d657c:	3101      	adds	r1, #1
   d657e:	4620      	mov	r0, r4
   d6580:	f7ff fef2 	bl	d6368 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d6584:	4606      	mov	r6, r0
   d6586:	2800      	cmp	r0, #0
   d6588:	d1e7      	bne.n	d655a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   d658a:	a801      	add	r0, sp, #4
   d658c:	f7fd fde7 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6590:	4630      	mov	r0, r6
   d6592:	b002      	add	sp, #8
   d6594:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   d6596:	4669      	mov	r1, sp
   d6598:	4628      	mov	r0, r5
   d659a:	f7ff fb4d 	bl	d5c38 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d659e:	e7e8      	b.n	d6572 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000d65a0 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv>:
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   d65a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
                LOG(ERROR, "Failed to append discovered characteristic.");
   d65a4:	f8df 8104 	ldr.w	r8, [pc, #260]	; d66ac <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x10c>
   d65a8:	f8df 9104 	ldr.w	r9, [pc, #260]	; d66b0 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x110>
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   d65ac:	b08d      	sub	sp, #52	; 0x34
   d65ae:	4604      	mov	r4, r0
   d65b0:	460f      	mov	r7, r1
        for (size_t i = 0; i < event->count; i++) {
   d65b2:	2600      	movs	r6, #0
   d65b4:	6823      	ldr	r3, [r4, #0]
   d65b6:	42b3      	cmp	r3, r6
   d65b8:	d975      	bls.n	d66a6 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x106>
            BleCharacteristic characteristic;
   d65ba:	a802      	add	r0, sp, #8
   d65bc:	f7ff f844 	bl	d5648 <_ZN8particle17BleCharacteristicC1Ev>
            characteristic.impl()->connHandle() = event->conn_handle;
   d65c0:	9b02      	ldr	r3, [sp, #8]
   d65c2:	8922      	ldrh	r2, [r4, #8]
   d65c4:	805a      	strh	r2, [r3, #2]
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   d65c6:	6863      	ldr	r3, [r4, #4]
   d65c8:	9802      	ldr	r0, [sp, #8]
inline particle::EnumFlags<T> particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::operator|(const EnumFlags<T>& flags) const {
    return EnumFlags<T>(value_ | flags.value_);
}

template<typename T>
inline particle::EnumFlags<T>& particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::operator|=(const EnumFlags<T>& flags) {
   d65ca:	252a      	movs	r5, #42	; 0x2a
   d65cc:	4375      	muls	r5, r6
   d65ce:	442b      	add	r3, r5
            characteristic.impl()->charUUID() = event->characteristics[i].uuid;
   d65d0:	3014      	adds	r0, #20
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   d65d2:	7e5b      	ldrb	r3, [r3, #25]
   d65d4:	f013 0f02 	tst.w	r3, #2
    value_ |= flags.value_;
   d65d8:	bf1e      	ittt	ne
   d65da:	f810 3c10 	ldrbne.w	r3, [r0, #-16]
   d65de:	f043 0302 	orrne.w	r3, r3, #2
   d65e2:	f800 3c10 	strbne.w	r3, [r0, #-16]
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE_WO_RESP) {
   d65e6:	6863      	ldr	r3, [r4, #4]
   d65e8:	442b      	add	r3, r5
   d65ea:	7e5b      	ldrb	r3, [r3, #25]
   d65ec:	075b      	lsls	r3, r3, #29
   d65ee:	bf42      	ittt	mi
   d65f0:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d65f4:	f043 0304 	orrmi.w	r3, r3, #4
   d65f8:	f800 3c10 	strbmi.w	r3, [r0, #-16]
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE) {
   d65fc:	6863      	ldr	r3, [r4, #4]
   d65fe:	442b      	add	r3, r5
   d6600:	7e5b      	ldrb	r3, [r3, #25]
   d6602:	0719      	lsls	r1, r3, #28
   d6604:	bf42      	ittt	mi
   d6606:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d660a:	f043 0308 	orrmi.w	r3, r3, #8
   d660e:	f800 3c10 	strbmi.w	r3, [r0, #-16]
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_NOTIFY) {
   d6612:	6863      	ldr	r3, [r4, #4]
   d6614:	442b      	add	r3, r5
   d6616:	7e5b      	ldrb	r3, [r3, #25]
   d6618:	06da      	lsls	r2, r3, #27
   d661a:	bf42      	ittt	mi
   d661c:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d6620:	f043 0310 	orrmi.w	r3, r3, #16
   d6624:	f800 3c10 	strbmi.w	r3, [r0, #-16]
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
   d6628:	6863      	ldr	r3, [r4, #4]
   d662a:	442b      	add	r3, r5
   d662c:	7e5b      	ldrb	r3, [r3, #25]
   d662e:	069b      	lsls	r3, r3, #26
   d6630:	bf42      	ittt	mi
   d6632:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d6636:	f043 0320 	orrmi.w	r3, r3, #32
   d663a:	f800 3c10 	strbmi.w	r3, [r0, #-16]
            characteristic.impl()->charUUID() = event->characteristics[i].uuid;
   d663e:	6861      	ldr	r1, [r4, #4]
   d6640:	4429      	add	r1, r5
   d6642:	3104      	adds	r1, #4
   d6644:	f7fe fde9 	bl	d521a <_ZN8particle7BleUuidaSERK14hal_ble_uuid_t>
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   d6648:	6863      	ldr	r3, [r4, #4]
        return impl_.get();
   d664a:	9a02      	ldr	r2, [sp, #8]
   d664c:	441d      	add	r5, r3
            if (!peer->impl()->characteristics().append(characteristic)) {
   d664e:	a902      	add	r1, sp, #8
        this->size = halHandles.size;
   d6650:	8beb      	ldrh	r3, [r5, #30]
   d6652:	8113      	strh	r3, [r2, #8]
        this->decl_handle = halHandles.decl_handle;
   d6654:	8c2b      	ldrh	r3, [r5, #32]
   d6656:	8153      	strh	r3, [r2, #10]
        this->value_handle = halHandles.value_handle;
   d6658:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   d665a:	8193      	strh	r3, [r2, #12]
        this->user_desc_handle = halHandles.user_desc_handle;
   d665c:	8cab      	ldrh	r3, [r5, #36]	; 0x24
   d665e:	81d3      	strh	r3, [r2, #14]
        this->cccd_handle = halHandles.cccd_handle;
   d6660:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
   d6662:	8213      	strh	r3, [r2, #16]
        this->sccd_handle = halHandles.sccd_handle;
   d6664:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
   d6666:	8253      	strh	r3, [r2, #18]
        return characteristics_;
   d6668:	6838      	ldr	r0, [r7, #0]
   d666a:	f100 0518 	add.w	r5, r0, #24
            if (!peer->impl()->characteristics().append(characteristic)) {
   d666e:	a804      	add	r0, sp, #16
   d6670:	f7ff fae2 	bl	d5c38 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6674:	4628      	mov	r0, r5
   d6676:	a904      	add	r1, sp, #16
   d6678:	f7ff ff65 	bl	d6546 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d667c:	4605      	mov	r5, r0
   d667e:	a805      	add	r0, sp, #20
   d6680:	f7fd fd6d 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6684:	b955      	cbnz	r5, d669c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0xfc>
                LOG(ERROR, "Failed to append discovered characteristic.");
   d6686:	2320      	movs	r3, #32
   d6688:	e9cd 3504 	strd	r3, r5, [sp, #16]
   d668c:	f8cd 8000 	str.w	r8, [sp]
   d6690:	462b      	mov	r3, r5
   d6692:	aa04      	add	r2, sp, #16
   d6694:	4649      	mov	r1, r9
   d6696:	2032      	movs	r0, #50	; 0x32
   d6698:	f7fe fae0 	bl	d4c5c <log_message>
   d669c:	a803      	add	r0, sp, #12
   d669e:	f7fd fd5e 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   d66a2:	3601      	adds	r6, #1
   d66a4:	e786      	b.n	d65b4 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x14>
    }
   d66a6:	b00d      	add	sp, #52	; 0x34
   d66a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d66ac:	000d93fe 	.word	0x000d93fe
   d66b0:	000d92dc 	.word	0x000d92dc

000d66b4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        p.disconnect();
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d66b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d66b8:	4616      	mov	r6, r2
   d66ba:	b0a1      	sub	sp, #132	; 0x84
   d66bc:	4680      	mov	r8, r0
    WiringBleLock lk;
   d66be:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d66c0:	460d      	mov	r5, r1
    WiringBleLock lk;
   d66c2:	f7fe fca7 	bl	d5014 <_ZN8particle3ble13WiringBleLockC1Ev>
        return impl_.get();
   d66c6:	6834      	ldr	r4, [r6, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   d66c8:	7923      	ldrb	r3, [r4, #4]
   d66ca:	b953      	cbnz	r3, d66e2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   d66cc:	4631      	mov	r1, r6
   d66ce:	4640      	mov	r0, r8
   d66d0:	f7ff fab2 	bl	d5c38 <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   d66d4:	a80a      	add	r0, sp, #40	; 0x28
   d66d6:	f7fe fcab 	bl	d5030 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   d66da:	4640      	mov	r0, r8
   d66dc:	b021      	add	sp, #132	; 0x84
   d66de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d66e2:	682b      	ldr	r3, [r5, #0]
    return data_ + size_;
   d66e4:	e9d3 7303 	ldrd	r7, r3, [r3, #12]
   d66e8:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
   d66ec:	9303      	str	r3, [sp, #12]
   d66ee:	f104 0928 	add.w	r9, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   d66f2:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   d66f6:	9b03      	ldr	r3, [sp, #12]
   d66f8:	429f      	cmp	r7, r3
   d66fa:	d021      	beq.n	d6740 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   d66fc:	f8d7 a000 	ldr.w	sl, [r7]
        if (charUuid_ == impl.charUuid_ &&
   d6700:	4658      	mov	r0, fp
   d6702:	f10a 0114 	add.w	r1, sl, #20
   d6706:	f7fe fd94 	bl	d5232 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   d670a:	b1b8      	cbz	r0, d673c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   d670c:	f10a 0128 	add.w	r1, sl, #40	; 0x28
   d6710:	4648      	mov	r0, r9
   d6712:	f7fe fd8e 	bl	d5232 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   d6716:	b188      	cbz	r0, d673c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   d6718:	6823      	ldr	r3, [r4, #0]
   d671a:	f8da 2000 	ldr.w	r2, [sl]
   d671e:	4053      	eors	r3, r2
   d6720:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   d6724:	d10a      	bne.n	d673c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d6726:	2220      	movs	r2, #32
   d6728:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   d672c:	4a58      	ldr	r2, [pc, #352]	; (d6890 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1dc>)
   d672e:	9200      	str	r2, [sp, #0]
   d6730:	aa15      	add	r2, sp, #84	; 0x54
   d6732:	4958      	ldr	r1, [pc, #352]	; (d6894 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e0>)
   d6734:	2032      	movs	r0, #50	; 0x32
   d6736:	f7fe fa91 	bl	d4c5c <log_message>
   d673a:	e7c7      	b.n	d66cc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   d673c:	3708      	adds	r7, #8
   d673e:	e7da      	b.n	d66f6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   d6740:	4648      	mov	r0, r9
   d6742:	f7fe fd0f 	bl	d5164 <_ZNK8particle7BleUuid7isValidEv>
   d6746:	b918      	cbnz	r0, d6750 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x9c>
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
   d6748:	4953      	ldr	r1, [pc, #332]	; (d6898 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e4>)
   d674a:	4648      	mov	r0, r9
   d674c:	f7fe fd4c 	bl	d51e8 <_ZN8particle7BleUuidaSEPKh>
   d6750:	682b      	ldr	r3, [r5, #0]
   d6752:	e9d3 7300 	ldrd	r7, r3, [r3]
   d6756:	eb07 0bc3 	add.w	fp, r7, r3, lsl #3
    for (auto& svc : impl()->services()) {
   d675a:	455f      	cmp	r7, fp
   d675c:	46ba      	mov	sl, r7
        BleService svc(charImpl->svcUUID());
   d675e:	4649      	mov	r1, r9
    for (auto& svc : impl()->services()) {
   d6760:	d06a      	beq.n	d6838 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x184>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   d6762:	f857 0b08 	ldr.w	r0, [r7], #8
   d6766:	f7fe fd64 	bl	d5232 <_ZNK8particle7BleUuideqERKS0_>
   d676a:	2800      	cmp	r0, #0
   d676c:	d0f5      	beq.n	d675a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xa6>
        if (!charUuid_.isValid()) {
   d676e:	f104 0714 	add.w	r7, r4, #20
   d6772:	4638      	mov	r0, r7
   d6774:	f7fe fcf6 	bl	d5164 <_ZNK8particle7BleUuid7isValidEv>
   d6778:	b968      	cbnz	r0, d6796 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xe2>
            defaultUuidCharCount_++;
   d677a:	4b48      	ldr	r3, [pc, #288]	; (d689c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e8>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d677c:	4946      	ldr	r1, [pc, #280]	; (d6898 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e4>)
            defaultUuidCharCount_++;
   d677e:	881a      	ldrh	r2, [r3, #0]
   d6780:	3201      	adds	r2, #1
   d6782:	b292      	uxth	r2, r2
   d6784:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d6786:	a815      	add	r0, sp, #84	; 0x54
   d6788:	2301      	movs	r3, #1
   d678a:	f7fe fce1 	bl	d5150 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   d678e:	a915      	add	r1, sp, #84	; 0x54
   d6790:	4638      	mov	r0, r7
   d6792:	f7fe fd1c 	bl	d51ce <_ZN8particle7BleUuidaSERKS0_>
    hal_ble_char_init_t charInit = {};
   d6796:	2228      	movs	r2, #40	; 0x28
   d6798:	2100      	movs	r1, #0
   d679a:	a816      	add	r0, sp, #88	; 0x58
   d679c:	f002 fb6e 	bl	d8e7c <memset>
    charInit.version = BLE_API_VERSION;
   d67a0:	4b3f      	ldr	r3, [pc, #252]	; (d68a0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1ec>)
   d67a2:	9315      	str	r3, [sp, #84]	; 0x54
    charInit.uuid = charImpl->charUUID().halUUID();
   d67a4:	4639      	mov	r1, r7
   d67a6:	a804      	add	r0, sp, #16
   d67a8:	f7fe fcee 	bl	d5188 <_ZN8particle7BleUuid7halUUIDEv>
   d67ac:	ab04      	add	r3, sp, #16
   d67ae:	aa18      	add	r2, sp, #96	; 0x60
   d67b0:	f10d 0c20 	add.w	ip, sp, #32
   d67b4:	6818      	ldr	r0, [r3, #0]
   d67b6:	6859      	ldr	r1, [r3, #4]
   d67b8:	4617      	mov	r7, r2
   d67ba:	c703      	stmia	r7!, {r0, r1}
   d67bc:	3308      	adds	r3, #8
   d67be:	4563      	cmp	r3, ip
   d67c0:	463a      	mov	r2, r7
   d67c2:	d1f7      	bne.n	d67b4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x100>
   d67c4:	6818      	ldr	r0, [r3, #0]
   d67c6:	6038      	str	r0, [r7, #0]
    charInit.properties = charImpl->properties().value();
   d67c8:	7923      	ldrb	r3, [r4, #4]
   d67ca:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   d67ce:	f8da 3000 	ldr.w	r3, [sl]
   d67d2:	8a9b      	ldrh	r3, [r3, #20]
   d67d4:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   d67d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d67da:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   d67dc:	4b31      	ldr	r3, [pc, #196]	; (d68a4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f0>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d67de:	2200      	movs	r2, #0
   d67e0:	1da1      	adds	r1, r4, #6
   d67e2:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   d67e4:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d67e8:	f7fe f91e 	bl	d4a28 <hal_ble_gatt_server_add_characteristic>
   d67ec:	2800      	cmp	r0, #0
   d67ee:	f47f af6d 	bne.w	d66cc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    charImpl->local() = true;
   d67f2:	2301      	movs	r3, #1
   d67f4:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   d67f6:	682c      	ldr	r4, [r5, #0]
    if(!impl()->characteristics().append(characteristic)) {
   d67f8:	4631      	mov	r1, r6
        return characteristics_;
   d67fa:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   d67fc:	a80d      	add	r0, sp, #52	; 0x34
   d67fe:	f7ff fa1b 	bl	d5c38 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6802:	4620      	mov	r0, r4
   d6804:	a90d      	add	r1, sp, #52	; 0x34
   d6806:	f7ff fe9e 	bl	d6546 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d680a:	4604      	mov	r4, r0
   d680c:	a80e      	add	r0, sp, #56	; 0x38
   d680e:	f7fd fca6 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6812:	2c00      	cmp	r4, #0
   d6814:	f47f af5a 	bne.w	d66cc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   d6818:	2320      	movs	r3, #32
   d681a:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   d681e:	4b22      	ldr	r3, [pc, #136]	; (d68a8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   d6820:	9300      	str	r3, [sp, #0]
   d6822:	aa0d      	add	r2, sp, #52	; 0x34
   d6824:	4623      	mov	r3, r4
   d6826:	e784      	b.n	d6732 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   d6828:	4631      	mov	r1, r6
   d682a:	4640      	mov	r0, r8
   d682c:	f7ff fa04 	bl	d5c38 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d6830:	a80c      	add	r0, sp, #48	; 0x30
   d6832:	f7fd fc94 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6836:	e74d      	b.n	d66d4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   d6838:	a80b      	add	r0, sp, #44	; 0x2c
   d683a:	f7fe ffe9 	bl	d5810 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   d683e:	4649      	mov	r1, r9
   d6840:	a815      	add	r0, sp, #84	; 0x54
   d6842:	f7fe fca1 	bl	d5188 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   d6846:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d6848:	2300      	movs	r3, #0
   d684a:	3214      	adds	r2, #20
   d684c:	a915      	add	r1, sp, #84	; 0x54
   d684e:	2001      	movs	r0, #1
   d6850:	f7fe f89a 	bl	d4988 <hal_ble_gatt_server_add_service>
   d6854:	2800      	cmp	r0, #0
   d6856:	d1e7      	bne.n	d6828 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x174>
        return services_;
   d6858:	682f      	ldr	r7, [r5, #0]
   d685a:	a90b      	add	r1, sp, #44	; 0x2c
   d685c:	a80d      	add	r0, sp, #52	; 0x34
   d685e:	f7ff f9f9 	bl	d5c54 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   d6862:	4638      	mov	r0, r7
   d6864:	a90d      	add	r1, sp, #52	; 0x34
   d6866:	f7ff fcdf 	bl	d6228 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d686a:	4607      	mov	r7, r0
   d686c:	a80e      	add	r0, sp, #56	; 0x38
   d686e:	f7fd fc76 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6872:	2f00      	cmp	r7, #0
   d6874:	d0d8      	beq.n	d6828 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x174>
   d6876:	682a      	ldr	r2, [r5, #0]
    return data_[size_ - 1];
   d6878:	6853      	ldr	r3, [r2, #4]
   d687a:	6812      	ldr	r2, [r2, #0]
   d687c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   d6880:	3b01      	subs	r3, #1
   d6882:	a80c      	add	r0, sp, #48	; 0x30
   d6884:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
   d6888:	f7fd fc69 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d688c:	e76f      	b.n	d676e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xba>
   d688e:	bf00      	nop
   d6890:	000d942a 	.word	0x000d942a
   d6894:	000d92dc 	.word	0x000d92dc
   d6898:	000d94e8 	.word	0x000d94e8
   d689c:	2003e62c 	.word	0x2003e62c
   d68a0:	002c0001 	.word	0x002c0001
   d68a4:	000d5ad1 	.word	0x000d5ad1
   d68a8:	000d9455 	.word	0x000d9455

000d68ac <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d68ac:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d68ae:	4c06      	ldr	r4, [pc, #24]	; (d68c8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d68b0:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d68b2:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d68b4:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d68b6:	f7fe f8e9 	bl	d4a8c <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d68ba:	4620      	mov	r0, r4
   d68bc:	4a03      	ldr	r2, [pc, #12]	; (d68cc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d68be:	4904      	ldr	r1, [pc, #16]	; (d68d0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d68c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d68c4:	f002 b978 	b.w	d8bb8 <__aeabi_atexit>
   d68c8:	2003e630 	.word	0x2003e630
   d68cc:	2003dee8 	.word	0x2003dee8
   d68d0:	000d4f39 	.word	0x000d4f39

000d68d4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d68d4:	4770      	bx	lr

000d68d6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d68d6:	2000      	movs	r0, #0
   d68d8:	4770      	bx	lr

000d68da <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d68da:	b510      	push	{r4, lr}
   d68dc:	2110      	movs	r1, #16
   d68de:	4604      	mov	r4, r0
   d68e0:	f002 f96f 	bl	d8bc2 <_ZdlPvj>
   d68e4:	4620      	mov	r0, r4
   d68e6:	bd10      	pop	{r4, pc}

000d68e8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d68e8:	b508      	push	{r3, lr}
      { delete this; }
   d68ea:	f7ff fff6 	bl	d68da <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d68ee:	bd08      	pop	{r3, pc}

000d68f0 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d68f0:	b510      	push	{r4, lr}
      if (_M_manager)
   d68f2:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d68f4:	4604      	mov	r4, r0
      if (_M_manager)
   d68f6:	b113      	cbz	r3, d68fe <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d68f8:	2203      	movs	r2, #3
   d68fa:	4601      	mov	r1, r0
   d68fc:	4798      	blx	r3
    }
   d68fe:	4620      	mov	r0, r4
   d6900:	bd10      	pop	{r4, pc}

000d6902 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d6902:	b530      	push	{r4, r5, lr}
        type_(type) {
   d6904:	2200      	movs	r2, #0
   d6906:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d690a:	6002      	str	r2, [r0, #0]
   d690c:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d690e:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d6910:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d6912:	680c      	ldr	r4, [r1, #0]
   d6914:	8085      	strh	r5, [r0, #4]
   d6916:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6918:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d691a:	bd30      	pop	{r4, r5, pc}

000d691c <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d691c:	b510      	push	{r4, lr}
   d691e:	4604      	mov	r4, r0
    free((void*)msg_);
   d6920:	6800      	ldr	r0, [r0, #0]
   d6922:	f7fe fa5f 	bl	d4de4 <free>
}
   d6926:	4620      	mov	r0, r4
   d6928:	bd10      	pop	{r4, pc}

000d692a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d692a:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d692c:	68c4      	ldr	r4, [r0, #12]
   d692e:	b1f4      	cbz	r4, d696e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d6930:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d6932:	2b02      	cmp	r3, #2
   d6934:	d103      	bne.n	d693e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d6936:	f104 000c 	add.w	r0, r4, #12
   d693a:	f7ff ffef 	bl	d691c <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d693e:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d6940:	b135      	cbz	r5, d6950 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d6942:	4628      	mov	r0, r5
   d6944:	f7ff ffd4 	bl	d68f0 <_ZNSt14_Function_baseD1Ev>
   d6948:	2110      	movs	r1, #16
   d694a:	4628      	mov	r0, r5
   d694c:	f002 f939 	bl	d8bc2 <_ZdlPvj>
   d6950:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d6952:	b135      	cbz	r5, d6962 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d6954:	4628      	mov	r0, r5
   d6956:	f7ff ffcb 	bl	d68f0 <_ZNSt14_Function_baseD1Ev>
   d695a:	2110      	movs	r1, #16
   d695c:	4628      	mov	r0, r5
   d695e:	f002 f930 	bl	d8bc2 <_ZdlPvj>
   d6962:	4620      	mov	r0, r4
   d6964:	2114      	movs	r1, #20
   d6966:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d696a:	f002 b92a 	b.w	d8bc2 <_ZdlPvj>
   d696e:	bd38      	pop	{r3, r4, r5, pc}

000d6970 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d6970:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6972:	460e      	mov	r6, r1
   d6974:	4604      	mov	r4, r0
   d6976:	f856 3b04 	ldr.w	r3, [r6], #4
   d697a:	9300      	str	r3, [sp, #0]
   d697c:	460d      	mov	r5, r1
   d697e:	a801      	add	r0, sp, #4
   d6980:	4631      	mov	r1, r6
   d6982:	f7ff f952 	bl	d5c2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6986:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6988:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d698a:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d698c:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d698e:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d6990:	2300      	movs	r3, #0
   d6992:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   d6994:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d6996:	f7fd fbe2 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d699a:	4630      	mov	r0, r6
   d699c:	f7fd fbdf 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d69a0:	4628      	mov	r0, r5
   d69a2:	2108      	movs	r1, #8
   d69a4:	f002 f90d 	bl	d8bc2 <_ZdlPvj>
        return p;
    }
   d69a8:	4620      	mov	r0, r4
   d69aa:	b002      	add	sp, #8
   d69ac:	bd70      	pop	{r4, r5, r6, pc}

000d69ae <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d69ae:	b513      	push	{r0, r1, r4, lr}
   d69b0:	460b      	mov	r3, r1
   d69b2:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d69b4:	e9d0 0100 	ldrd	r0, r1, [r0]
   d69b8:	466c      	mov	r4, sp
   d69ba:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d69be:	e893 0003 	ldmia.w	r3, {r0, r1}
   d69c2:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d69c6:	e894 0003 	ldmia.w	r4, {r0, r1}
   d69ca:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d69ce:	b002      	add	sp, #8
   d69d0:	bd10      	pop	{r4, pc}

000d69d2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d69d2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d69d4:	b510      	push	{r4, lr}
      if (_M_empty())
   d69d6:	b90a      	cbnz	r2, d69dc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d69d8:	f002 f8f7 	bl	d8bca <_ZSt25__throw_bad_function_callv>
    }
   d69dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d69e0:	68c3      	ldr	r3, [r0, #12]
   d69e2:	4718      	bx	r3

000d69e4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d69e4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d69e6:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d69e8:	f100 0110 	add.w	r1, r0, #16
   d69ec:	f7ff fff1 	bl	d69d2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d69f0:	bd08      	pop	{r3, pc}

000d69f2 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d69f2:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d69f4:	b510      	push	{r4, lr}
      if (_M_empty())
   d69f6:	b90a      	cbnz	r2, d69fc <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d69f8:	f002 f8e7 	bl	d8bca <_ZSt25__throw_bad_function_callv>
    }
   d69fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6a00:	68c3      	ldr	r3, [r0, #12]
   d6a02:	4718      	bx	r3

000d6a04 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6a04:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d6a06:	6800      	ldr	r0, [r0, #0]
   d6a08:	f100 0110 	add.w	r1, r0, #16
   d6a0c:	f7ff fff1 	bl	d69f2 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d6a10:	bd08      	pop	{r3, pc}
	...

000d6a14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d6a14:	b538      	push	{r3, r4, r5, lr}
   d6a16:	2300      	movs	r3, #0
   d6a18:	4604      	mov	r4, r0
   d6a1a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6a1c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d6a1e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6a20:	f7fd fb37 	bl	d4092 <_Znwj>
   d6a24:	b128      	cbz	r0, d6a32 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d6a26:	2301      	movs	r3, #1
   d6a28:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d6a2c:	4b02      	ldr	r3, [pc, #8]	; (d6a38 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d6a2e:	6003      	str	r3, [r0, #0]
   d6a30:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6a32:	6020      	str	r0, [r4, #0]
	}
   d6a34:	4620      	mov	r0, r4
   d6a36:	bd38      	pop	{r3, r4, r5, pc}
   d6a38:	000d9510 	.word	0x000d9510

000d6a3c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d6a3c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d6a3e:	2300      	movs	r3, #0
   d6a40:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d6a42:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d6a44:	4604      	mov	r4, r0
   d6a46:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d6a48:	b12b      	cbz	r3, d6a56 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6a4a:	2202      	movs	r2, #2
   d6a4c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6a4e:	68eb      	ldr	r3, [r5, #12]
   d6a50:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6a52:	68ab      	ldr	r3, [r5, #8]
   d6a54:	60a3      	str	r3, [r4, #8]
    }
   d6a56:	4620      	mov	r0, r4
   d6a58:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6a5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d6a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6a5e:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6a60:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d6a62:	4668      	mov	r0, sp
   d6a64:	f7ff ff4d 	bl	d6902 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d6a68:	f04f 0302 	mov.w	r3, #2
   d6a6c:	e8d4 2f4f 	ldrexb	r2, [r4]
   d6a70:	2a00      	cmp	r2, #0
   d6a72:	d103      	bne.n	d6a7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d6a74:	e8c4 3f41 	strexb	r1, r3, [r4]
   d6a78:	2900      	cmp	r1, #0
   d6a7a:	d1f7      	bne.n	d6a6c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d6a7c:	d125      	bne.n	d6aca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d6a7e:	f104 050c 	add.w	r5, r4, #12
   d6a82:	4669      	mov	r1, sp
   d6a84:	4628      	mov	r0, r5
   d6a86:	f7ff ff3c 	bl	d6902 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d6a8a:	f3bf 8f5b 	dmb	ish
   d6a8e:	2301      	movs	r3, #1
   d6a90:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d6a92:	2000      	movs	r0, #0
   d6a94:	f104 0308 	add.w	r3, r4, #8
   d6a98:	f3bf 8f5b 	dmb	ish
   d6a9c:	e853 6f00 	ldrex	r6, [r3]
   d6aa0:	e843 0200 	strex	r2, r0, [r3]
   d6aa4:	2a00      	cmp	r2, #0
   d6aa6:	d1f9      	bne.n	d6a9c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d6aa8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d6aac:	b16e      	cbz	r6, d6aca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d6aae:	f7fe f905 	bl	d4cbc <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d6ab2:	b178      	cbz	r0, d6ad4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6ab4:	4629      	mov	r1, r5
   d6ab6:	4630      	mov	r0, r6
   d6ab8:	f7ff ff8b 	bl	d69d2 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d6abc:	4630      	mov	r0, r6
   d6abe:	f7ff ff17 	bl	d68f0 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d6ac2:	2110      	movs	r1, #16
   d6ac4:	4630      	mov	r0, r6
   d6ac6:	f002 f87c 	bl	d8bc2 <_ZdlPvj>
        p_->setError(std::move(error));
   d6aca:	4668      	mov	r0, sp
   d6acc:	f7ff ff26 	bl	d691c <_ZN8particle5ErrorD1Ev>
    }
   d6ad0:	b009      	add	sp, #36	; 0x24
   d6ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6ad4:	4631      	mov	r1, r6
   d6ad6:	a802      	add	r0, sp, #8
   d6ad8:	f7ff ffb0 	bl	d6a3c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d6adc:	68e0      	ldr	r0, [r4, #12]
   d6ade:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6ae2:	b108      	cbz	r0, d6ae8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d6ae4:	f002 fa20 	bl	d8f28 <strdup>
        type_(type) {
   d6ae8:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6aea:	2010      	movs	r0, #16
   d6aec:	f8ad 501c 	strh.w	r5, [sp, #28]
   d6af0:	f7fd facf 	bl	d4092 <_Znwj>
   d6af4:	4605      	mov	r5, r0
   d6af6:	b1e8      	cbz	r0, d6b34 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d6af8:	2700      	movs	r7, #0
   d6afa:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6afc:	2018      	movs	r0, #24
   d6afe:	f7fd fac8 	bl	d4092 <_Znwj>
   d6b02:	4604      	mov	r4, r0
   d6b04:	b188      	cbz	r0, d6b2a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d6b06:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d6b08:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d6b0a:	a802      	add	r0, sp, #8
   d6b0c:	f7ff ff4f 	bl	d69ae <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6b10:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6b12:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6b14:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6b16:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6b18:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6b1a:	a906      	add	r1, sp, #24
   d6b1c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6b1e:	60e3      	str	r3, [r4, #12]
   d6b20:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d6b24:	9205      	str	r2, [sp, #20]
   d6b26:	f7ff feec 	bl	d6902 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d6b2a:	4b08      	ldr	r3, [pc, #32]	; (d6b4c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d6b2c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6b2e:	4b08      	ldr	r3, [pc, #32]	; (d6b50 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6b30:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d6b32:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d6b34:	a806      	add	r0, sp, #24
   d6b36:	f7ff fef1 	bl	d691c <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d6b3a:	a802      	add	r0, sp, #8
   d6b3c:	f7ff fed8 	bl	d68f0 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6b40:	2200      	movs	r2, #0
   d6b42:	4629      	mov	r1, r5
   d6b44:	4803      	ldr	r0, [pc, #12]	; (d6b54 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d6b46:	f7fe f8c1 	bl	d4ccc <application_thread_invoke>
   d6b4a:	e7b7      	b.n	d6abc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d6b4c:	000d69e5 	.word	0x000d69e5
   d6b50:	000d6c7d 	.word	0x000d6c7d
   d6b54:	000d4e4b 	.word	0x000d4e4b

000d6b58 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d6b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6b5c:	b08a      	sub	sp, #40	; 0x28
   d6b5e:	4605      	mov	r5, r0
   d6b60:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d6b64:	460c      	mov	r4, r1
   d6b66:	4617      	mov	r7, r2
   d6b68:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6b6a:	f7fe f8cb 	bl	d4d04 <spark_cloud_flag_connected>
   d6b6e:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d6b70:	4682      	mov	sl, r0
   d6b72:	bb38      	cbnz	r0, d6bc4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d6b74:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d6b78:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6b7a:	a905      	add	r1, sp, #20
   d6b7c:	4630      	mov	r0, r6
   d6b7e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6b82:	f7ff febe 	bl	d6902 <_ZN8particle5ErrorC1EOS0_>
   d6b86:	2014      	movs	r0, #20
   d6b88:	f7fd fa83 	bl	d4092 <_Znwj>
   d6b8c:	4604      	mov	r4, r0
   d6b8e:	b148      	cbz	r0, d6ba4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d6b90:	2302      	movs	r3, #2
   d6b92:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6b94:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6b96:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6b9a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d6b9c:	4631      	mov	r1, r6
   d6b9e:	300c      	adds	r0, #12
   d6ba0:	f7ff feaf 	bl	d6902 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6ba4:	4628      	mov	r0, r5
	: __shared_count(__p)
   d6ba6:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6ba8:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d6bac:	f7ff ff32 	bl	d6a14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6bb0:	4630      	mov	r0, r6
   d6bb2:	f7ff feb3 	bl	d691c <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d6bb6:	a805      	add	r0, sp, #20
   d6bb8:	f7ff feb0 	bl	d691c <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d6bbc:	4628      	mov	r0, r5
   d6bbe:	b00a      	add	sp, #40	; 0x28
   d6bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d6bc4:	230c      	movs	r3, #12
   d6bc6:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d6bca:	2014      	movs	r0, #20
   d6bcc:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d6bd0:	9307      	str	r3, [sp, #28]
   d6bd2:	f7fd fa5e 	bl	d4092 <_Znwj>
   d6bd6:	4601      	mov	r1, r0
   d6bd8:	b128      	cbz	r0, d6be6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6bda:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d6bde:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6be2:	f880 a001 	strb.w	sl, [r0, #1]
   d6be6:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6be8:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d6bea:	f7ff ff13 	bl	d6a14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d6bee:	4b22      	ldr	r3, [pc, #136]	; (d6c78 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d6bf0:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d6bf2:	2008      	movs	r0, #8
   d6bf4:	f7fd fa4d 	bl	d4092 <_Znwj>
   d6bf8:	4682      	mov	sl, r0
   d6bfa:	b128      	cbz	r0, d6c08 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6bfc:	9b03      	ldr	r3, [sp, #12]
   d6bfe:	f840 3b04 	str.w	r3, [r0], #4
   d6c02:	a904      	add	r1, sp, #16
   d6c04:	f7ff f811 	bl	d5c2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6c08:	9600      	str	r6, [sp, #0]
   d6c0a:	fa5f f389 	uxtb.w	r3, r9
   d6c0e:	4642      	mov	r2, r8
   d6c10:	4639      	mov	r1, r7
   d6c12:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d6c14:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6c18:	f7fe f87c 	bl	d4d14 <spark_send_event>
   d6c1c:	b9b8      	cbnz	r0, d6c4e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d6c1e:	9b03      	ldr	r3, [sp, #12]
   d6c20:	785b      	ldrb	r3, [r3, #1]
   d6c22:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d6c26:	b993      	cbnz	r3, d6c4e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d6c28:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d6c2c:	a905      	add	r1, sp, #20
   d6c2e:	a803      	add	r0, sp, #12
   d6c30:	9205      	str	r2, [sp, #20]
   d6c32:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6c36:	f7ff ff11 	bl	d6a5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6c3a:	a805      	add	r0, sp, #20
   d6c3c:	f7ff fe6e 	bl	d691c <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d6c40:	a805      	add	r0, sp, #20
   d6c42:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6c44:	f7ff fe94 	bl	d6970 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d6c48:	a806      	add	r0, sp, #24
   d6c4a:	f7fd fa88 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6c4e:	9b03      	ldr	r3, [sp, #12]
   d6c50:	9305      	str	r3, [sp, #20]
   d6c52:	a904      	add	r1, sp, #16
   d6c54:	a806      	add	r0, sp, #24
   d6c56:	f7fe ffe8 	bl	d5c2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6c5a:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6c5c:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6c5e:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d6c60:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d6c62:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d6c64:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d6c66:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d6c68:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d6c6a:	f7fd fa78 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6c6e:	a804      	add	r0, sp, #16
   d6c70:	f7fd fa75 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d6c74:	e7a2      	b.n	d6bbc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d6c76:	bf00      	nop
   d6c78:	000d6d41 	.word	0x000d6d41

000d6c7c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d6c7c:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6c7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6c80:	4605      	mov	r5, r0
	  switch (__op)
   d6c82:	d007      	beq.n	d6c94 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d6c84:	2a03      	cmp	r2, #3
   d6c86:	d018      	beq.n	d6cba <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d6c88:	2a01      	cmp	r2, #1
   d6c8a:	d101      	bne.n	d6c90 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d6c8c:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6c8e:	6003      	str	r3, [r0, #0]
	}
   d6c90:	2000      	movs	r0, #0
   d6c92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6c94:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d6c96:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d6c98:	f7fd f9fb 	bl	d4092 <_Znwj>
   d6c9c:	4604      	mov	r4, r0
   d6c9e:	b150      	cbz	r0, d6cb6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6ca0:	4631      	mov	r1, r6
   d6ca2:	f7ff fecb 	bl	d6a3c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d6ca6:	6930      	ldr	r0, [r6, #16]
   d6ca8:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6cac:	b108      	cbz	r0, d6cb2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d6cae:	f002 f93b 	bl	d8f28 <strdup>
        type_(type) {
   d6cb2:	6120      	str	r0, [r4, #16]
   d6cb4:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d6cb6:	602c      	str	r4, [r5, #0]
	}
   d6cb8:	e7ea      	b.n	d6c90 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d6cba:	6804      	ldr	r4, [r0, #0]
   d6cbc:	2c00      	cmp	r4, #0
   d6cbe:	d0e7      	beq.n	d6c90 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d6cc0:	f104 0010 	add.w	r0, r4, #16
   d6cc4:	f7ff fe2a 	bl	d691c <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d6cc8:	4620      	mov	r0, r4
   d6cca:	f7ff fe11 	bl	d68f0 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d6cce:	2118      	movs	r1, #24
   d6cd0:	4620      	mov	r0, r4
   d6cd2:	f001 ff76 	bl	d8bc2 <_ZdlPvj>
   d6cd6:	e7db      	b.n	d6c90 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d6cd8 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d6cd8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d6cda:	2300      	movs	r3, #0
   d6cdc:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d6cde:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d6ce0:	4604      	mov	r4, r0
   d6ce2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d6ce4:	b12b      	cbz	r3, d6cf2 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6ce6:	2202      	movs	r2, #2
   d6ce8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6cea:	68eb      	ldr	r3, [r5, #12]
   d6cec:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6cee:	68ab      	ldr	r3, [r5, #8]
   d6cf0:	60a3      	str	r3, [r4, #8]
    }
   d6cf2:	4620      	mov	r0, r4
   d6cf4:	bd38      	pop	{r3, r4, r5, pc}

000d6cf6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d6cf6:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6cf8:	b570      	push	{r4, r5, r6, lr}
   d6cfa:	4604      	mov	r4, r0
	  switch (__op)
   d6cfc:	d007      	beq.n	d6d0e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d6cfe:	2a03      	cmp	r2, #3
   d6d00:	d012      	beq.n	d6d28 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d6d02:	2a01      	cmp	r2, #1
   d6d04:	d101      	bne.n	d6d0a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d6d06:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6d08:	6003      	str	r3, [r0, #0]
	}
   d6d0a:	2000      	movs	r0, #0
   d6d0c:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6d0e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d6d10:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d6d12:	f7fd f9be 	bl	d4092 <_Znwj>
   d6d16:	4605      	mov	r5, r0
   d6d18:	b120      	cbz	r0, d6d24 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d6d1a:	4631      	mov	r1, r6
   d6d1c:	f7ff ffdc 	bl	d6cd8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d6d20:	7c33      	ldrb	r3, [r6, #16]
   d6d22:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d6d24:	6025      	str	r5, [r4, #0]
	}
   d6d26:	e7f0      	b.n	d6d0a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d6d28:	6804      	ldr	r4, [r0, #0]
   d6d2a:	2c00      	cmp	r4, #0
   d6d2c:	d0ed      	beq.n	d6d0a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d6d2e:	4620      	mov	r0, r4
   d6d30:	f7ff fdde 	bl	d68f0 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d6d34:	2114      	movs	r1, #20
   d6d36:	4620      	mov	r0, r4
   d6d38:	f001 ff43 	bl	d8bc2 <_ZdlPvj>
   d6d3c:	e7e5      	b.n	d6d0a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d6d40 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d6d40:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6d42:	b089      	sub	sp, #36	; 0x24
   d6d44:	4604      	mov	r4, r0
   d6d46:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d6d48:	a801      	add	r0, sp, #4
   d6d4a:	4611      	mov	r1, r2
   d6d4c:	f7ff fe10 	bl	d6970 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d6d50:	b1a4      	cbz	r4, d6d7c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d6d52:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6d54:	b11d      	cbz	r5, d6d5e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d6d56:	4628      	mov	r0, r5
   d6d58:	f002 f8e6 	bl	d8f28 <strdup>
   d6d5c:	4605      	mov	r5, r0
   d6d5e:	a801      	add	r0, sp, #4
   d6d60:	a903      	add	r1, sp, #12
        type_(type) {
   d6d62:	9503      	str	r5, [sp, #12]
   d6d64:	f8ad 4010 	strh.w	r4, [sp, #16]
   d6d68:	f7ff fe78 	bl	d6a5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6d6c:	a803      	add	r0, sp, #12
   d6d6e:	f7ff fdd5 	bl	d691c <_ZN8particle5ErrorD1Ev>
   d6d72:	a802      	add	r0, sp, #8
   d6d74:	f7fd f9f3 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6d78:	b009      	add	sp, #36	; 0x24
   d6d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6d7c:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d6d7e:	2301      	movs	r3, #1
   d6d80:	e8d5 2f4f 	ldrexb	r2, [r5]
   d6d84:	2a00      	cmp	r2, #0
   d6d86:	d103      	bne.n	d6d90 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d6d88:	e8c5 3f41 	strexb	r1, r3, [r5]
   d6d8c:	2900      	cmp	r1, #0
   d6d8e:	d1f7      	bne.n	d6d80 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d6d90:	d1ef      	bne.n	d6d72 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d6d92:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d6d94:	f3bf 8f5b 	dmb	ish
   d6d98:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d6d9a:	1d2b      	adds	r3, r5, #4
   d6d9c:	f3bf 8f5b 	dmb	ish
   d6da0:	e853 6f00 	ldrex	r6, [r3]
   d6da4:	e843 4200 	strex	r2, r4, [r3]
   d6da8:	2a00      	cmp	r2, #0
   d6daa:	d1f9      	bne.n	d6da0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d6dac:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d6db0:	2e00      	cmp	r6, #0
   d6db2:	d0de      	beq.n	d6d72 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d6db4:	4620      	mov	r0, r4
   d6db6:	f7fd ff81 	bl	d4cbc <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d6dba:	4607      	mov	r7, r0
   d6dbc:	b160      	cbz	r0, d6dd8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6dbe:	f105 010c 	add.w	r1, r5, #12
   d6dc2:	4630      	mov	r0, r6
   d6dc4:	f7ff fe15 	bl	d69f2 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d6dc8:	4630      	mov	r0, r6
   d6dca:	f7ff fd91 	bl	d68f0 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d6dce:	2110      	movs	r1, #16
   d6dd0:	4630      	mov	r0, r6
   d6dd2:	f001 fef6 	bl	d8bc2 <_ZdlPvj>
   d6dd6:	e7cc      	b.n	d6d72 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6dd8:	4631      	mov	r1, r6
   d6dda:	a803      	add	r0, sp, #12
   d6ddc:	f7ff ff7c 	bl	d6cd8 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6de0:	7b2b      	ldrb	r3, [r5, #12]
   d6de2:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6de6:	2010      	movs	r0, #16
   d6de8:	f7fd f953 	bl	d4092 <_Znwj>
   d6dec:	4605      	mov	r5, r0
   d6dee:	b1d0      	cbz	r0, d6e26 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d6df0:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6df2:	2014      	movs	r0, #20
   d6df4:	f7fd f94d 	bl	d4092 <_Znwj>
   d6df8:	4604      	mov	r4, r0
   d6dfa:	b178      	cbz	r0, d6e1c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d6dfc:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d6dfe:	4601      	mov	r1, r0
   d6e00:	a803      	add	r0, sp, #12
   d6e02:	f7ff fdd4 	bl	d69ae <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6e06:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6e08:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6e0a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6e0c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d6e0e:	9205      	str	r2, [sp, #20]
   d6e10:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6e12:	60e3      	str	r3, [r4, #12]
   d6e14:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d6e18:	9206      	str	r2, [sp, #24]
   d6e1a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d6e1c:	4b06      	ldr	r3, [pc, #24]	; (d6e38 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d6e1e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6e20:	4b06      	ldr	r3, [pc, #24]	; (d6e3c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6e22:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d6e24:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d6e26:	a803      	add	r0, sp, #12
   d6e28:	f7ff fd62 	bl	d68f0 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6e2c:	2200      	movs	r2, #0
   d6e2e:	4629      	mov	r1, r5
   d6e30:	4803      	ldr	r0, [pc, #12]	; (d6e40 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d6e32:	f7fd ff4b 	bl	d4ccc <application_thread_invoke>
   d6e36:	e7c7      	b.n	d6dc8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d6e38:	000d6a05 	.word	0x000d6a05
   d6e3c:	000d6cf7 	.word	0x000d6cf7
   d6e40:	000d4e4b 	.word	0x000d4e4b

000d6e44 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6e44:	2200      	movs	r2, #0
   d6e46:	6840      	ldr	r0, [r0, #4]
   d6e48:	4611      	mov	r1, r2
   d6e4a:	f7fd bfab 	b.w	d4da4 <network_listening>

000d6e4e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6e4e:	2200      	movs	r2, #0
   d6e50:	6840      	ldr	r0, [r0, #4]
   d6e52:	4611      	mov	r1, r2
   d6e54:	f7fd bfb6 	b.w	d4dc4 <network_get_listen_timeout>

000d6e58 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d6e58:	6840      	ldr	r0, [r0, #4]
   d6e5a:	2200      	movs	r2, #0
   d6e5c:	f7fd bfaa 	b.w	d4db4 <network_set_listen_timeout>

000d6e60 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6e60:	6840      	ldr	r0, [r0, #4]
   d6e62:	2200      	movs	r2, #0
   d6e64:	f081 0101 	eor.w	r1, r1, #1
   d6e68:	f7fd bf94 	b.w	d4d94 <network_listen>

000d6e6c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d6e6c:	2300      	movs	r3, #0
   d6e6e:	6840      	ldr	r0, [r0, #4]
   d6e70:	461a      	mov	r2, r3
   d6e72:	4619      	mov	r1, r3
   d6e74:	f7fd bf86 	b.w	d4d84 <network_off>

000d6e78 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d6e78:	2300      	movs	r3, #0
   d6e7a:	6840      	ldr	r0, [r0, #4]
   d6e7c:	461a      	mov	r2, r3
   d6e7e:	4619      	mov	r1, r3
   d6e80:	f7fd bf78 	b.w	d4d74 <network_on>

000d6e84 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6e84:	2200      	movs	r2, #0
   d6e86:	6840      	ldr	r0, [r0, #4]
   d6e88:	4611      	mov	r1, r2
   d6e8a:	f7fd bf6b 	b.w	d4d64 <network_ready>

000d6e8e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d6e8e:	2200      	movs	r2, #0
   d6e90:	6840      	ldr	r0, [r0, #4]
   d6e92:	4611      	mov	r1, r2
   d6e94:	f7fd bf56 	b.w	d4d44 <network_connecting>

000d6e98 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6e98:	6840      	ldr	r0, [r0, #4]
   d6e9a:	2200      	movs	r2, #0
   d6e9c:	2102      	movs	r1, #2
   d6e9e:	f7fd bf59 	b.w	d4d54 <network_disconnect>

000d6ea2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6ea2:	2300      	movs	r3, #0
   d6ea4:	6840      	ldr	r0, [r0, #4]
   d6ea6:	461a      	mov	r2, r3
   d6ea8:	f7fd bf44 	b.w	d4d34 <network_connect>

000d6eac <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6eac:	4b02      	ldr	r3, [pc, #8]	; (d6eb8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d6eae:	2203      	movs	r2, #3
   d6eb0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d6eb2:	4a02      	ldr	r2, [pc, #8]	; (d6ebc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6eb4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d6eb6:	4770      	bx	lr
   d6eb8:	2003e638 	.word	0x2003e638
   d6ebc:	000d952c 	.word	0x000d952c

000d6ec0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6ec0:	4770      	bx	lr

000d6ec2 <_ZN9IPAddressD0Ev>:
   d6ec2:	b510      	push	{r4, lr}
   d6ec4:	2118      	movs	r1, #24
   d6ec6:	4604      	mov	r4, r0
   d6ec8:	f001 fe7b 	bl	d8bc2 <_ZdlPvj>
   d6ecc:	4620      	mov	r0, r4
   d6ece:	bd10      	pop	{r4, pc}

000d6ed0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6ed2:	7d03      	ldrb	r3, [r0, #20]
   d6ed4:	2b06      	cmp	r3, #6
{
   d6ed6:	b08d      	sub	sp, #52	; 0x34
   d6ed8:	460e      	mov	r6, r1
   d6eda:	f100 0704 	add.w	r7, r0, #4
   d6ede:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d6ee2:	d012      	beq.n	d6f0a <_ZNK9IPAddress7printToER5Print+0x3a>
   d6ee4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d6ee8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6eec:	220a      	movs	r2, #10
   d6eee:	4630      	mov	r0, r6
   d6ef0:	f001 facd 	bl	d848e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6ef4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6ef6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d6ef8:	d019      	beq.n	d6f2e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d6efa:	2c00      	cmp	r4, #0
   d6efc:	d0f4      	beq.n	d6ee8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d6efe:	212e      	movs	r1, #46	; 0x2e
   d6f00:	4630      	mov	r0, r6
   d6f02:	f001 fab5 	bl	d8470 <_ZN5Print5printEc>
   d6f06:	4404      	add	r4, r0
   d6f08:	e7ee      	b.n	d6ee8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6f0a:	232f      	movs	r3, #47	; 0x2f
   d6f0c:	466a      	mov	r2, sp
   d6f0e:	4639      	mov	r1, r7
   d6f10:	200a      	movs	r0, #10
		buf[0] = 0;
   d6f12:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6f16:	f7fd fdf9 	bl	d4b0c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d6f1a:	4668      	mov	r0, sp
   d6f1c:	f002 f821 	bl	d8f62 <strlen>
   d6f20:	6833      	ldr	r3, [r6, #0]
   d6f22:	4602      	mov	r2, r0
   d6f24:	68db      	ldr	r3, [r3, #12]
   d6f26:	4669      	mov	r1, sp
   d6f28:	4630      	mov	r0, r6
   d6f2a:	4798      	blx	r3
   d6f2c:	4604      	mov	r4, r0
    }
    return n;
}
   d6f2e:	4620      	mov	r0, r4
   d6f30:	b00d      	add	sp, #52	; 0x34
   d6f32:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6f34 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d6f34:	b510      	push	{r4, lr}
   d6f36:	4b05      	ldr	r3, [pc, #20]	; (d6f4c <_ZN9IPAddressC1Ev+0x18>)
   d6f38:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6f3a:	2211      	movs	r2, #17
   d6f3c:	f840 3b04 	str.w	r3, [r0], #4
   d6f40:	2100      	movs	r1, #0
   d6f42:	f001 ff9b 	bl	d8e7c <memset>
}
   d6f46:	4620      	mov	r0, r4
   d6f48:	bd10      	pop	{r4, pc}
   d6f4a:	bf00      	nop
   d6f4c:	000d9560 	.word	0x000d9560

000d6f50 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d6f50:	4603      	mov	r3, r0
   d6f52:	4a07      	ldr	r2, [pc, #28]	; (d6f70 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6f54:	b510      	push	{r4, lr}
   d6f56:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d6f5a:	f101 0210 	add.w	r2, r1, #16
   d6f5e:	f851 4b04 	ldr.w	r4, [r1], #4
   d6f62:	f843 4b04 	str.w	r4, [r3], #4
   d6f66:	4291      	cmp	r1, r2
   d6f68:	d1f9      	bne.n	d6f5e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6f6a:	780a      	ldrb	r2, [r1, #0]
   d6f6c:	701a      	strb	r2, [r3, #0]
}
   d6f6e:	bd10      	pop	{r4, pc}
   d6f70:	000d9560 	.word	0x000d9560

000d6f74 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d6f74:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6f76:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6f7a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6f7e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6f82:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d6f86:	2304      	movs	r3, #4
   d6f88:	6041      	str	r1, [r0, #4]
   d6f8a:	7503      	strb	r3, [r0, #20]
}
   d6f8c:	bd10      	pop	{r4, pc}

000d6f8e <_ZN9IPAddressaSEPKh>:
{
   d6f8e:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6f90:	78cb      	ldrb	r3, [r1, #3]
   d6f92:	9300      	str	r3, [sp, #0]
   d6f94:	788b      	ldrb	r3, [r1, #2]
   d6f96:	784a      	ldrb	r2, [r1, #1]
   d6f98:	7809      	ldrb	r1, [r1, #0]
   d6f9a:	f7ff ffeb 	bl	d6f74 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d6f9e:	b002      	add	sp, #8
   d6fa0:	bd10      	pop	{r4, pc}

000d6fa2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d6fa2:	f100 0310 	add.w	r3, r0, #16
   d6fa6:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d6fa8:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d6fac:	2901      	cmp	r1, #1
   d6fae:	4618      	mov	r0, r3
   d6fb0:	d108      	bne.n	d6fc4 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d6fb2:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d6fb6:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d6fba:	3a01      	subs	r2, #1
   d6fbc:	f103 0310 	add.w	r3, r3, #16
   d6fc0:	d1f2      	bne.n	d6fa8 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d6fc2:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d6fc4:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d6fc6:	bf04      	itt	eq
   d6fc8:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d6fcc:	1852      	addeq	r2, r2, r1
   d6fce:	e7f4      	b.n	d6fba <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d6fd0 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d6fd0:	b40e      	push	{r1, r2, r3}
   d6fd2:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6fd4:	b088      	sub	sp, #32
   d6fd6:	af00      	add	r7, sp, #0
   d6fd8:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6fdc:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   d6fde:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6fe2:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   d6fe4:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6fe6:	462b      	mov	r3, r5
   d6fe8:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   d6fea:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6fec:	f7fd ff0a 	bl	d4e04 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d6ff0:	280f      	cmp	r0, #15
   d6ff2:	687a      	ldr	r2, [r7, #4]
   d6ff4:	d91a      	bls.n	d702c <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   d6ff6:	f100 0308 	add.w	r3, r0, #8
   d6ffa:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d6ffe:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   d7000:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d7004:	1c41      	adds	r1, r0, #1
   d7006:	462b      	mov	r3, r5
   d7008:	4668      	mov	r0, sp
        va_start(args, fmt);
   d700a:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d700c:	f7fd fefa 	bl	d4e04 <vsnprintf>
        if (n > 0) {
   d7010:	1e02      	subs	r2, r0, #0
   d7012:	dd04      	ble.n	d701e <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   d7014:	6823      	ldr	r3, [r4, #0]
   d7016:	4669      	mov	r1, sp
   d7018:	689b      	ldr	r3, [r3, #8]
   d701a:	4620      	mov	r0, r4
   d701c:	4798      	blx	r3
   d701e:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   d7020:	3720      	adds	r7, #32
   d7022:	46bd      	mov	sp, r7
   d7024:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d7028:	b003      	add	sp, #12
   d702a:	4770      	bx	lr
    } else if (n > 0) {
   d702c:	2800      	cmp	r0, #0
   d702e:	d0f7      	beq.n	d7020 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   d7030:	6823      	ldr	r3, [r4, #0]
   d7032:	4602      	mov	r2, r0
   d7034:	689b      	ldr	r3, [r3, #8]
   d7036:	f107 0110 	add.w	r1, r7, #16
   d703a:	4620      	mov	r0, r4
   d703c:	4798      	blx	r3
}
   d703e:	e7ef      	b.n	d7020 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000d7040 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d7040:	b510      	push	{r4, lr}
          _M_dispose();
   d7042:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d7044:	4604      	mov	r4, r0
          _M_dispose();
   d7046:	689b      	ldr	r3, [r3, #8]
   d7048:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d704a:	68a3      	ldr	r3, [r4, #8]
   d704c:	3b01      	subs	r3, #1
   d704e:	60a3      	str	r3, [r4, #8]
   d7050:	b92b      	cbnz	r3, d705e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d7052:	6823      	ldr	r3, [r4, #0]
   d7054:	4620      	mov	r0, r4
   d7056:	68db      	ldr	r3, [r3, #12]
    }
   d7058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d705c:	4718      	bx	r3
    }
   d705e:	bd10      	pop	{r4, pc}

000d7060 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d7060:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d7062:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   d7064:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d7068:	689b      	ldr	r3, [r3, #8]
   d706a:	2201      	movs	r2, #1
   d706c:	f10d 0107 	add.w	r1, sp, #7
   d7070:	4798      	blx	r3
}
   d7072:	b003      	add	sp, #12
   d7074:	f85d fb04 	ldr.w	pc, [sp], #4

000d7078 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   d7078:	b538      	push	{r3, r4, r5, lr}
   d707a:	680b      	ldr	r3, [r1, #0]
   d707c:	6003      	str	r3, [r0, #0]
   d707e:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d7080:	6843      	ldr	r3, [r0, #4]
   d7082:	429d      	cmp	r5, r3
    class __shared_ptr
   d7084:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d7086:	d00c      	beq.n	d70a2 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d7088:	b115      	cbz	r5, d7090 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d708a:	686b      	ldr	r3, [r5, #4]
   d708c:	3301      	adds	r3, #1
   d708e:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d7090:	6860      	ldr	r0, [r4, #4]
   d7092:	b128      	cbz	r0, d70a0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d7094:	6843      	ldr	r3, [r0, #4]
   d7096:	3b01      	subs	r3, #1
   d7098:	6043      	str	r3, [r0, #4]
   d709a:	b90b      	cbnz	r3, d70a0 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d709c:	f7ff ffd0 	bl	d7040 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d70a0:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d70a2:	4620      	mov	r0, r4
   d70a4:	bd38      	pop	{r3, r4, r5, pc}

000d70a6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d70a6:	460b      	mov	r3, r1
   d70a8:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   d70aa:	2200      	movs	r2, #0
   d70ac:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d70ae:	e9c0 2200 	strd	r2, r2, [r0]
   d70b2:	4604      	mov	r4, r0
        t_ = t;
   d70b4:	6083      	str	r3, [r0, #8]
    if (t) {
   d70b6:	b90b      	cbnz	r3, d70bc <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   d70b8:	4620      	mov	r0, r4
   d70ba:	bd10      	pop	{r4, pc}
    class shared_ptr : public __shared_ptr<_Tp>
   d70bc:	f7ff ffdc 	bl	d7078 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d70c0:	e7fa      	b.n	d70b8 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d70c2 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   d70c2:	6883      	ldr	r3, [r0, #8]
   d70c4:	b1eb      	cbz	r3, d7102 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   d70c6:	781a      	ldrb	r2, [r3, #0]
   d70c8:	2a03      	cmp	r2, #3
   d70ca:	d81a      	bhi.n	d7102 <_ZNK5spark9JSONValue4typeEv+0x40>
   d70cc:	e8df f002 	tbb	[pc, r2]
   d70d0:	1b021704 	.word	0x1b021704
   d70d4:	2005      	movs	r0, #5
   d70d6:	4770      	bx	lr
        const char c = d_->json[t_->start];
   d70d8:	6802      	ldr	r2, [r0, #0]
   d70da:	685b      	ldr	r3, [r3, #4]
   d70dc:	6852      	ldr	r2, [r2, #4]
   d70de:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d70e0:	282d      	cmp	r0, #45	; 0x2d
   d70e2:	d012      	beq.n	d710a <_ZNK5spark9JSONValue4typeEv+0x48>
   d70e4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d70e8:	2b09      	cmp	r3, #9
   d70ea:	d90e      	bls.n	d710a <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d70ec:	2874      	cmp	r0, #116	; 0x74
   d70ee:	d00e      	beq.n	d710e <_ZNK5spark9JSONValue4typeEv+0x4c>
   d70f0:	2866      	cmp	r0, #102	; 0x66
   d70f2:	d00c      	beq.n	d710e <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d70f4:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d70f8:	4258      	negs	r0, r3
   d70fa:	4158      	adcs	r0, r3
   d70fc:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   d70fe:	2006      	movs	r0, #6
   d7100:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   d7102:	2000      	movs	r0, #0
   d7104:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d7106:	2004      	movs	r0, #4
   d7108:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d710a:	2003      	movs	r0, #3
   d710c:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d710e:	2002      	movs	r0, #2
}
   d7110:	4770      	bx	lr

000d7112 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   d7112:	b510      	push	{r4, lr}
   d7114:	4604      	mov	r4, r0
    switch (type()) {
   d7116:	f7ff ffd4 	bl	d70c2 <_ZNK5spark9JSONValue4typeEv>
   d711a:	2802      	cmp	r0, #2
   d711c:	d00e      	beq.n	d713c <_ZNK5spark9JSONValue5toIntEv+0x2a>
   d711e:	1ec3      	subs	r3, r0, #3
   d7120:	b2db      	uxtb	r3, r3
   d7122:	2b01      	cmp	r3, #1
   d7124:	d814      	bhi.n	d7150 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   d7126:	6822      	ldr	r2, [r4, #0]
   d7128:	68a3      	ldr	r3, [r4, #8]
   d712a:	6850      	ldr	r0, [r2, #4]
   d712c:	685b      	ldr	r3, [r3, #4]
}
   d712e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   d7132:	220a      	movs	r2, #10
   d7134:	2100      	movs	r1, #0
   d7136:	4418      	add	r0, r3
   d7138:	f001 bfc8 	b.w	d90cc <strtol>
        const char* const s = d_->json + t_->start;
   d713c:	6822      	ldr	r2, [r4, #0]
   d713e:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d7140:	6852      	ldr	r2, [r2, #4]
   d7142:	685b      	ldr	r3, [r3, #4]
   d7144:	5cd0      	ldrb	r0, [r2, r3]
   d7146:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d714a:	4258      	negs	r0, r3
   d714c:	4158      	adcs	r0, r3
}
   d714e:	bd10      	pop	{r4, pc}
    switch (type()) {
   d7150:	2000      	movs	r0, #0
   d7152:	e7fc      	b.n	d714e <_ZNK5spark9JSONValue5toIntEv+0x3c>

000d7154 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d7154:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d7156:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d7158:	e9c0 3300 	strd	r3, r3, [r0]
   d715c:	4604      	mov	r4, r0
        n_(0) {
   d715e:	480e      	ldr	r0, [pc, #56]	; (d7198 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d7160:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d7164:	b1a9      	cbz	r1, d7192 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d7166:	780b      	ldrb	r3, [r1, #0]
   d7168:	2b03      	cmp	r3, #3
   d716a:	d006      	beq.n	d717a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d716c:	b98b      	cbnz	r3, d7192 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d716e:	6813      	ldr	r3, [r2, #0]
   d7170:	6858      	ldr	r0, [r3, #4]
   d7172:	684b      	ldr	r3, [r1, #4]
   d7174:	5cc3      	ldrb	r3, [r0, r3]
   d7176:	2b6e      	cmp	r3, #110	; 0x6e
   d7178:	d007      	beq.n	d718a <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d717a:	6813      	ldr	r3, [r2, #0]
   d717c:	684d      	ldr	r5, [r1, #4]
   d717e:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d7180:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d7182:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d7184:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d7186:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d7188:	60e3      	str	r3, [r4, #12]
   d718a:	4611      	mov	r1, r2
   d718c:	4620      	mov	r0, r4
   d718e:	f7ff ff73 	bl	d7078 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d7192:	4620      	mov	r0, r4
   d7194:	bd38      	pop	{r3, r4, r5, pc}
   d7196:	bf00      	nop
   d7198:	000d95cb 	.word	0x000d95cb

000d719c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d719c:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d719e:	2500      	movs	r5, #0
   d71a0:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d71a2:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   d71a6:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d71aa:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d71ae:	4604      	mov	r4, r0
   d71b0:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   d71b2:	b14b      	cbz	r3, d71c8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d71b4:	781a      	ldrb	r2, [r3, #0]
   d71b6:	2a01      	cmp	r2, #1
   d71b8:	d106      	bne.n	d71c8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d71ba:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d71be:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d71c0:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d71c2:	6143      	str	r3, [r0, #20]
   d71c4:	f7ff ff58 	bl	d7078 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d71c8:	4620      	mov	r0, r4
   d71ca:	bd38      	pop	{r3, r4, r5, pc}

000d71cc <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   d71cc:	b510      	push	{r4, lr}
    if (!n_) {
   d71ce:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d71d0:	4604      	mov	r4, r0
    if (!n_) {
   d71d2:	b163      	cbz	r3, d71ee <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   d71d4:	6880      	ldr	r0, [r0, #8]
   d71d6:	60e0      	str	r0, [r4, #12]
    --n_;
   d71d8:	3b01      	subs	r3, #1
    ++t_;
   d71da:	3010      	adds	r0, #16
   d71dc:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d71de:	6120      	str	r0, [r4, #16]
    --n_;
   d71e0:	6163      	str	r3, [r4, #20]
    if (n_) {
   d71e2:	b113      	cbz	r3, d71ea <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d71e4:	f7ff fedd 	bl	d6fa2 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d71e8:	60a0      	str	r0, [r4, #8]
    return true;
   d71ea:	2001      	movs	r0, #1
   d71ec:	e000      	b.n	d71f0 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d71ee:	4618      	mov	r0, r3
}
   d71f0:	bd10      	pop	{r4, pc}

000d71f2 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   d71f2:	b510      	push	{r4, lr}
    write('}');
   d71f4:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   d71f6:	4604      	mov	r4, r0
    write('}');
   d71f8:	f7ff ff32 	bl	d7060 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d71fc:	2301      	movs	r3, #1
   d71fe:	7123      	strb	r3, [r4, #4]
}
   d7200:	4620      	mov	r0, r4
   d7202:	bd10      	pop	{r4, pc}

000d7204 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   d7204:	b508      	push	{r3, lr}
    switch (state_) {
   d7206:	7903      	ldrb	r3, [r0, #4]
   d7208:	2b01      	cmp	r3, #1
   d720a:	d002      	beq.n	d7212 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d720c:	2b02      	cmp	r3, #2
   d720e:	d004      	beq.n	d721a <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   d7210:	bd08      	pop	{r3, pc}
        write(',');
   d7212:	212c      	movs	r1, #44	; 0x2c
        write(':');
   d7214:	f7ff ff24 	bl	d7060 <_ZN5spark10JSONWriter5writeEc>
}
   d7218:	e7fa      	b.n	d7210 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   d721a:	213a      	movs	r1, #58	; 0x3a
   d721c:	e7fa      	b.n	d7214 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000d721e <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   d721e:	b510      	push	{r4, lr}
   d7220:	4604      	mov	r4, r0
    writeSeparator();
   d7222:	f7ff ffef 	bl	d7204 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d7226:	4620      	mov	r0, r4
   d7228:	217b      	movs	r1, #123	; 0x7b
   d722a:	f7ff ff19 	bl	d7060 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d722e:	2300      	movs	r3, #0
   d7230:	7123      	strb	r3, [r4, #4]
}
   d7232:	4620      	mov	r0, r4
   d7234:	bd10      	pop	{r4, pc}
	...

000d7238 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   d7238:	b513      	push	{r0, r1, r4, lr}
   d723a:	4604      	mov	r4, r0
   d723c:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d723e:	f7ff ffe1 	bl	d7204 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d7242:	6823      	ldr	r3, [r4, #0]
   d7244:	9a01      	ldr	r2, [sp, #4]
   d7246:	68db      	ldr	r3, [r3, #12]
   d7248:	4903      	ldr	r1, [pc, #12]	; (d7258 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d724a:	4620      	mov	r0, r4
   d724c:	4798      	blx	r3
    state_ = NEXT;
   d724e:	2301      	movs	r3, #1
}
   d7250:	4620      	mov	r0, r4
    state_ = NEXT;
   d7252:	7123      	strb	r3, [r4, #4]
}
   d7254:	b002      	add	sp, #8
   d7256:	bd10      	pop	{r4, pc}
   d7258:	000d956c 	.word	0x000d956c

000d725c <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d725c:	b513      	push	{r0, r1, r4, lr}
   d725e:	4604      	mov	r4, r0
   d7260:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d7262:	f7ff ffcf 	bl	d7204 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d7266:	6823      	ldr	r3, [r4, #0]
   d7268:	9a01      	ldr	r2, [sp, #4]
   d726a:	68db      	ldr	r3, [r3, #12]
   d726c:	4903      	ldr	r1, [pc, #12]	; (d727c <_ZN5spark10JSONWriter5valueEj+0x20>)
   d726e:	4620      	mov	r0, r4
   d7270:	4798      	blx	r3
    state_ = NEXT;
   d7272:	2301      	movs	r3, #1
}
   d7274:	4620      	mov	r0, r4
    state_ = NEXT;
   d7276:	7123      	strb	r3, [r4, #4]
}
   d7278:	b002      	add	sp, #8
   d727a:	bd10      	pop	{r4, pc}
   d727c:	000d956f 	.word	0x000d956f

000d7280 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d7280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7284:	460d      	mov	r5, r1
   d7286:	4617      	mov	r7, r2
    write('"');
   d7288:	2122      	movs	r1, #34	; 0x22
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d728a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; d732c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d728e:	4604      	mov	r4, r0
    const char* const end = str + size;
   d7290:	442f      	add	r7, r5
    write('"');
   d7292:	f7ff fee5 	bl	d7060 <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   d7296:	4629      	mov	r1, r5
    while (s != end) {
   d7298:	42bd      	cmp	r5, r7
   d729a:	462a      	mov	r2, r5
   d729c:	d038      	beq.n	d7310 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   d729e:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d72a2:	2e22      	cmp	r6, #34	; 0x22
   d72a4:	d003      	beq.n	d72ae <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d72a6:	2e5c      	cmp	r6, #92	; 0x5c
   d72a8:	d001      	beq.n	d72ae <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d72aa:	2e1f      	cmp	r6, #31
   d72ac:	d8f4      	bhi.n	d7298 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   d72ae:	6823      	ldr	r3, [r4, #0]
   d72b0:	1a52      	subs	r2, r2, r1
   d72b2:	689b      	ldr	r3, [r3, #8]
   d72b4:	4620      	mov	r0, r4
   d72b6:	4798      	blx	r3
            write('\\');
   d72b8:	215c      	movs	r1, #92	; 0x5c
   d72ba:	4620      	mov	r0, r4
   d72bc:	f7ff fed0 	bl	d7060 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d72c0:	2e0d      	cmp	r6, #13
   d72c2:	d80a      	bhi.n	d72da <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   d72c4:	2e07      	cmp	r6, #7
   d72c6:	d91c      	bls.n	d7302 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d72c8:	f1a6 0308 	sub.w	r3, r6, #8
   d72cc:	2b05      	cmp	r3, #5
   d72ce:	d818      	bhi.n	d7302 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d72d0:	e8df f003 	tbb	[pc, r3]
   d72d4:	17110f0d 	.word	0x17110f0d
   d72d8:	1513      	.short	0x1513
   d72da:	2e22      	cmp	r6, #34	; 0x22
   d72dc:	d001      	beq.n	d72e2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d72de:	2e5c      	cmp	r6, #92	; 0x5c
   d72e0:	d10f      	bne.n	d7302 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   d72e2:	4631      	mov	r1, r6
                write('b');
   d72e4:	4620      	mov	r0, r4
   d72e6:	f7ff febb 	bl	d7060 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   d72ea:	4629      	mov	r1, r5
    while (s != end) {
   d72ec:	e7d4      	b.n	d7298 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   d72ee:	2162      	movs	r1, #98	; 0x62
   d72f0:	e7f8      	b.n	d72e4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   d72f2:	2174      	movs	r1, #116	; 0x74
   d72f4:	e7f6      	b.n	d72e4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   d72f6:	216e      	movs	r1, #110	; 0x6e
   d72f8:	e7f4      	b.n	d72e4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   d72fa:	2166      	movs	r1, #102	; 0x66
   d72fc:	e7f2      	b.n	d72e4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   d72fe:	2172      	movs	r1, #114	; 0x72
   d7300:	e7f0      	b.n	d72e4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   d7302:	6823      	ldr	r3, [r4, #0]
   d7304:	4632      	mov	r2, r6
   d7306:	68db      	ldr	r3, [r3, #12]
   d7308:	4641      	mov	r1, r8
   d730a:	4620      	mov	r0, r4
   d730c:	4798      	blx	r3
                break;
   d730e:	e7ec      	b.n	d72ea <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
   d7310:	428d      	cmp	r5, r1
   d7312:	d004      	beq.n	d731e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   d7314:	6823      	ldr	r3, [r4, #0]
   d7316:	1a6a      	subs	r2, r5, r1
   d7318:	689b      	ldr	r3, [r3, #8]
   d731a:	4620      	mov	r0, r4
   d731c:	4798      	blx	r3
    }
    write('"');
   d731e:	2122      	movs	r1, #34	; 0x22
   d7320:	4620      	mov	r0, r4
   d7322:	f7ff fe9d 	bl	d7060 <_ZN5spark10JSONWriter5writeEc>
}
   d7326:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d732a:	bf00      	nop
   d732c:	000d9572 	.word	0x000d9572

000d7330 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d7330:	b513      	push	{r0, r1, r4, lr}
   d7332:	4604      	mov	r4, r0
   d7334:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d7338:	f7ff ff64 	bl	d7204 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d733c:	4620      	mov	r0, r4
   d733e:	e9dd 2100 	ldrd	r2, r1, [sp]
   d7342:	f7ff ff9d 	bl	d7280 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d7346:	2302      	movs	r3, #2
}
   d7348:	4620      	mov	r0, r4
    state_ = VALUE;
   d734a:	7123      	strb	r3, [r4, #4]
}
   d734c:	b002      	add	sp, #8
   d734e:	bd10      	pop	{r4, pc}

000d7350 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d7350:	b513      	push	{r0, r1, r4, lr}
   d7352:	4604      	mov	r4, r0
   d7354:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d7358:	f7ff ff54 	bl	d7204 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d735c:	4620      	mov	r0, r4
   d735e:	e9dd 2100 	ldrd	r2, r1, [sp]
   d7362:	f7ff ff8d 	bl	d7280 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d7366:	2301      	movs	r3, #1
}
   d7368:	4620      	mov	r0, r4
    state_ = NEXT;
   d736a:	7123      	strb	r3, [r4, #4]
}
   d736c:	b002      	add	sp, #8
   d736e:	bd10      	pop	{r4, pc}

000d7370 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d7370:	6880      	ldr	r0, [r0, #8]
   d7372:	6803      	ldr	r3, [r0, #0]
   d7374:	68db      	ldr	r3, [r3, #12]
   d7376:	4718      	bx	r3

000d7378 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   d7378:	4770      	bx	lr

000d737a <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d737a:	4608      	mov	r0, r1
   d737c:	b111      	cbz	r1, d7384 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d737e:	680b      	ldr	r3, [r1, #0]
   d7380:	685b      	ldr	r3, [r3, #4]
   d7382:	4718      	bx	r3
}
   d7384:	4770      	bx	lr

000d7386 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d7386:	4770      	bx	lr

000d7388 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   d7388:	4770      	bx	lr

000d738a <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   d738a:	4770      	bx	lr

000d738c <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d738c:	b538      	push	{r3, r4, r5, lr}
   d738e:	4604      	mov	r4, r0
   d7390:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d7392:	6800      	ldr	r0, [r0, #0]
   d7394:	212e      	movs	r1, #46	; 0x2e
   d7396:	f001 fdaa 	bl	d8eee <strchrnul>
    size = s - category;
   d739a:	6823      	ldr	r3, [r4, #0]
   d739c:	1ac3      	subs	r3, r0, r3
   d739e:	602b      	str	r3, [r5, #0]
    if (size) {
   d73a0:	b123      	cbz	r3, d73ac <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d73a2:	7803      	ldrb	r3, [r0, #0]
   d73a4:	b103      	cbz	r3, d73a8 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d73a6:	3001      	adds	r0, #1
   d73a8:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d73aa:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
}
   d73ac:	4618      	mov	r0, r3
   d73ae:	bd38      	pop	{r3, r4, r5, pc}

000d73b0 <_ZN5spark16JSONStreamWriterD0Ev>:
   d73b0:	b510      	push	{r4, lr}
   d73b2:	210c      	movs	r1, #12
   d73b4:	4604      	mov	r4, r0
   d73b6:	f001 fc04 	bl	d8bc2 <_ZdlPvj>
   d73ba:	4620      	mov	r0, r4
   d73bc:	bd10      	pop	{r4, pc}

000d73be <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d73be:	b510      	push	{r4, lr}
   d73c0:	2104      	movs	r1, #4
   d73c2:	4604      	mov	r4, r0
   d73c4:	f001 fbfd 	bl	d8bc2 <_ZdlPvj>
   d73c8:	4620      	mov	r0, r4
   d73ca:	bd10      	pop	{r4, pc}

000d73cc <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d73cc:	b510      	push	{r4, lr}
   d73ce:	2104      	movs	r1, #4
   d73d0:	4604      	mov	r4, r0
   d73d2:	f001 fbf6 	bl	d8bc2 <_ZdlPvj>
   d73d6:	4620      	mov	r0, r4
   d73d8:	bd10      	pop	{r4, pc}

000d73da <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   d73da:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d73dc:	f001 fd91 	bl	d8f02 <strcmp>
}
   d73e0:	fab0 f080 	clz	r0, r0
   d73e4:	0940      	lsrs	r0, r0, #5
   d73e6:	bd08      	pop	{r3, pc}

000d73e8 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d73e8:	b510      	push	{r4, lr}
   d73ea:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d73ec:	f001 faea 	bl	d89c4 <_Z16_fetch_usbserialv>
   d73f0:	4284      	cmp	r4, r0
   d73f2:	d010      	beq.n	d7416 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d73f4:	f001 fa5a 	bl	d88ac <_Z22__fetch_global_Serial1v>
   d73f8:	4284      	cmp	r4, r0
   d73fa:	d105      	bne.n	d7408 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   d73fc:	f001 fa56 	bl	d88ac <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d7400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   d7404:	f001 ba4f 	b.w	d88a6 <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d7408:	b12c      	cbz	r4, d7416 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   d740a:	6823      	ldr	r3, [r4, #0]
   d740c:	4620      	mov	r0, r4
   d740e:	685b      	ldr	r3, [r3, #4]
}
   d7410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d7414:	4718      	bx	r3
   d7416:	bd10      	pop	{r4, pc}

000d7418 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d7418:	b513      	push	{r0, r1, r4, lr}
   d741a:	4604      	mov	r4, r0
    return value(val, strlen(val));
   d741c:	4608      	mov	r0, r1
   d741e:	9101      	str	r1, [sp, #4]
   d7420:	f001 fd9f 	bl	d8f62 <strlen>
   d7424:	9901      	ldr	r1, [sp, #4]
   d7426:	4602      	mov	r2, r0
   d7428:	4620      	mov	r0, r4
}
   d742a:	b002      	add	sp, #8
   d742c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   d7430:	f7ff bf8e 	b.w	d7350 <_ZN5spark10JSONWriter5valueEPKcj>

000d7434 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   d7434:	b513      	push	{r0, r1, r4, lr}
   d7436:	4604      	mov	r4, r0
    write(str, strlen(str));
   d7438:	4608      	mov	r0, r1
   d743a:	9101      	str	r1, [sp, #4]
   d743c:	f001 fd91 	bl	d8f62 <strlen>
   d7440:	6823      	ldr	r3, [r4, #0]
   d7442:	9901      	ldr	r1, [sp, #4]
   d7444:	68db      	ldr	r3, [r3, #12]
   d7446:	4602      	mov	r2, r0
   d7448:	4620      	mov	r0, r4
}
   d744a:	b002      	add	sp, #8
   d744c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   d7450:	4718      	bx	r3

000d7452 <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   d7452:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d7454:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   d7456:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d745a:	68db      	ldr	r3, [r3, #12]
   d745c:	2201      	movs	r2, #1
   d745e:	f10d 0107 	add.w	r1, sp, #7
   d7462:	4798      	blx	r3
}
   d7464:	b003      	add	sp, #12
   d7466:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d746c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d746c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   d7470:	e9d0 9500 	ldrd	r9, r5, [r0]
   d7474:	f04f 0814 	mov.w	r8, #20
   d7478:	fb08 f505 	mul.w	r5, r8, r5
   d747c:	9300      	str	r3, [sp, #0]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d747e:	10ab      	asrs	r3, r5, #2
   d7480:	4d18      	ldr	r5, [pc, #96]	; (d74e4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d7482:	4617      	mov	r7, r2
   d7484:	435d      	muls	r5, r3
   d7486:	464c      	mov	r4, r9
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d7488:	2d00      	cmp	r5, #0
   d748a:	dd23      	ble.n	d74d4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
   d748c:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   d748e:	fb08 f006 	mul.w	r0, r8, r6
   d7492:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d7496:	463a      	mov	r2, r7
   d7498:	f8ba b004 	ldrh.w	fp, [sl, #4]
   d749c:	5820      	ldr	r0, [r4, r0]
   d749e:	9101      	str	r1, [sp, #4]
   d74a0:	455f      	cmp	r7, fp
   d74a2:	bf28      	it	cs
   d74a4:	465a      	movcs	r2, fp
   d74a6:	f001 fd64 	bl	d8f72 <strncmp>
                if (cmp == 0) {
   d74aa:	9901      	ldr	r1, [sp, #4]
   d74ac:	2301      	movs	r3, #1
   d74ae:	b978      	cbnz	r0, d74d0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
   d74b0:	455f      	cmp	r7, fp
   d74b2:	d103      	bne.n	d74bc <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d74b4:	9a00      	ldr	r2, [sp, #0]
   d74b6:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d74b8:	4635      	mov	r5, r6
   d74ba:	e7e5      	b.n	d7488 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
   d74bc:	bf8c      	ite	hi
   d74be:	2001      	movhi	r0, #1
   d74c0:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d74c2:	2800      	cmp	r0, #0
   d74c4:	d0f8      	beq.n	d74b8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d74c6:	1bae      	subs	r6, r5, r6
	      ++__first;
   d74c8:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
   d74cc:	3e01      	subs	r6, #1
   d74ce:	e7f3      	b.n	d74b8 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
   d74d0:	0fc0      	lsrs	r0, r0, #31
   d74d2:	e7f6      	b.n	d74c2 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
   d74d4:	eba4 0409 	sub.w	r4, r4, r9
}
   d74d8:	4802      	ldr	r0, [pc, #8]	; (d74e4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d74da:	10a4      	asrs	r4, r4, #2
   d74dc:	4360      	muls	r0, r4
   d74de:	b003      	add	sp, #12
   d74e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d74e4:	cccccccd 	.word	0xcccccccd

000d74e8 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d74e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   d74ea:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   d74ec:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d74ee:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   d74f0:	b30b      	cbz	r3, d7536 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
   d74f2:	b301      	cbz	r1, d7536 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
        size_t size = 0; // Name length
   d74f4:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d74f6:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   d74fa:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   d74fc:	a903      	add	r1, sp, #12
   d74fe:	a801      	add	r0, sp, #4
   d7500:	f7ff ff44 	bl	d738c <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d7504:	4601      	mov	r1, r0
   d7506:	b1b0      	cbz	r0, d7536 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
            const int index = nodeIndex(*pNodes, name, size, found);
   d7508:	f10d 030b 	add.w	r3, sp, #11
   d750c:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   d750e:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   d7512:	4620      	mov	r0, r4
   d7514:	f7ff ffaa 	bl	d746c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d7518:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d751c:	b15b      	cbz	r3, d7536 <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
    return data_[i];
   d751e:	6824      	ldr	r4, [r4, #0]
   d7520:	2314      	movs	r3, #20
   d7522:	fb03 4000 	mla	r0, r3, r0, r4
            pNodes = &node.nodes;
   d7526:	f100 0408 	add.w	r4, r0, #8
            if (node.level >= 0) {
   d752a:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   d752e:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d7530:	bfa8      	it	ge
   d7532:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
   d7534:	e7e2      	b.n	d74fc <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   d7536:	4630      	mov	r0, r6
   d7538:	b004      	add	sp, #16
   d753a:	bd70      	pop	{r4, r5, r6, pc}

000d753c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d753c:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d753e:	4c0a      	ldr	r4, [pc, #40]	; (d7568 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d7540:	7823      	ldrb	r3, [r4, #0]
   d7542:	f3bf 8f5b 	dmb	ish
   d7546:	07db      	lsls	r3, r3, #31
   d7548:	d40b      	bmi.n	d7562 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
   d754a:	4620      	mov	r0, r4
   d754c:	f7fc fdb0 	bl	d40b0 <__cxa_guard_acquire>
   d7550:	b138      	cbz	r0, d7562 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
   d7552:	4620      	mov	r0, r4
   d7554:	f7fc fdb1 	bl	d40ba <__cxa_guard_release>
   d7558:	4a04      	ldr	r2, [pc, #16]	; (d756c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d755a:	4905      	ldr	r1, [pc, #20]	; (d7570 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d755c:	4805      	ldr	r0, [pc, #20]	; (d7574 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
   d755e:	f001 fb2b 	bl	d8bb8 <__aeabi_atexit>
}
   d7562:	4804      	ldr	r0, [pc, #16]	; (d7574 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
   d7564:	bd10      	pop	{r4, pc}
   d7566:	bf00      	nop
   d7568:	2003e644 	.word	0x2003e644
   d756c:	2003dee8 	.word	0x2003dee8
   d7570:	000d7389 	.word	0x000d7389
   d7574:	2003de78 	.word	0x2003de78

000d7578 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d7578:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d757a:	4c0a      	ldr	r4, [pc, #40]	; (d75a4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d757c:	7823      	ldrb	r3, [r4, #0]
   d757e:	f3bf 8f5b 	dmb	ish
   d7582:	07db      	lsls	r3, r3, #31
   d7584:	d40b      	bmi.n	d759e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
   d7586:	4620      	mov	r0, r4
   d7588:	f7fc fd92 	bl	d40b0 <__cxa_guard_acquire>
   d758c:	b138      	cbz	r0, d759e <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
   d758e:	4620      	mov	r0, r4
   d7590:	f7fc fd93 	bl	d40ba <__cxa_guard_release>
   d7594:	4a04      	ldr	r2, [pc, #16]	; (d75a8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d7596:	4905      	ldr	r1, [pc, #20]	; (d75ac <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d7598:	4805      	ldr	r0, [pc, #20]	; (d75b0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
   d759a:	f001 fb0d 	bl	d8bb8 <__aeabi_atexit>
    return &factory;
}
   d759e:	4804      	ldr	r0, [pc, #16]	; (d75b0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
   d75a0:	bd10      	pop	{r4, pc}
   d75a2:	bf00      	nop
   d75a4:	2003e648 	.word	0x2003e648
   d75a8:	2003dee8 	.word	0x2003dee8
   d75ac:	000d7387 	.word	0x000d7387
   d75b0:	2003de7c 	.word	0x2003de7c

000d75b4 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d75b4:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   d75b6:	2500      	movs	r5, #0
   d75b8:	4604      	mov	r4, r0
   d75ba:	e9c0 5500 	strd	r5, r5, [r0]
   d75be:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d75c2:	6085      	str	r5, [r0, #8]
   d75c4:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   d75c6:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   d75ca:	f7fd fa5f 	bl	d4a8c <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d75ce:	f7ff ffb5 	bl	d753c <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d75d2:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d75d4:	f7ff ffd0 	bl	d7578 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d75d8:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d75da:	6220      	str	r0, [r4, #32]
}
   d75dc:	4620      	mov	r0, r4
   d75de:	bd38      	pop	{r3, r4, r5, pc}

000d75e0 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d75e0:	b510      	push	{r4, lr}
    static LogManager mgr;
   d75e2:	4c0b      	ldr	r4, [pc, #44]	; (d7610 <_ZN5spark10LogManager8instanceEv+0x30>)
   d75e4:	7823      	ldrb	r3, [r4, #0]
   d75e6:	f3bf 8f5b 	dmb	ish
   d75ea:	07db      	lsls	r3, r3, #31
   d75ec:	d40e      	bmi.n	d760c <_ZN5spark10LogManager8instanceEv+0x2c>
   d75ee:	4620      	mov	r0, r4
   d75f0:	f7fc fd5e 	bl	d40b0 <__cxa_guard_acquire>
   d75f4:	b150      	cbz	r0, d760c <_ZN5spark10LogManager8instanceEv+0x2c>
   d75f6:	4807      	ldr	r0, [pc, #28]	; (d7614 <_ZN5spark10LogManager8instanceEv+0x34>)
   d75f8:	f7ff ffdc 	bl	d75b4 <_ZN5spark10LogManagerC1Ev>
   d75fc:	4620      	mov	r0, r4
   d75fe:	f7fc fd5c 	bl	d40ba <__cxa_guard_release>
   d7602:	4a05      	ldr	r2, [pc, #20]	; (d7618 <_ZN5spark10LogManager8instanceEv+0x38>)
   d7604:	4905      	ldr	r1, [pc, #20]	; (d761c <_ZN5spark10LogManager8instanceEv+0x3c>)
   d7606:	4803      	ldr	r0, [pc, #12]	; (d7614 <_ZN5spark10LogManager8instanceEv+0x34>)
   d7608:	f001 fad6 	bl	d8bb8 <__aeabi_atexit>
    return &mgr;
}
   d760c:	4801      	ldr	r0, [pc, #4]	; (d7614 <_ZN5spark10LogManager8instanceEv+0x34>)
   d760e:	bd10      	pop	{r4, pc}
   d7610:	2003e640 	.word	0x2003e640
   d7614:	2003e650 	.word	0x2003e650
   d7618:	2003dee8 	.word	0x2003dee8
   d761c:	000d7a75 	.word	0x000d7a75

000d7620 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d7620:	4a02      	ldr	r2, [pc, #8]	; (d762c <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d7622:	4903      	ldr	r1, [pc, #12]	; (d7630 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d7624:	4803      	ldr	r0, [pc, #12]	; (d7634 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d7626:	2300      	movs	r3, #0
   d7628:	f7fd bb30 	b.w	d4c8c <log_set_callbacks>
   d762c:	000d7951 	.word	0x000d7951
   d7630:	000d78dd 	.word	0x000d78dd
   d7634:	000d785d 	.word	0x000d785d

000d7638 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d7638:	2300      	movs	r3, #0
   d763a:	461a      	mov	r2, r3
   d763c:	4619      	mov	r1, r3
   d763e:	4618      	mov	r0, r3
   d7640:	f7fd bb24 	b.w	d4c8c <log_set_callbacks>

000d7644 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d7644:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   d7646:	690d      	ldr	r5, [r1, #16]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7648:	f851 3b04 	ldr.w	r3, [r1], #4
   d764c:	9300      	str	r3, [sp, #0]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d764e:	4604      	mov	r4, r0
   d7650:	a801      	add	r0, sp, #4
   d7652:	f7fe faea 	bl	d5c2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d7656:	466a      	mov	r2, sp
   d7658:	4629      	mov	r1, r5
   d765a:	4620      	mov	r0, r4
   d765c:	f7ff fd23 	bl	d70a6 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d7660:	a801      	add	r0, sp, #4
   d7662:	f7fc fd7c 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7666:	4620      	mov	r0, r4
   d7668:	b003      	add	sp, #12
   d766a:	bd30      	pop	{r4, r5, pc}

000d766c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d766c:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   d766e:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7670:	f851 3b04 	ldr.w	r3, [r1], #4
   d7674:	9300      	str	r3, [sp, #0]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d7676:	4604      	mov	r4, r0
   d7678:	a801      	add	r0, sp, #4
   d767a:	f7fe fad6 	bl	d5c2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d767e:	466a      	mov	r2, sp
   d7680:	4629      	mov	r1, r5
   d7682:	4620      	mov	r0, r4
   d7684:	f7ff fd8a 	bl	d719c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d7688:	a801      	add	r0, sp, #4
   d768a:	f7fc fd68 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d768e:	4620      	mov	r0, r4
   d7690:	b003      	add	sp, #12
   d7692:	bd30      	pop	{r4, r5, pc}

000d7694 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d7694:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d7696:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7698:	f851 3b04 	ldr.w	r3, [r1], #4
   d769c:	9300      	str	r3, [sp, #0]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d769e:	4604      	mov	r4, r0
   d76a0:	a801      	add	r0, sp, #4
   d76a2:	f7fe fac2 	bl	d5c2a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d76a6:	466a      	mov	r2, sp
   d76a8:	4629      	mov	r1, r5
   d76aa:	4620      	mov	r0, r4
   d76ac:	f7ff fd52 	bl	d7154 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d76b0:	a801      	add	r0, sp, #4
   d76b2:	f7fc fd54 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d76b6:	4620      	mov	r0, r4
   d76b8:	b003      	add	sp, #12
   d76ba:	bd30      	pop	{r4, r5, pc}

000d76bc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d76bc:	b570      	push	{r4, r5, r6, lr}
   d76be:	b08a      	sub	sp, #40	; 0x28
   d76c0:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d76c2:	4601      	mov	r1, r0
   d76c4:	a804      	add	r0, sp, #16
   d76c6:	f7ff ffd1 	bl	d766c <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   d76ca:	4e14      	ldr	r6, [pc, #80]	; (d771c <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   d76cc:	a804      	add	r0, sp, #16
   d76ce:	f7ff fd7d 	bl	d71cc <_ZN5spark18JSONObjectIterator4nextEv>
   d76d2:	b1e8      	cbz	r0, d7710 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   d76d4:	a904      	add	r1, sp, #16
   d76d6:	4668      	mov	r0, sp
   d76d8:	f7ff ffdc 	bl	d7694 <_ZNK5spark18JSONObjectIterator4nameEv>
   d76dc:	9802      	ldr	r0, [sp, #8]
   d76de:	4631      	mov	r1, r6
   d76e0:	f7ff fe7b 	bl	d73da <_ZNK5spark10JSONStringeqEPKc.isra.0>
   d76e4:	4604      	mov	r4, r0
   d76e6:	b110      	cbz	r0, d76ee <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   d76e8:	1e2c      	subs	r4, r5, #0
   d76ea:	bf18      	it	ne
   d76ec:	2401      	movne	r4, #1
   d76ee:	a801      	add	r0, sp, #4
   d76f0:	f7fc fd35 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d76f4:	2c00      	cmp	r4, #0
   d76f6:	d0e9      	beq.n	d76cc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   d76f8:	a904      	add	r1, sp, #16
   d76fa:	4668      	mov	r0, sp
   d76fc:	f7ff ffa2 	bl	d7644 <_ZNK5spark18JSONObjectIterator5valueEv>
   d7700:	4668      	mov	r0, sp
   d7702:	f7ff fd06 	bl	d7112 <_ZNK5spark9JSONValue5toIntEv>
   d7706:	6028      	str	r0, [r5, #0]
   d7708:	a801      	add	r0, sp, #4
   d770a:	f7fc fd28 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d770e:	e7dd      	b.n	d76cc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   d7710:	a805      	add	r0, sp, #20
   d7712:	f7fc fd24 	bl	d415e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7716:	b00a      	add	sp, #40	; 0x28
   d7718:	bd70      	pop	{r4, r5, r6, pc}
   d771a:	bf00      	nop
   d771c:	000d9578 	.word	0x000d9578

000d7720 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d7720:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7722:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   d7724:	4620      	mov	r0, r4
   d7726:	4912      	ldr	r1, [pc, #72]	; (d7770 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d7728:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   d772a:	f001 fbea 	bl	d8f02 <strcmp>
   d772e:	b948      	cbnz	r0, d7744 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
   d7730:	f001 f948 	bl	d89c4 <_Z16_fetch_usbserialv>
   d7734:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d7738:	f001 f934 	bl	d89a4 <_ZN9USBSerial5beginEl>
        return &Serial;
   d773c:	f001 f942 	bl	d89c4 <_Z16_fetch_usbserialv>
}
   d7740:	b003      	add	sp, #12
   d7742:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "Serial1") == 0) {
   d7744:	490b      	ldr	r1, [pc, #44]	; (d7774 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
   d7746:	4620      	mov	r0, r4
   d7748:	f001 fbdb 	bl	d8f02 <strcmp>
   d774c:	b970      	cbnz	r0, d776c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d774e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   d7752:	a901      	add	r1, sp, #4
   d7754:	4628      	mov	r0, r5
        int baud = 9600;
   d7756:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   d7758:	f7ff ffb0 	bl	d76bc <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d775c:	f001 f8a6 	bl	d88ac <_Z22__fetch_global_Serial1v>
   d7760:	9901      	ldr	r1, [sp, #4]
   d7762:	f001 f89d 	bl	d88a0 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d7766:	f001 f8a1 	bl	d88ac <_Z22__fetch_global_Serial1v>
   d776a:	e7e9      	b.n	d7740 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
   d776c:	2000      	movs	r0, #0
   d776e:	e7e7      	b.n	d7740 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
   d7770:	000d918c 	.word	0x000d918c
   d7774:	000d957d 	.word	0x000d957d

000d7778 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d7778:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d777a:	e9d0 5300 	ldrd	r5, r3, [r0]
   d777e:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d7780:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d7782:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d7786:	42ae      	cmp	r6, r5
   d7788:	d005      	beq.n	d7796 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   d778a:	f105 0008 	add.w	r0, r5, #8
   d778e:	f7ff fff3 	bl	d7778 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d7792:	3514      	adds	r5, #20
   d7794:	e7f7      	b.n	d7786 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d7796:	6820      	ldr	r0, [r4, #0]
   d7798:	f7fd fb24 	bl	d4de4 <free>
}
   d779c:	4620      	mov	r0, r4
   d779e:	bd70      	pop	{r4, r5, r6, pc}

000d77a0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d77a0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d77a2:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d77a6:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d77a8:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   d77ac:	42ae      	cmp	r6, r5
   d77ae:	d004      	beq.n	d77ba <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d77b0:	4628      	mov	r0, r5
   d77b2:	f000 fedb 	bl	d856c <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   d77b6:	3510      	adds	r5, #16
   d77b8:	e7f8      	b.n	d77ac <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d77ba:	6820      	ldr	r0, [r4, #0]
   d77bc:	f7fd fb12 	bl	d4de4 <free>
}
   d77c0:	4620      	mov	r0, r4
   d77c2:	bd70      	pop	{r4, r5, r6, pc}

000d77c4 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   d77c4:	b510      	push	{r4, lr}
   d77c6:	4604      	mov	r4, r0
   d77c8:	300c      	adds	r0, #12
   d77ca:	f7ff ffd5 	bl	d7778 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d77ce:	4620      	mov	r0, r4
   d77d0:	f7ff ffe6 	bl	d77a0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d77d4:	4620      	mov	r0, r4
   d77d6:	bd10      	pop	{r4, pc}

000d77d8 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   d77d8:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   d77da:	4b04      	ldr	r3, [pc, #16]	; (d77ec <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   d77dc:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   d77de:	f840 3b04 	str.w	r3, [r0], #4
   d77e2:	f7ff ffef 	bl	d77c4 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   d77e6:	4620      	mov	r0, r4
   d77e8:	bd10      	pop	{r4, pc}
   d77ea:	bf00      	nop
   d77ec:	000d92b4 	.word	0x000d92b4

000d77f0 <_ZN5spark16StreamLogHandlerD0Ev>:
   d77f0:	b510      	push	{r4, lr}
   d77f2:	4604      	mov	r4, r0
   d77f4:	f7ff fff0 	bl	d77d8 <_ZN5spark16StreamLogHandlerD1Ev>
   d77f8:	4620      	mov	r0, r4
   d77fa:	2124      	movs	r1, #36	; 0x24
   d77fc:	f001 f9e1 	bl	d8bc2 <_ZdlPvj>
   d7800:	4620      	mov	r0, r4
   d7802:	bd10      	pop	{r4, pc}

000d7804 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   d7804:	b510      	push	{r4, lr}
   d7806:	4b03      	ldr	r3, [pc, #12]	; (d7814 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d7808:	6003      	str	r3, [r0, #0]
   d780a:	4604      	mov	r4, r0
   d780c:	f7ff ffe4 	bl	d77d8 <_ZN5spark16StreamLogHandlerD1Ev>
   d7810:	4620      	mov	r0, r4
   d7812:	bd10      	pop	{r4, pc}
   d7814:	000d961c 	.word	0x000d961c

000d7818 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d7818:	b510      	push	{r4, lr}
   d781a:	4604      	mov	r4, r0
   d781c:	f7ff fff2 	bl	d7804 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d7820:	4620      	mov	r0, r4
   d7822:	2124      	movs	r1, #36	; 0x24
   d7824:	f001 f9cd 	bl	d8bc2 <_ZdlPvj>
   d7828:	4620      	mov	r0, r4
   d782a:	bd10      	pop	{r4, pc}

000d782c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   d782c:	2200      	movs	r2, #0
   d782e:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d7832:	b510      	push	{r4, lr}
        capacity_(0) {
   d7834:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d7836:	680c      	ldr	r4, [r1, #0]
   d7838:	6004      	str	r4, [r0, #0]
   d783a:	684c      	ldr	r4, [r1, #4]
   d783c:	6044      	str	r4, [r0, #4]
   d783e:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7840:	600a      	str	r2, [r1, #0]
   d7842:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d7844:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7846:	608a      	str	r2, [r1, #8]
}
   d7848:	bd10      	pop	{r4, pc}

000d784a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d784a:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   d784c:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   d784e:	4604      	mov	r4, r0
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d7850:	6818      	ldr	r0, [r3, #0]
   d7852:	f7fd f933 	bl	d4abc <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d7856:	4620      	mov	r0, r4
   d7858:	bd10      	pop	{r4, pc}
	...

000d785c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d785c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7860:	b087      	sub	sp, #28
   d7862:	4680      	mov	r8, r0
   d7864:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d7866:	4b1c      	ldr	r3, [pc, #112]	; (d78d8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   d7868:	685b      	ldr	r3, [r3, #4]
   d786a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d786e:	4689      	mov	r9, r1
   d7870:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d7872:	b96b      	cbnz	r3, d7890 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   d7874:	f7ff feb4 	bl	d75e0 <_ZN5spark10LogManager8instanceEv>
   d7878:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d787a:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
   d787e:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7880:	9305      	str	r3, [sp, #20]
   d7882:	f7fd f913 	bl	d4aac <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
   d7886:	7b23      	ldrb	r3, [r4, #12]
   d7888:	b12b      	cbz	r3, d7896 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   d788a:	a805      	add	r0, sp, #20
   d788c:	f7ff ffdd 	bl	d784a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d7890:	b007      	add	sp, #28
   d7892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d7896:	2301      	movs	r3, #1
   d7898:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   d789a:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   d789e:	fa5f f989 	uxtb.w	r9, r9
   d78a2:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d78a6:	45aa      	cmp	sl, r5
   d78a8:	d012      	beq.n	d78d0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   d78aa:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   d78ae:	4631      	mov	r1, r6
   d78b0:	1d38      	adds	r0, r7, #4
   d78b2:	f7ff fe19 	bl	d74e8 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d78b6:	4581      	cmp	r9, r0
   d78b8:	d3f5      	bcc.n	d78a6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   d78ba:	683b      	ldr	r3, [r7, #0]
   d78bc:	9a03      	ldr	r2, [sp, #12]
   d78be:	9200      	str	r2, [sp, #0]
   d78c0:	f8d3 b008 	ldr.w	fp, [r3, #8]
   d78c4:	464a      	mov	r2, r9
   d78c6:	4633      	mov	r3, r6
   d78c8:	4641      	mov	r1, r8
   d78ca:	4638      	mov	r0, r7
   d78cc:	47d8      	blx	fp
   d78ce:	e7ea      	b.n	d78a6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   d78d0:	2300      	movs	r3, #0
   d78d2:	7323      	strb	r3, [r4, #12]
   d78d4:	e7d9      	b.n	d788a <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   d78d6:	bf00      	nop
   d78d8:	e000ed00 	.word	0xe000ed00

000d78dc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d78dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d78e0:	469b      	mov	fp, r3
   d78e2:	4b1a      	ldr	r3, [pc, #104]	; (d794c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   d78e4:	685b      	ldr	r3, [r3, #4]
   d78e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d78ea:	4680      	mov	r8, r0
   d78ec:	4689      	mov	r9, r1
   d78ee:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   d78f0:	b96b      	cbnz	r3, d790e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   d78f2:	f7ff fe75 	bl	d75e0 <_ZN5spark10LogManager8instanceEv>
   d78f6:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d78f8:	f100 0324 	add.w	r3, r0, #36	; 0x24
   d78fc:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d78fe:	9301      	str	r3, [sp, #4]
   d7900:	f7fd f8d4 	bl	d4aac <os_mutex_recursive_lock>
        if (that->isActive()) {
   d7904:	7b23      	ldrb	r3, [r4, #12]
   d7906:	b12b      	cbz	r3, d7914 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   d7908:	a801      	add	r0, sp, #4
   d790a:	f7ff ff9e 	bl	d784a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d790e:	b003      	add	sp, #12
   d7910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   d7914:	2301      	movs	r3, #1
   d7916:	7323      	strb	r3, [r4, #12]
   d7918:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   d791c:	b2f6      	uxtb	r6, r6
   d791e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d7922:	4555      	cmp	r5, sl
   d7924:	d00e      	beq.n	d7944 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   d7926:	f855 7b04 	ldr.w	r7, [r5], #4
   d792a:	4659      	mov	r1, fp
   d792c:	1d38      	adds	r0, r7, #4
   d792e:	f7ff fddb 	bl	d74e8 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d7932:	4286      	cmp	r6, r0
   d7934:	d3f5      	bcc.n	d7922 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   d7936:	683b      	ldr	r3, [r7, #0]
   d7938:	464a      	mov	r2, r9
   d793a:	68db      	ldr	r3, [r3, #12]
   d793c:	4641      	mov	r1, r8
   d793e:	4638      	mov	r0, r7
   d7940:	4798      	blx	r3
   d7942:	e7ee      	b.n	d7922 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   d7944:	2300      	movs	r3, #0
   d7946:	7323      	strb	r3, [r4, #12]
   d7948:	e7de      	b.n	d7908 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   d794a:	bf00      	nop
   d794c:	e000ed00 	.word	0xe000ed00

000d7950 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d7950:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d7954:	4b16      	ldr	r3, [pc, #88]	; (d79b0 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   d7956:	685b      	ldr	r3, [r3, #4]
   d7958:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d795c:	4605      	mov	r5, r0
   d795e:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   d7960:	bb1b      	cbnz	r3, d79aa <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   d7962:	f7ff fe3d 	bl	d75e0 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   d7966:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   d796a:	4604      	mov	r4, r0
   d796c:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d796e:	9301      	str	r3, [sp, #4]
   d7970:	f7fd f89c 	bl	d4aac <os_mutex_recursive_lock>
   d7974:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   d7978:	2446      	movs	r4, #70	; 0x46
   d797a:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d797e:	45b0      	cmp	r8, r6
   d7980:	d109      	bne.n	d7996 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   d7982:	a801      	add	r0, sp, #4
   d7984:	f7ff ff61 	bl	d784a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   d7988:	42a5      	cmp	r5, r4
   d798a:	bfb4      	ite	lt
   d798c:	2000      	movlt	r0, #0
   d798e:	2001      	movge	r0, #1
}
   d7990:	b002      	add	sp, #8
   d7992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   d7996:	f856 0b04 	ldr.w	r0, [r6], #4
   d799a:	4639      	mov	r1, r7
   d799c:	3004      	adds	r0, #4
   d799e:	f7ff fda3 	bl	d74e8 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   d79a2:	4284      	cmp	r4, r0
   d79a4:	bfa8      	it	ge
   d79a6:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   d79a8:	e7e9      	b.n	d797e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   d79aa:	2000      	movs	r0, #0
   d79ac:	e7f0      	b.n	d7990 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   d79ae:	bf00      	nop
   d79b0:	e000ed00 	.word	0xe000ed00

000d79b4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d79b4:	b570      	push	{r4, r5, r6, lr}
   d79b6:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d79b8:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d79bc:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   d79be:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   d79c2:	4282      	cmp	r2, r0
   d79c4:	d007      	beq.n	d79d6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>
   d79c6:	4601      	mov	r1, r0
            if (*p == value) {
   d79c8:	681d      	ldr	r5, [r3, #0]
   d79ca:	f851 6b04 	ldr.w	r6, [r1], #4
   d79ce:	42ae      	cmp	r6, r5
   d79d0:	d003      	beq.n	d79da <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x26>
   d79d2:	4608      	mov	r0, r1
   d79d4:	e7f5      	b.n	d79c2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   d79d6:	2000      	movs	r0, #0
}
   d79d8:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
   d79da:	1a52      	subs	r2, r2, r1
   d79dc:	f001 fa34 	bl	d8e48 <memmove>
    --size_;
   d79e0:	6863      	ldr	r3, [r4, #4]
   d79e2:	3b01      	subs	r3, #1
   d79e4:	6063      	str	r3, [r4, #4]
    return true;
   d79e6:	2001      	movs	r0, #1
   d79e8:	e7f6      	b.n	d79d8 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>

000d79ea <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   d79ea:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   d79ec:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   d79f0:	4604      	mov	r4, r0
   d79f2:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d79f4:	9101      	str	r1, [sp, #4]
   d79f6:	9303      	str	r3, [sp, #12]
   d79f8:	f7fd f858 	bl	d4aac <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d79fc:	a901      	add	r1, sp, #4
   d79fe:	4620      	mov	r0, r4
   d7a00:	f7ff ffd8 	bl	d79b4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d7a04:	b118      	cbz	r0, d7a0e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   d7a06:	6863      	ldr	r3, [r4, #4]
   d7a08:	b90b      	cbnz	r3, d7a0e <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   d7a0a:	f7ff fe15 	bl	d7638 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d7a0e:	a803      	add	r0, sp, #12
   d7a10:	f7ff ff1b 	bl	d784a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d7a14:	b004      	add	sp, #16
   d7a16:	bd10      	pop	{r4, pc}

000d7a18 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   d7a18:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   d7a1a:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   d7a1e:	2318      	movs	r3, #24
   d7a20:	4604      	mov	r4, r0
   d7a22:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d7a26:	42ae      	cmp	r6, r5
   d7a28:	d015      	beq.n	d7a56 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d7a2a:	f105 0110 	add.w	r1, r5, #16
   d7a2e:	4620      	mov	r0, r4
   d7a30:	f7ff ffc0 	bl	d79b4 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d7a34:	6863      	ldr	r3, [r4, #4]
   d7a36:	b90b      	cbnz	r3, d7a3c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d7a38:	f7ff fdfe 	bl	d7638 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   d7a3c:	69e0      	ldr	r0, [r4, #28]
   d7a3e:	6929      	ldr	r1, [r5, #16]
   d7a40:	6803      	ldr	r3, [r0, #0]
   d7a42:	68db      	ldr	r3, [r3, #12]
   d7a44:	4798      	blx	r3
        if (h.stream) {
   d7a46:	6969      	ldr	r1, [r5, #20]
   d7a48:	b119      	cbz	r1, d7a52 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d7a4a:	6a20      	ldr	r0, [r4, #32]
   d7a4c:	6803      	ldr	r3, [r0, #0]
   d7a4e:	68db      	ldr	r3, [r3, #12]
   d7a50:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   d7a52:	3518      	adds	r5, #24
   d7a54:	e7e7      	b.n	d7a26 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   d7a56:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d7a5a:	2618      	movs	r6, #24
   d7a5c:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d7a60:	42ae      	cmp	r6, r5
   d7a62:	d004      	beq.n	d7a6e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   d7a64:	4628      	mov	r0, r5
   d7a66:	f000 fd81 	bl	d856c <_ZN6StringD1Ev>
   d7a6a:	3518      	adds	r5, #24
   d7a6c:	e7f8      	b.n	d7a60 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   d7a6e:	2300      	movs	r3, #0
   d7a70:	6163      	str	r3, [r4, #20]
}
   d7a72:	bd70      	pop	{r4, r5, r6, pc}

000d7a74 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   d7a74:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7a76:	4604      	mov	r4, r0
    resetSystemCallbacks();
   d7a78:	f7ff fdde 	bl	d7638 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d7a7c:	f104 0324 	add.w	r3, r4, #36	; 0x24
   d7a80:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d7a82:	9301      	str	r3, [sp, #4]
   d7a84:	f7fd f812 	bl	d4aac <os_mutex_recursive_lock>
         destroyFactoryHandlers();
   d7a88:	4620      	mov	r0, r4
   d7a8a:	f7ff ffc5 	bl	d7a18 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   d7a8e:	a801      	add	r0, sp, #4
   d7a90:	f7ff fedb 	bl	d784a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   d7a94:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d7a96:	b108      	cbz	r0, d7a9c <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   d7a98:	f7fd f800 	bl	d4a9c <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   d7a9c:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d7aa0:	2618      	movs	r6, #24
   d7aa2:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d7aa6:	42ae      	cmp	r6, r5
   d7aa8:	d004      	beq.n	d7ab4 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   d7aaa:	4628      	mov	r0, r5
   d7aac:	f000 fd5e 	bl	d856c <_ZN6StringD1Ev>
   d7ab0:	3518      	adds	r5, #24
   d7ab2:	e7f8      	b.n	d7aa6 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   d7ab4:	6920      	ldr	r0, [r4, #16]
   d7ab6:	f7fd f995 	bl	d4de4 <free>
   d7aba:	6820      	ldr	r0, [r4, #0]
   d7abc:	f7fd f992 	bl	d4de4 <free>
}
   d7ac0:	4620      	mov	r0, r4
   d7ac2:	b002      	add	sp, #8
   d7ac4:	bd70      	pop	{r4, r5, r6, pc}

000d7ac6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   d7ac6:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d7ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7aca:	4606      	mov	r6, r0
   d7acc:	460c      	mov	r4, r1
   d7ace:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d7ad0:	d927      	bls.n	d7b22 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
   d7ad2:	4290      	cmp	r0, r2
   d7ad4:	d226      	bcs.n	d7b24 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
            --end;
   d7ad6:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d7ada:	1a6c      	subs	r4, r5, r1
   d7adc:	f1a1 0714 	sub.w	r7, r1, #20
   d7ae0:	4404      	add	r4, r0
        capacity_(0) {
   d7ae2:	2600      	movs	r6, #0
            for (; end != p; --end, --dest) {
   d7ae4:	42af      	cmp	r7, r5
   d7ae6:	d03d      	beq.n	d7b64 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
   d7ae8:	b1a4      	cbz	r4, d7b14 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
   d7aea:	682b      	ldr	r3, [r5, #0]
   d7aec:	6023      	str	r3, [r4, #0]
   d7aee:	88ab      	ldrh	r3, [r5, #4]
   d7af0:	80a3      	strh	r3, [r4, #4]
   d7af2:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   d7af6:	80e3      	strh	r3, [r4, #6]
        capacity_(0) {
   d7af8:	e9c4 6602 	strd	r6, r6, [r4, #8]
   d7afc:	6126      	str	r6, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7afe:	68ab      	ldr	r3, [r5, #8]
   d7b00:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7b02:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7b04:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7b06:	68ea      	ldr	r2, [r5, #12]
   d7b08:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7b0a:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7b0c:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7b0e:	692a      	ldr	r2, [r5, #16]
   d7b10:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d7b12:	612b      	str	r3, [r5, #16]
   d7b14:	f105 0008 	add.w	r0, r5, #8
   d7b18:	f7ff fe2e 	bl	d7778 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   d7b1c:	3d14      	subs	r5, #20
   d7b1e:	3c14      	subs	r4, #20
   d7b20:	e7e0      	b.n	d7ae4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
   d7b22:	d01f      	beq.n	d7b64 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
   d7b24:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
   d7b26:	42ac      	cmp	r4, r5
   d7b28:	d01c      	beq.n	d7b64 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
   d7b2a:	b1a6      	cbz	r6, d7b56 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
   d7b2c:	6823      	ldr	r3, [r4, #0]
   d7b2e:	6033      	str	r3, [r6, #0]
   d7b30:	88a3      	ldrh	r3, [r4, #4]
   d7b32:	80b3      	strh	r3, [r6, #4]
   d7b34:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   d7b38:	80f3      	strh	r3, [r6, #6]
        capacity_(0) {
   d7b3a:	e9c6 7702 	strd	r7, r7, [r6, #8]
   d7b3e:	6137      	str	r7, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7b40:	68a3      	ldr	r3, [r4, #8]
   d7b42:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7b44:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7b46:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7b48:	68e2      	ldr	r2, [r4, #12]
   d7b4a:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7b4c:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7b4e:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7b50:	6922      	ldr	r2, [r4, #16]
   d7b52:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d7b54:	6123      	str	r3, [r4, #16]
   d7b56:	f104 0008 	add.w	r0, r4, #8
   d7b5a:	f7ff fe0d 	bl	d7778 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   d7b5e:	3414      	adds	r4, #20
   d7b60:	3614      	adds	r6, #20
   d7b62:	e7e0      	b.n	d7b26 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
   d7b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7b66 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d7b66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7b68:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   d7b6c:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d7b6e:	4604      	mov	r4, r0
   d7b70:	460e      	mov	r6, r1
   d7b72:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7b74:	db0d      	blt.n	d7b92 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
   d7b76:	3501      	adds	r5, #1
        if (n > 0) {
   d7b78:	2d00      	cmp	r5, #0
   d7b7a:	6800      	ldr	r0, [r0, #0]
   d7b7c:	dd04      	ble.n	d7b88 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
   d7b7e:	00a9      	lsls	r1, r5, #2
   d7b80:	f7fd f938 	bl	d4df4 <realloc>
            if (!d) {
   d7b84:	b918      	cbnz	r0, d7b8e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
   d7b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   d7b88:	f7fd f92c 	bl	d4de4 <free>
        T* d = nullptr;
   d7b8c:	2000      	movs	r0, #0
        data_ = d;
   d7b8e:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d7b90:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
   d7b92:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
   d7b94:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d7b96:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
   d7b9a:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   d7b9c:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
   d7ba0:	1d08      	adds	r0, r1, #4
   d7ba2:	f001 f951 	bl	d8e48 <memmove>
    new(p) T(std::move(value));
   d7ba6:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d7baa:	6863      	ldr	r3, [r4, #4]
   d7bac:	3301      	adds	r3, #1
   d7bae:	6063      	str	r3, [r4, #4]
    return true;
   d7bb0:	2001      	movs	r0, #1
   d7bb2:	e7e8      	b.n	d7b86 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

000d7bb4 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   d7bb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   d7bb6:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   d7bba:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
   d7bbc:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d7bbe:	9301      	str	r3, [sp, #4]
   d7bc0:	460d      	mov	r5, r1
   d7bc2:	f7fc ff73 	bl	d4aac <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
   d7bc6:	e9d4 3100 	ldrd	r3, r1, [r4]
   d7bca:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
   d7bce:	4283      	cmp	r3, r0
   d7bd0:	461a      	mov	r2, r3
   d7bd2:	d00b      	beq.n	d7bec <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   d7bd4:	6812      	ldr	r2, [r2, #0]
   d7bd6:	42aa      	cmp	r2, r5
   d7bd8:	f103 0304 	add.w	r3, r3, #4
   d7bdc:	d1f7      	bne.n	d7bce <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
   d7bde:	a801      	add	r0, sp, #4
   d7be0:	f7ff fe33 	bl	d784a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
   d7be4:	2500      	movs	r5, #0
}
   d7be6:	4628      	mov	r0, r5
   d7be8:	b003      	add	sp, #12
   d7bea:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
   d7bec:	462a      	mov	r2, r5
   d7bee:	4620      	mov	r0, r4
   d7bf0:	f7ff ffb9 	bl	d7b66 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d7bf4:	4605      	mov	r5, r0
   d7bf6:	2800      	cmp	r0, #0
   d7bf8:	d0f1      	beq.n	d7bde <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   d7bfa:	6863      	ldr	r3, [r4, #4]
   d7bfc:	2b01      	cmp	r3, #1
   d7bfe:	d101      	bne.n	d7c04 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   d7c00:	f7ff fd0e 	bl	d7620 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d7c04:	a801      	add	r0, sp, #4
   d7c06:	f7ff fe20 	bl	d784a <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d7c0a:	e7ec      	b.n	d7be6 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000d7c0c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d7c0c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d7c0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7c10:	4604      	mov	r4, r0
   d7c12:	460d      	mov	r5, r1
   d7c14:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d7c16:	d914      	bls.n	d7c42 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d7c18:	4290      	cmp	r0, r2
   d7c1a:	d213      	bcs.n	d7c44 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   d7c1c:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   d7c20:	1a75      	subs	r5, r6, r1
   d7c22:	f1a1 0710 	sub.w	r7, r1, #16
   d7c26:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d7c28:	42b7      	cmp	r7, r6
   d7c2a:	d018      	beq.n	d7c5e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d7c2c:	b11c      	cbz	r4, d7c36 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d7c2e:	4631      	mov	r1, r6
   d7c30:	4620      	mov	r0, r4
   d7c32:	f000 fd17 	bl	d8664 <_ZN6StringC1EOS_>
                end->~T();
   d7c36:	4630      	mov	r0, r6
   d7c38:	f000 fc98 	bl	d856c <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d7c3c:	3e10      	subs	r6, #16
   d7c3e:	3c10      	subs	r4, #16
   d7c40:	e7f2      	b.n	d7c28 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d7c42:	d00c      	beq.n	d7c5e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d7c44:	42b5      	cmp	r5, r6
   d7c46:	d00a      	beq.n	d7c5e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d7c48:	b11c      	cbz	r4, d7c52 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d7c4a:	4629      	mov	r1, r5
   d7c4c:	4620      	mov	r0, r4
   d7c4e:	f000 fd09 	bl	d8664 <_ZN6StringC1EOS_>
                p->~T();
   d7c52:	4628      	mov	r0, r5
   d7c54:	f000 fc8a 	bl	d856c <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d7c58:	3510      	adds	r5, #16
   d7c5a:	3410      	adds	r4, #16
   d7c5c:	e7f2      	b.n	d7c44 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   d7c5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7c60 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   d7c60:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d7c62:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d7c64:	4605      	mov	r5, r0
        if (n > 0) {
   d7c66:	dd11      	ble.n	d7c8c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   d7c68:	0130      	lsls	r0, r6, #4
   d7c6a:	f7fd f8b3 	bl	d4dd4 <malloc>
            if (!d) {
   d7c6e:	4604      	mov	r4, r0
   d7c70:	b158      	cbz	r0, d7c8a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d7c72:	e9d5 1200 	ldrd	r1, r2, [r5]
   d7c76:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d7c7a:	f7ff ffc7 	bl	d7c0c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d7c7e:	6828      	ldr	r0, [r5, #0]
   d7c80:	f7fd f8b0 	bl	d4de4 <free>
        data_ = d;
   d7c84:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d7c86:	60ae      	str	r6, [r5, #8]
        return true;
   d7c88:	2001      	movs	r0, #1
    }
   d7c8a:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d7c8c:	2400      	movs	r4, #0
   d7c8e:	e7f6      	b.n	d7c7e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000d7c90 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d7c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7c94:	4691      	mov	r9, r2
   d7c96:	b097      	sub	sp, #92	; 0x5c
        capacity_(0) {
   d7c98:	2300      	movs	r3, #0
   d7c9a:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
   d7c9c:	f8d9 1004 	ldr.w	r1, [r9, #4]
   d7ca0:	930c      	str	r3, [sp, #48]	; 0x30
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d7ca2:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   d7ca4:	4299      	cmp	r1, r3
        capacity_(0) {
   d7ca6:	e9c0 3300 	strd	r3, r3, [r0]
   d7caa:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d7cae:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d7cb2:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d7cb6:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d7cb8:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   d7cba:	dc23      	bgt.n	d7d04 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   d7cbc:	e9d9 5700 	ldrd	r5, r7, [r9]
   d7cc0:	2314      	movs	r3, #20
   d7cc2:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   d7cc6:	42af      	cmp	r7, r5
   d7cc8:	d03b      	beq.n	d7d42 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   d7cca:	4629      	mov	r1, r5
   d7ccc:	a80d      	add	r0, sp, #52	; 0x34
   d7cce:	f000 fcc9 	bl	d8664 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   d7cd2:	a90d      	add	r1, sp, #52	; 0x34
   d7cd4:	a811      	add	r0, sp, #68	; 0x44
   d7cd6:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   d7cd8:	f000 fcc4 	bl	d8664 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7cdc:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
   d7ce0:	4299      	cmp	r1, r3
   d7ce2:	da1b      	bge.n	d7d1c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   d7ce4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
   d7ce6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
   d7ce8:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d7cec:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d7cf0:	4631      	mov	r1, r6
   d7cf2:	f106 0010 	add.w	r0, r6, #16
   d7cf6:	f7ff ff89 	bl	d7c0c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d7cfa:	b9ee      	cbnz	r6, d7d38 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   d7cfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d7cfe:	3301      	adds	r3, #1
   d7d00:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
   d7d02:	e011      	b.n	d7d28 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   d7d04:	a80a      	add	r0, sp, #40	; 0x28
   d7d06:	f7ff ffab 	bl	d7c60 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d7d0a:	2800      	cmp	r0, #0
   d7d0c:	d1d6      	bne.n	d7cbc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
   d7d0e:	a80a      	add	r0, sp, #40	; 0x28
   d7d10:	f7ff fd46 	bl	d77a0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d7d14:	4620      	mov	r0, r4
   d7d16:	b017      	add	sp, #92	; 0x5c
   d7d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7d1c:	3101      	adds	r1, #1
   d7d1e:	a80a      	add	r0, sp, #40	; 0x28
   d7d20:	f7ff ff9e 	bl	d7c60 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d7d24:	2800      	cmp	r0, #0
   d7d26:	d1dd      	bne.n	d7ce4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   d7d28:	a811      	add	r0, sp, #68	; 0x44
   d7d2a:	f000 fc1f 	bl	d856c <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   d7d2e:	a80d      	add	r0, sp, #52	; 0x34
   d7d30:	f000 fc1c 	bl	d856c <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   d7d34:	3514      	adds	r5, #20
   d7d36:	e7c6      	b.n	d7cc6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   d7d38:	a911      	add	r1, sp, #68	; 0x44
   d7d3a:	4630      	mov	r0, r6
   d7d3c:	f000 fc92 	bl	d8664 <_ZN6StringC1EOS_>
   d7d40:	e7dc      	b.n	d7cfc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   d7d42:	2600      	movs	r6, #0
   d7d44:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
   d7d48:	960f      	str	r6, [sp, #60]	; 0x3c
        size_t size = 0; // Name length
   d7d4a:	4637      	mov	r7, r6
   d7d4c:	f04f 0a14 	mov.w	sl, #20
    for (int i = 0; i < cats.size(); ++i) {
   d7d50:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d7d54:	429e      	cmp	r6, r3
   d7d56:	f280 8097 	bge.w	d7e88 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
   d7d5a:	0133      	lsls	r3, r6, #4
   d7d5c:	58d3      	ldr	r3, [r2, r3]
   d7d5e:	9308      	str	r3, [sp, #32]
        if (!category) {
   d7d60:	b90b      	cbnz	r3, d7d66 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
   d7d62:	3601      	adds	r6, #1
   d7d64:	e7f4      	b.n	d7d50 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
   d7d66:	fb0a f306 	mul.w	r3, sl, r6
   d7d6a:	9709      	str	r7, [sp, #36]	; 0x24
   d7d6c:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   d7d6e:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
   d7d70:	a909      	add	r1, sp, #36	; 0x24
   d7d72:	a808      	add	r0, sp, #32
   d7d74:	f7ff fb0a 	bl	d738c <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d7d78:	4683      	mov	fp, r0
   d7d7a:	2800      	cmp	r0, #0
   d7d7c:	d0f1      	beq.n	d7d62 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
   d7d7e:	4601      	mov	r1, r0
   d7d80:	9a09      	ldr	r2, [sp, #36]	; 0x24
            bool found = false;
   d7d82:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d7d86:	f10d 031f 	add.w	r3, sp, #31
   d7d8a:	4628      	mov	r0, r5
   d7d8c:	f7ff fb6e 	bl	d746c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d7d90:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d7d94:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d7d96:	f1b8 0f00 	cmp.w	r8, #0
   d7d9a:	d166      	bne.n	d7e6a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d7d9c:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
            level(-1) {
   d7da0:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   d7da4:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
   d7da8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d7dac:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   d7db0:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   d7db4:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7db8:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   d7dbc:	4293      	cmp	r3, r2
   d7dbe:	db1a      	blt.n	d7df6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
   d7dc0:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
   d7dc4:	f1bb 0f00 	cmp.w	fp, #0
   d7dc8:	dd4a      	ble.n	d7e60 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
   d7dca:	fb0a f00b 	mul.w	r0, sl, fp
   d7dce:	f7fd f801 	bl	d4dd4 <malloc>
            if (!d) {
   d7dd2:	9004      	str	r0, [sp, #16]
   d7dd4:	2800      	cmp	r0, #0
   d7dd6:	d045      	beq.n	d7e64 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
   d7dd8:	e9d5 1200 	ldrd	r1, r2, [r5]
   d7ddc:	fb0a 1202 	mla	r2, sl, r2, r1
   d7de0:	f7ff fe71 	bl	d7ac6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d7de4:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
   d7de6:	6828      	ldr	r0, [r5, #0]
   d7de8:	9304      	str	r3, [sp, #16]
   d7dea:	f7fc fffb 	bl	d4de4 <free>
        data_ = d;
   d7dee:	9b04      	ldr	r3, [sp, #16]
   d7df0:	602b      	str	r3, [r5, #0]
        capacity_ = n;
   d7df2:	f8c5 b008 	str.w	fp, [r5, #8]
    T* const p = data_ + i;
   d7df6:	9b01      	ldr	r3, [sp, #4]
   d7df8:	f8d5 b000 	ldr.w	fp, [r5]
    move(p + 1, p, data_ + size_);
   d7dfc:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   d7dfe:	fb0a f303 	mul.w	r3, sl, r3
   d7e02:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
   d7e06:	f101 0014 	add.w	r0, r1, #20
   d7e0a:	fb0a b202 	mla	r2, sl, r2, fp
   d7e0e:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
   d7e10:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
   d7e12:	f7ff fe58 	bl	d7ac6 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d7e16:	9904      	ldr	r1, [sp, #16]
   d7e18:	b1a9      	cbz	r1, d7e46 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
   d7e1a:	9b05      	ldr	r3, [sp, #20]
   d7e1c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d7e1e:	f84b 2003 	str.w	r2, [fp, r3]
   d7e22:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   d7e26:	808b      	strh	r3, [r1, #4]
   d7e28:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
   d7e2c:	80cb      	strh	r3, [r1, #6]
        capacity_(0) {
   d7e2e:	e9c1 7702 	strd	r7, r7, [r1, #8]
   d7e32:	610f      	str	r7, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7e34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d7e36:	608b      	str	r3, [r1, #8]
   d7e38:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
   d7e3a:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
   d7e3c:	60cb      	str	r3, [r1, #12]
   d7e3e:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
   d7e40:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
   d7e42:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d7e44:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
   d7e46:	686b      	ldr	r3, [r5, #4]
   d7e48:	3301      	adds	r3, #1
   d7e4a:	606b      	str	r3, [r5, #4]
   d7e4c:	a813      	add	r0, sp, #76	; 0x4c
   d7e4e:	f7ff fc93 	bl	d7778 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d7e52:	f1b8 0f00 	cmp.w	r8, #0
   d7e56:	d008      	beq.n	d7e6a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
   d7e58:	a80d      	add	r0, sp, #52	; 0x34
   d7e5a:	f7ff fc8d 	bl	d7778 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d7e5e:	e756      	b.n	d7d0e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   d7e60:	4643      	mov	r3, r8
   d7e62:	e7c0      	b.n	d7de6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d7e64:	f04f 0801 	mov.w	r8, #1
   d7e68:	e7f0      	b.n	d7e4c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
   d7e6a:	9b01      	ldr	r3, [sp, #4]
   d7e6c:	682d      	ldr	r5, [r5, #0]
   d7e6e:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
   d7e72:	9b08      	ldr	r3, [sp, #32]
   d7e74:	781b      	ldrb	r3, [r3, #0]
   d7e76:	b92b      	cbnz	r3, d7e84 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
   d7e78:	f8d9 3000 	ldr.w	r3, [r9]
   d7e7c:	9a02      	ldr	r2, [sp, #8]
   d7e7e:	4413      	add	r3, r2
   d7e80:	7c1b      	ldrb	r3, [r3, #16]
   d7e82:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   d7e84:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   d7e86:	e773      	b.n	d7d70 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7e88:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7e8a:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7e8c:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   d7e8e:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7e90:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7e92:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
   d7e94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   d7e96:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7e98:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7e9a:	60a2      	str	r2, [r4, #8]
   d7e9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   d7e9e:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7ea0:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7ea2:	60e2      	str	r2, [r4, #12]
   d7ea4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
   d7ea6:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7ea8:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d7eaa:	6122      	str	r2, [r4, #16]
   d7eac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   d7eae:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
   d7eb0:	9b03      	ldr	r3, [sp, #12]
   d7eb2:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
   d7eb4:	6162      	str	r2, [r4, #20]
   d7eb6:	7623      	strb	r3, [r4, #24]
   d7eb8:	e7ce      	b.n	d7e58 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>
	...

000d7ebc <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d7ebc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d7ebe:	4605      	mov	r5, r0
   d7ec0:	4b09      	ldr	r3, [pc, #36]	; (d7ee8 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d7ec2:	f845 3b04 	str.w	r3, [r5], #4
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d7ec6:	4604      	mov	r4, r0
   d7ec8:	460e      	mov	r6, r1
        filter_(level, filters) {
   d7eca:	a801      	add	r0, sp, #4
   d7ecc:	4611      	mov	r1, r2
   d7ece:	f7fc fc0e 	bl	d46ee <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d7ed2:	aa01      	add	r2, sp, #4
   d7ed4:	4631      	mov	r1, r6
   d7ed6:	4628      	mov	r0, r5
   d7ed8:	f7ff feda 	bl	d7c90 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d7edc:	a801      	add	r0, sp, #4
   d7ede:	f7fc fba3 	bl	d4628 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d7ee2:	4620      	mov	r0, r4
   d7ee4:	b004      	add	sp, #16
   d7ee6:	bd70      	pop	{r4, r5, r6, pc}
   d7ee8:	000d92b4 	.word	0x000d92b4

000d7eec <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   d7eec:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7eee:	460f      	mov	r7, r1
   d7ef0:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d7ef2:	4926      	ldr	r1, [pc, #152]	; (d7f8c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
   d7ef4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d7ef6:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   d7ef8:	4616      	mov	r6, r2
   d7efa:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d7efc:	f001 f801 	bl	d8f02 <strcmp>
   d7f00:	bb00      	cbnz	r0, d7f44 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
   d7f02:	b1e4      	cbz	r4, d7f3e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d7f04:	4629      	mov	r1, r5
   d7f06:	4668      	mov	r0, sp
   d7f08:	f7ff fc90 	bl	d782c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d7f0c:	4920      	ldr	r1, [pc, #128]	; (d7f90 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d7f0e:	2024      	movs	r0, #36	; 0x24
   d7f10:	f000 fe59 	bl	d8bc6 <_ZnwjRKSt9nothrow_t>
   d7f14:	4605      	mov	r5, r0
   d7f16:	b170      	cbz	r0, d7f36 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d7f18:	4669      	mov	r1, sp
   d7f1a:	a803      	add	r0, sp, #12
   d7f1c:	f7fc fbe7 	bl	d46ee <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d7f20:	aa03      	add	r2, sp, #12
   d7f22:	4631      	mov	r1, r6
   d7f24:	4628      	mov	r0, r5
   d7f26:	f7ff ffc9 	bl	d7ebc <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d7f2a:	a803      	add	r0, sp, #12
   d7f2c:	f7fc fb7c 	bl	d4628 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
   d7f30:	4b18      	ldr	r3, [pc, #96]	; (d7f94 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
   d7f32:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
   d7f34:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d7f36:	4668      	mov	r0, sp
   d7f38:	f7fc fb76 	bl	d4628 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d7f3c:	462c      	mov	r4, r5
}
   d7f3e:	4620      	mov	r0, r4
   d7f40:	b007      	add	sp, #28
   d7f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d7f44:	4914      	ldr	r1, [pc, #80]	; (d7f98 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
   d7f46:	4638      	mov	r0, r7
   d7f48:	f000 ffdb 	bl	d8f02 <strcmp>
   d7f4c:	b9e0      	cbnz	r0, d7f88 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
   d7f4e:	2c00      	cmp	r4, #0
   d7f50:	d0f5      	beq.n	d7f3e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d7f52:	4629      	mov	r1, r5
   d7f54:	4668      	mov	r0, sp
   d7f56:	f7ff fc69 	bl	d782c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d7f5a:	490d      	ldr	r1, [pc, #52]	; (d7f90 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d7f5c:	2024      	movs	r0, #36	; 0x24
   d7f5e:	f000 fe32 	bl	d8bc6 <_ZnwjRKSt9nothrow_t>
   d7f62:	4605      	mov	r5, r0
   d7f64:	2800      	cmp	r0, #0
   d7f66:	d0e6      	beq.n	d7f36 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d7f68:	4669      	mov	r1, sp
   d7f6a:	a803      	add	r0, sp, #12
   d7f6c:	f7fc fbbf 	bl	d46ee <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d7f70:	aa03      	add	r2, sp, #12
   d7f72:	4631      	mov	r1, r6
   d7f74:	4628      	mov	r0, r5
   d7f76:	f7ff ffa1 	bl	d7ebc <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d7f7a:	a803      	add	r0, sp, #12
   d7f7c:	f7fc fb54 	bl	d4628 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d7f80:	4b06      	ldr	r3, [pc, #24]	; (d7f9c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
   d7f82:	602b      	str	r3, [r5, #0]
   d7f84:	622c      	str	r4, [r5, #32]
}
   d7f86:	e7d6      	b.n	d7f36 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
   d7f88:	2400      	movs	r4, #0
   d7f8a:	e7d8      	b.n	d7f3e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
   d7f8c:	000d9585 	.word	0x000d9585
   d7f90:	000d9740 	.word	0x000d9740
   d7f94:	000d961c 	.word	0x000d961c
   d7f98:	000d9589 	.word	0x000d9589
   d7f9c:	000d9604 	.word	0x000d9604

000d7fa0 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   d7fa0:	4b01      	ldr	r3, [pc, #4]	; (d7fa8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d7fa2:	4a02      	ldr	r2, [pc, #8]	; (d7fac <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d7fa4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d7fa6:	4770      	bx	lr
   d7fa8:	2003e64c 	.word	0x2003e64c
   d7fac:	000d959a 	.word	0x000d959a

000d7fb0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7fb4:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   d7fb6:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7fba:	4604      	mov	r4, r0
   d7fbc:	460e      	mov	r6, r1
   d7fbe:	4617      	mov	r7, r2
   d7fc0:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   d7fc2:	f000 fcff 	bl	d89c4 <_Z16_fetch_usbserialv>
   d7fc6:	4581      	cmp	r9, r0
   d7fc8:	d04e      	beq.n	d8068 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb8>
    if (attr.has_time) {
   d7fca:	792b      	ldrb	r3, [r5, #4]
   d7fcc:	0719      	lsls	r1, r3, #28
   d7fce:	d505      	bpl.n	d7fdc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2c>
        return this->printf_impl(false, format, args...);
   d7fd0:	696b      	ldr	r3, [r5, #20]
   d7fd2:	4a56      	ldr	r2, [pc, #344]	; (d812c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   d7fd4:	6a20      	ldr	r0, [r4, #32]
   d7fd6:	2100      	movs	r1, #0
   d7fd8:	f000 fa77 	bl	d84ca <_ZN5Print11printf_implEbPKcz>
    if (category) {
   d7fdc:	f1b8 0f00 	cmp.w	r8, #0
   d7fe0:	d00d      	beq.n	d7ffe <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4e>
        write('[');
   d7fe2:	215b      	movs	r1, #91	; 0x5b
   d7fe4:	4620      	mov	r0, r4
   d7fe6:	f7ff fa34 	bl	d7452 <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d7fea:	4641      	mov	r1, r8
   d7fec:	4620      	mov	r0, r4
   d7fee:	f7ff fa21 	bl	d7434 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d7ff2:	6823      	ldr	r3, [r4, #0]
   d7ff4:	494e      	ldr	r1, [pc, #312]	; (d8130 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   d7ff6:	68db      	ldr	r3, [r3, #12]
   d7ff8:	2202      	movs	r2, #2
   d7ffa:	4620      	mov	r0, r4
   d7ffc:	4798      	blx	r3
    if (attr.has_file) {
   d7ffe:	792b      	ldrb	r3, [r5, #4]
   d8000:	07da      	lsls	r2, r3, #31
   d8002:	d524      	bpl.n	d804e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9e>
        s = extractFileName(attr.file); // Strip directory path
   d8004:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   d8008:	212f      	movs	r1, #47	; 0x2f
   d800a:	4640      	mov	r0, r8
   d800c:	f000 ffd0 	bl	d8fb0 <strrchr>
    if (s1) {
   d8010:	b108      	cbz	r0, d8016 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x66>
        return s1 + 1;
   d8012:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   d8016:	4641      	mov	r1, r8
   d8018:	4620      	mov	r0, r4
   d801a:	f7ff fa0b 	bl	d7434 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d801e:	792b      	ldrb	r3, [r5, #4]
   d8020:	079b      	lsls	r3, r3, #30
   d8022:	d509      	bpl.n	d8038 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x88>
            write(':');
   d8024:	213a      	movs	r1, #58	; 0x3a
   d8026:	4620      	mov	r0, r4
   d8028:	f7ff fa13 	bl	d7452 <_ZN5spark16StreamLogHandler5writeEc>
   d802c:	68eb      	ldr	r3, [r5, #12]
   d802e:	4a41      	ldr	r2, [pc, #260]	; (d8134 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d8030:	6a20      	ldr	r0, [r4, #32]
   d8032:	2100      	movs	r1, #0
   d8034:	f000 fa49 	bl	d84ca <_ZN5Print11printf_implEbPKcz>
        if (attr.has_function) {
   d8038:	792a      	ldrb	r2, [r5, #4]
   d803a:	6823      	ldr	r3, [r4, #0]
   d803c:	f012 0f04 	tst.w	r2, #4
   d8040:	68db      	ldr	r3, [r3, #12]
            write(", ", 2);
   d8042:	bf14      	ite	ne
   d8044:	493c      	ldrne	r1, [pc, #240]	; (d8138 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
            write(": ", 2);
   d8046:	493d      	ldreq	r1, [pc, #244]	; (d813c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
            write(", ", 2);
   d8048:	2202      	movs	r2, #2
            write(": ", 2);
   d804a:	4620      	mov	r0, r4
   d804c:	4798      	blx	r3
    if (attr.has_function) {
   d804e:	792b      	ldrb	r3, [r5, #4]
   d8050:	0758      	lsls	r0, r3, #29
   d8052:	d51d      	bpl.n	d8090 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe0>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d8054:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d8056:	460b      	mov	r3, r1
   d8058:	461a      	mov	r2, r3
    for (; *s; ++s) {
   d805a:	f813 0b01 	ldrb.w	r0, [r3], #1
   d805e:	b160      	cbz	r0, d807a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xca>
        if (*s == ' ') {
   d8060:	2820      	cmp	r0, #32
   d8062:	d108      	bne.n	d8076 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
            s1 = s + 1; // Skip return type
   d8064:	4619      	mov	r1, r3
   d8066:	e7f7      	b.n	d8058 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa8>
    if (stream_ == &Serial && Network.listening()) {
   d8068:	4835      	ldr	r0, [pc, #212]	; (d8140 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d806a:	f000 f960 	bl	d832e <_ZN5spark12NetworkClass9listeningEv>
   d806e:	2800      	cmp	r0, #0
   d8070:	d0ab      	beq.n	d7fca <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   d8072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   d8076:	2828      	cmp	r0, #40	; 0x28
   d8078:	d1ee      	bne.n	d8058 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa8>
        write(s, n);
   d807a:	6823      	ldr	r3, [r4, #0]
   d807c:	1a52      	subs	r2, r2, r1
   d807e:	68db      	ldr	r3, [r3, #12]
   d8080:	4620      	mov	r0, r4
   d8082:	4798      	blx	r3
        write("(): ", 4);
   d8084:	6823      	ldr	r3, [r4, #0]
   d8086:	492f      	ldr	r1, [pc, #188]	; (d8144 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d8088:	68db      	ldr	r3, [r3, #12]
   d808a:	2204      	movs	r2, #4
   d808c:	4620      	mov	r0, r4
   d808e:	4798      	blx	r3
    return log_level_name(level, nullptr);
   d8090:	2100      	movs	r1, #0
   d8092:	4638      	mov	r0, r7
   d8094:	f7fc fdf2 	bl	d4c7c <log_level_name>
   d8098:	4601      	mov	r1, r0
    write(s);
   d809a:	4620      	mov	r0, r4
   d809c:	f7ff f9ca 	bl	d7434 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d80a0:	6823      	ldr	r3, [r4, #0]
   d80a2:	4926      	ldr	r1, [pc, #152]	; (d813c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d80a4:	68db      	ldr	r3, [r3, #12]
   d80a6:	2202      	movs	r2, #2
   d80a8:	4620      	mov	r0, r4
   d80aa:	4798      	blx	r3
    if (msg) {
   d80ac:	b11e      	cbz	r6, d80b6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x106>
        write(msg);
   d80ae:	4631      	mov	r1, r6
   d80b0:	4620      	mov	r0, r4
   d80b2:	f7ff f9bf 	bl	d7434 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   d80b6:	792b      	ldrb	r3, [r5, #4]
   d80b8:	f013 0f30 	tst.w	r3, #48	; 0x30
   d80bc:	d02d      	beq.n	d811a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16a>
        write(" [", 2);
   d80be:	6823      	ldr	r3, [r4, #0]
   d80c0:	4921      	ldr	r1, [pc, #132]	; (d8148 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d80c2:	68db      	ldr	r3, [r3, #12]
   d80c4:	2202      	movs	r2, #2
   d80c6:	4620      	mov	r0, r4
   d80c8:	4798      	blx	r3
        if (attr.has_code) {
   d80ca:	792b      	ldrb	r3, [r5, #4]
   d80cc:	06d9      	lsls	r1, r3, #27
   d80ce:	d50b      	bpl.n	d80e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x138>
            write("code = ", 7);
   d80d0:	6823      	ldr	r3, [r4, #0]
   d80d2:	491e      	ldr	r1, [pc, #120]	; (d814c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d80d4:	68db      	ldr	r3, [r3, #12]
   d80d6:	2207      	movs	r2, #7
   d80d8:	4620      	mov	r0, r4
   d80da:	4798      	blx	r3
   d80dc:	69ab      	ldr	r3, [r5, #24]
   d80de:	4a1c      	ldr	r2, [pc, #112]	; (d8150 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d80e0:	6a20      	ldr	r0, [r4, #32]
   d80e2:	2100      	movs	r1, #0
   d80e4:	f000 f9f1 	bl	d84ca <_ZN5Print11printf_implEbPKcz>
        if (attr.has_details) {
   d80e8:	792b      	ldrb	r3, [r5, #4]
   d80ea:	069a      	lsls	r2, r3, #26
   d80ec:	d511      	bpl.n	d8112 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x162>
            if (attr.has_code) {
   d80ee:	06db      	lsls	r3, r3, #27
   d80f0:	d505      	bpl.n	d80fe <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14e>
                write(", ", 2);
   d80f2:	6823      	ldr	r3, [r4, #0]
   d80f4:	4910      	ldr	r1, [pc, #64]	; (d8138 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d80f6:	68db      	ldr	r3, [r3, #12]
   d80f8:	2202      	movs	r2, #2
   d80fa:	4620      	mov	r0, r4
   d80fc:	4798      	blx	r3
            write("details = ", 10);
   d80fe:	6823      	ldr	r3, [r4, #0]
   d8100:	4914      	ldr	r1, [pc, #80]	; (d8154 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
   d8102:	68db      	ldr	r3, [r3, #12]
   d8104:	4620      	mov	r0, r4
   d8106:	220a      	movs	r2, #10
   d8108:	4798      	blx	r3
            write(attr.details);
   d810a:	69e9      	ldr	r1, [r5, #28]
   d810c:	4620      	mov	r0, r4
   d810e:	f7ff f991 	bl	d7434 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   d8112:	215d      	movs	r1, #93	; 0x5d
   d8114:	4620      	mov	r0, r4
   d8116:	f7ff f99c 	bl	d7452 <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   d811a:	6823      	ldr	r3, [r4, #0]
   d811c:	490e      	ldr	r1, [pc, #56]	; (d8158 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a8>)
   d811e:	68db      	ldr	r3, [r3, #12]
   d8120:	4620      	mov	r0, r4
   d8122:	2202      	movs	r2, #2
}
   d8124:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   d8128:	4718      	bx	r3
   d812a:	bf00      	nop
   d812c:	000d959e 	.word	0x000d959e
   d8130:	000d95a5 	.word	0x000d95a5
   d8134:	000d956c 	.word	0x000d956c
   d8138:	000d95a8 	.word	0x000d95a8
   d813c:	000d95ad 	.word	0x000d95ad
   d8140:	2003e678 	.word	0x2003e678
   d8144:	000d95ab 	.word	0x000d95ab
   d8148:	000d95b0 	.word	0x000d95b0
   d814c:	000d95b3 	.word	0x000d95b3
   d8150:	000d95bb 	.word	0x000d95bb
   d8154:	000d95be 	.word	0x000d95be
   d8158:	000d95c9 	.word	0x000d95c9

000d815c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d815c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8160:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
   d8162:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d8166:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d8168:	4605      	mov	r5, r0
   d816a:	460f      	mov	r7, r1
   d816c:	4690      	mov	r8, r2
   d816e:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   d8170:	f000 fc28 	bl	d89c4 <_Z16_fetch_usbserialv>
   d8174:	4581      	cmp	r9, r0
   d8176:	d105      	bne.n	d8184 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d8178:	4849      	ldr	r0, [pc, #292]	; (d82a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   d817a:	f000 f8d8 	bl	d832e <_ZN5spark12NetworkClass9listeningEv>
   d817e:	2800      	cmp	r0, #0
   d8180:	f040 808a 	bne.w	d8298 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
    JSONStreamWriter json(*this->stream());
   d8184:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   d8186:	4a47      	ldr	r2, [pc, #284]	; (d82a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d8188:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   d818a:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   d818e:	a801      	add	r0, sp, #4
        strm_(stream) {
   d8190:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   d8192:	f88d 9008 	strb.w	r9, [sp, #8]
   d8196:	f7ff f842 	bl	d721e <_ZN5spark10JSONWriter11beginObjectEv>
   d819a:	4649      	mov	r1, r9
   d819c:	4640      	mov	r0, r8
   d819e:	f7fc fd6d 	bl	d4c7c <log_level_name>
    json.name("l", 1).value(s);
   d81a2:	4941      	ldr	r1, [pc, #260]	; (d82a8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d81a4:	4680      	mov	r8, r0
   d81a6:	2201      	movs	r2, #1
   d81a8:	a801      	add	r0, sp, #4
   d81aa:	f7ff f8c1 	bl	d7330 <_ZN5spark10JSONWriter4nameEPKcj>
   d81ae:	4641      	mov	r1, r8
   d81b0:	f7ff f932 	bl	d7418 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   d81b4:	b13f      	cbz	r7, d81c6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d81b6:	493d      	ldr	r1, [pc, #244]	; (d82ac <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d81b8:	2201      	movs	r2, #1
   d81ba:	a801      	add	r0, sp, #4
   d81bc:	f7ff f8b8 	bl	d7330 <_ZN5spark10JSONWriter4nameEPKcj>
   d81c0:	4639      	mov	r1, r7
   d81c2:	f7ff f929 	bl	d7418 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   d81c6:	b13e      	cbz	r6, d81d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d81c8:	4939      	ldr	r1, [pc, #228]	; (d82b0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d81ca:	2201      	movs	r2, #1
   d81cc:	a801      	add	r0, sp, #4
   d81ce:	f7ff f8af 	bl	d7330 <_ZN5spark10JSONWriter4nameEPKcj>
   d81d2:	4631      	mov	r1, r6
   d81d4:	f7ff f920 	bl	d7418 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   d81d8:	7923      	ldrb	r3, [r4, #4]
   d81da:	07df      	lsls	r7, r3, #31
   d81dc:	d50e      	bpl.n	d81fc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d81de:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   d81e0:	212f      	movs	r1, #47	; 0x2f
   d81e2:	4630      	mov	r0, r6
   d81e4:	f000 fee4 	bl	d8fb0 <strrchr>
    if (s1) {
   d81e8:	b100      	cbz	r0, d81ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d81ea:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   d81ec:	4931      	ldr	r1, [pc, #196]	; (d82b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d81ee:	2201      	movs	r2, #1
   d81f0:	a801      	add	r0, sp, #4
   d81f2:	f7ff f89d 	bl	d7330 <_ZN5spark10JSONWriter4nameEPKcj>
   d81f6:	4631      	mov	r1, r6
   d81f8:	f7ff f90e 	bl	d7418 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   d81fc:	7923      	ldrb	r3, [r4, #4]
   d81fe:	079e      	lsls	r6, r3, #30
   d8200:	d507      	bpl.n	d8212 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d8202:	492d      	ldr	r1, [pc, #180]	; (d82b8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d8204:	2202      	movs	r2, #2
   d8206:	a801      	add	r0, sp, #4
   d8208:	f7ff f892 	bl	d7330 <_ZN5spark10JSONWriter4nameEPKcj>
   d820c:	68e1      	ldr	r1, [r4, #12]
   d820e:	f7ff f813 	bl	d7238 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   d8212:	7923      	ldrb	r3, [r4, #4]
   d8214:	0758      	lsls	r0, r3, #29
   d8216:	d514      	bpl.n	d8242 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d8218:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d821a:	4633      	mov	r3, r6
   d821c:	461f      	mov	r7, r3
    for (; *s; ++s) {
   d821e:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8222:	b12a      	cbz	r2, d8230 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   d8224:	2a20      	cmp	r2, #32
   d8226:	d101      	bne.n	d822c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d8228:	461e      	mov	r6, r3
   d822a:	e7f7      	b.n	d821c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   d822c:	2a28      	cmp	r2, #40	; 0x28
   d822e:	d1f5      	bne.n	d821c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   d8230:	4922      	ldr	r1, [pc, #136]	; (d82bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d8232:	2202      	movs	r2, #2
   d8234:	a801      	add	r0, sp, #4
   d8236:	f7ff f87b 	bl	d7330 <_ZN5spark10JSONWriter4nameEPKcj>
   d823a:	1bba      	subs	r2, r7, r6
   d823c:	4631      	mov	r1, r6
   d823e:	f7ff f887 	bl	d7350 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   d8242:	7923      	ldrb	r3, [r4, #4]
   d8244:	0719      	lsls	r1, r3, #28
   d8246:	d507      	bpl.n	d8258 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   d8248:	491d      	ldr	r1, [pc, #116]	; (d82c0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d824a:	2201      	movs	r2, #1
   d824c:	a801      	add	r0, sp, #4
   d824e:	f7ff f86f 	bl	d7330 <_ZN5spark10JSONWriter4nameEPKcj>
   d8252:	6961      	ldr	r1, [r4, #20]
   d8254:	f7ff f802 	bl	d725c <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   d8258:	7923      	ldrb	r3, [r4, #4]
   d825a:	06da      	lsls	r2, r3, #27
   d825c:	d508      	bpl.n	d8270 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   d825e:	2204      	movs	r2, #4
   d8260:	4918      	ldr	r1, [pc, #96]	; (d82c4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d8262:	eb0d 0002 	add.w	r0, sp, r2
   d8266:	f7ff f863 	bl	d7330 <_ZN5spark10JSONWriter4nameEPKcj>
   d826a:	69a1      	ldr	r1, [r4, #24]
   d826c:	f7fe ffe4 	bl	d7238 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   d8270:	7923      	ldrb	r3, [r4, #4]
   d8272:	069b      	lsls	r3, r3, #26
   d8274:	d507      	bpl.n	d8286 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   d8276:	4914      	ldr	r1, [pc, #80]	; (d82c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d8278:	2206      	movs	r2, #6
   d827a:	a801      	add	r0, sp, #4
   d827c:	f7ff f858 	bl	d7330 <_ZN5spark10JSONWriter4nameEPKcj>
   d8280:	69e1      	ldr	r1, [r4, #28]
   d8282:	f7ff f8c9 	bl	d7418 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   d8286:	a801      	add	r0, sp, #4
   d8288:	f7fe ffb3 	bl	d71f2 <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d828c:	6a28      	ldr	r0, [r5, #32]
   d828e:	490f      	ldr	r1, [pc, #60]	; (d82cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d8290:	6803      	ldr	r3, [r0, #0]
   d8292:	2202      	movs	r2, #2
   d8294:	68db      	ldr	r3, [r3, #12]
   d8296:	4798      	blx	r3
}
   d8298:	b005      	add	sp, #20
   d829a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d829e:	bf00      	nop
   d82a0:	2003e678 	.word	0x2003e678
   d82a4:	000d95ec 	.word	0x000d95ec
   d82a8:	000d9191 	.word	0x000d9191
   d82ac:	000d95cc 	.word	0x000d95cc
   d82b0:	000d95ce 	.word	0x000d95ce
   d82b4:	000d95d0 	.word	0x000d95d0
   d82b8:	000d95d2 	.word	0x000d95d2
   d82bc:	000d95d5 	.word	0x000d95d5
   d82c0:	000d9233 	.word	0x000d9233
   d82c4:	000d95d8 	.word	0x000d95d8
   d82c8:	000d95dd 	.word	0x000d95dd
   d82cc:	000d95c9 	.word	0x000d95c9

000d82d0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d82d0:	2300      	movs	r3, #0
   d82d2:	6840      	ldr	r0, [r0, #4]
   d82d4:	461a      	mov	r2, r3
   d82d6:	f7fc bd2d 	b.w	d4d34 <network_connect>

000d82da <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d82da:	6840      	ldr	r0, [r0, #4]
   d82dc:	2200      	movs	r2, #0
   d82de:	2102      	movs	r1, #2
   d82e0:	f7fc bd38 	b.w	d4d54 <network_disconnect>

000d82e4 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d82e4:	2200      	movs	r2, #0
   d82e6:	6840      	ldr	r0, [r0, #4]
   d82e8:	4611      	mov	r1, r2
   d82ea:	f7fc bd2b 	b.w	d4d44 <network_connecting>

000d82ee <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d82ee:	2200      	movs	r2, #0
   d82f0:	6840      	ldr	r0, [r0, #4]
   d82f2:	4611      	mov	r1, r2
   d82f4:	f7fc bd36 	b.w	d4d64 <network_ready>

000d82f8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d82f8:	2300      	movs	r3, #0
   d82fa:	6840      	ldr	r0, [r0, #4]
   d82fc:	461a      	mov	r2, r3
   d82fe:	4619      	mov	r1, r3
   d8300:	f7fc bd38 	b.w	d4d74 <network_on>

000d8304 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d8304:	2300      	movs	r3, #0
   d8306:	6840      	ldr	r0, [r0, #4]
   d8308:	461a      	mov	r2, r3
   d830a:	4619      	mov	r1, r3
   d830c:	f7fc bd3a 	b.w	d4d84 <network_off>

000d8310 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d8310:	6840      	ldr	r0, [r0, #4]
   d8312:	2200      	movs	r2, #0
   d8314:	f081 0101 	eor.w	r1, r1, #1
   d8318:	f7fc bd3c 	b.w	d4d94 <network_listen>

000d831c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d831c:	6840      	ldr	r0, [r0, #4]
   d831e:	2200      	movs	r2, #0
   d8320:	f7fc bd48 	b.w	d4db4 <network_set_listen_timeout>

000d8324 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d8324:	2200      	movs	r2, #0
   d8326:	6840      	ldr	r0, [r0, #4]
   d8328:	4611      	mov	r1, r2
   d832a:	f7fc bd4b 	b.w	d4dc4 <network_get_listen_timeout>

000d832e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d832e:	2200      	movs	r2, #0
   d8330:	6840      	ldr	r0, [r0, #4]
   d8332:	4611      	mov	r1, r2
   d8334:	f7fc bd36 	b.w	d4da4 <network_listening>

000d8338 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d8338:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d833c:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d833e:	b095      	sub	sp, #84	; 0x54
   d8340:	4616      	mov	r6, r2
   d8342:	460d      	mov	r5, r1
   d8344:	4607      	mov	r7, r0
    IPAddress addr;
   d8346:	f7fe fdf5 	bl	d6f34 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d834a:	4621      	mov	r1, r4
   d834c:	2218      	movs	r2, #24
   d834e:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d8350:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d8352:	f000 fd93 	bl	d8e7c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d8356:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d8358:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d835c:	4621      	mov	r1, r4
   d835e:	466b      	mov	r3, sp
   d8360:	aa0c      	add	r2, sp, #48	; 0x30
   d8362:	4630      	mov	r0, r6
   d8364:	f7fc fbe2 	bl	d4b2c <netdb_getaddrinfo>
    if (!r) {
   d8368:	4604      	mov	r4, r0
   d836a:	2800      	cmp	r0, #0
   d836c:	d146      	bne.n	d83fc <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d836e:	4602      	mov	r2, r0
   d8370:	2101      	movs	r1, #1
   d8372:	6868      	ldr	r0, [r5, #4]
   d8374:	f7fc fcf6 	bl	d4d64 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8378:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d837a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d837c:	4622      	mov	r2, r4
   d837e:	6868      	ldr	r0, [r5, #4]
   d8380:	f7fc fcf0 	bl	d4d64 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8384:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8386:	4681      	mov	r9, r0
        bool ok = false;
   d8388:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d838a:	2e00      	cmp	r6, #0
   d838c:	d036      	beq.n	d83fc <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d838e:	2900      	cmp	r1, #0
   d8390:	d134      	bne.n	d83fc <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d8392:	6873      	ldr	r3, [r6, #4]
   d8394:	2b02      	cmp	r3, #2
   d8396:	d003      	beq.n	d83a0 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d8398:	2b0a      	cmp	r3, #10
   d839a:	d00b      	beq.n	d83b4 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d839c:	69f6      	ldr	r6, [r6, #28]
   d839e:	e7f4      	b.n	d838a <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d83a0:	f1b8 0f00 	cmp.w	r8, #0
   d83a4:	d004      	beq.n	d83b0 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d83a6:	6971      	ldr	r1, [r6, #20]
   d83a8:	4638      	mov	r0, r7
   d83aa:	3104      	adds	r1, #4
   d83ac:	f7fe fdef 	bl	d6f8e <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d83b0:	4641      	mov	r1, r8
   d83b2:	e7f3      	b.n	d839c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d83b4:	f1b9 0f00 	cmp.w	r9, #0
   d83b8:	d101      	bne.n	d83be <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d83ba:	4649      	mov	r1, r9
   d83bc:	e7ee      	b.n	d839c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d83be:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d83c0:	2210      	movs	r2, #16
   d83c2:	a801      	add	r0, sp, #4
   d83c4:	f000 fd5a 	bl	d8e7c <memset>
                    a.v = 6;
   d83c8:	2306      	movs	r3, #6
   d83ca:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d83ce:	ad01      	add	r5, sp, #4
   d83d0:	f104 0308 	add.w	r3, r4, #8
   d83d4:	3418      	adds	r4, #24
   d83d6:	6818      	ldr	r0, [r3, #0]
   d83d8:	6859      	ldr	r1, [r3, #4]
   d83da:	462a      	mov	r2, r5
   d83dc:	c203      	stmia	r2!, {r0, r1}
   d83de:	3308      	adds	r3, #8
   d83e0:	42a3      	cmp	r3, r4
   d83e2:	4615      	mov	r5, r2
   d83e4:	d1f7      	bne.n	d83d6 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d83e6:	a901      	add	r1, sp, #4
   d83e8:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d83ea:	ad07      	add	r5, sp, #28
   d83ec:	f7fe fdb0 	bl	d6f50 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d83f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d83f2:	1d3c      	adds	r4, r7, #4
   d83f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d83f6:	682b      	ldr	r3, [r5, #0]
   d83f8:	7023      	strb	r3, [r4, #0]
   d83fa:	e7de      	b.n	d83ba <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d83fc:	9800      	ldr	r0, [sp, #0]
   d83fe:	f7fc fb8d 	bl	d4b1c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d8402:	4638      	mov	r0, r7
   d8404:	b015      	add	sp, #84	; 0x54
   d8406:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d840c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d840c:	4b02      	ldr	r3, [pc, #8]	; (d8418 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d840e:	4a03      	ldr	r2, [pc, #12]	; (d841c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d8410:	601a      	str	r2, [r3, #0]
   d8412:	2200      	movs	r2, #0
   d8414:	605a      	str	r2, [r3, #4]

} // spark
   d8416:	4770      	bx	lr
   d8418:	2003e678 	.word	0x2003e678
   d841c:	000d9664 	.word	0x000d9664

000d8420 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d8420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8422:	4606      	mov	r6, r0
   d8424:	460d      	mov	r5, r1
  size_t n = 0;
   d8426:	188f      	adds	r7, r1, r2
   d8428:	2400      	movs	r4, #0
  while (size--) {
   d842a:	42bd      	cmp	r5, r7
   d842c:	d00c      	beq.n	d8448 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d842e:	6833      	ldr	r3, [r6, #0]
   d8430:	f815 1b01 	ldrb.w	r1, [r5], #1
   d8434:	689b      	ldr	r3, [r3, #8]
   d8436:	4630      	mov	r0, r6
   d8438:	4798      	blx	r3
     if (chunk>=0)
   d843a:	1e03      	subs	r3, r0, #0
   d843c:	db01      	blt.n	d8442 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d843e:	441c      	add	r4, r3
  while (size--) {
   d8440:	e7f3      	b.n	d842a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d8442:	2c00      	cmp	r4, #0
   d8444:	bf08      	it	eq
   d8446:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d8448:	4620      	mov	r0, r4
   d844a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d844c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d844c:	b513      	push	{r0, r1, r4, lr}
   d844e:	4604      	mov	r4, r0
    }
   d8450:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d8452:	b159      	cbz	r1, d846c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d8454:	9101      	str	r1, [sp, #4]
   d8456:	f000 fd84 	bl	d8f62 <strlen>
   d845a:	6823      	ldr	r3, [r4, #0]
   d845c:	9901      	ldr	r1, [sp, #4]
   d845e:	68db      	ldr	r3, [r3, #12]
   d8460:	4602      	mov	r2, r0
   d8462:	4620      	mov	r0, r4
    }
   d8464:	b002      	add	sp, #8
   d8466:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d846a:	4718      	bx	r3
    }
   d846c:	b002      	add	sp, #8
   d846e:	bd10      	pop	{r4, pc}

000d8470 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d8470:	6803      	ldr	r3, [r0, #0]
   d8472:	689b      	ldr	r3, [r3, #8]
   d8474:	4718      	bx	r3

000d8476 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d8476:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d8478:	210d      	movs	r1, #13
{
   d847a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d847c:	f7ff fff8 	bl	d8470 <_ZN5Print5printEc>
  n += print('\n');
   d8480:	210a      	movs	r1, #10
  size_t n = print('\r');
   d8482:	4604      	mov	r4, r0
  n += print('\n');
   d8484:	4628      	mov	r0, r5
   d8486:	f7ff fff3 	bl	d8470 <_ZN5Print5printEc>
  return n;
}
   d848a:	4420      	add	r0, r4
   d848c:	bd38      	pop	{r3, r4, r5, pc}

000d848e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d848e:	b530      	push	{r4, r5, lr}
   d8490:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d8492:	2300      	movs	r3, #0
   d8494:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d8498:	2a01      	cmp	r2, #1
   d849a:	bf98      	it	ls
   d849c:	220a      	movls	r2, #10
   d849e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d84a0:	460d      	mov	r5, r1
   d84a2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d84a6:	fb01 5312 	mls	r3, r1, r2, r5
   d84aa:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d84ae:	2b09      	cmp	r3, #9
   d84b0:	bf94      	ite	ls
   d84b2:	3330      	addls	r3, #48	; 0x30
   d84b4:	3337      	addhi	r3, #55	; 0x37
   d84b6:	b2db      	uxtb	r3, r3
  } while(n);
   d84b8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d84ba:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d84be:	d9ef      	bls.n	d84a0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d84c0:	4621      	mov	r1, r4
   d84c2:	f7ff ffc3 	bl	d844c <_ZN5Print5writeEPKc>
}
   d84c6:	b00b      	add	sp, #44	; 0x2c
   d84c8:	bd30      	pop	{r4, r5, pc}

000d84ca <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d84ca:	b40c      	push	{r2, r3}
   d84cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d84d0:	b088      	sub	sp, #32
   d84d2:	af00      	add	r7, sp, #0
   d84d4:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d84d8:	4605      	mov	r5, r0
   d84da:	f854 2b04 	ldr.w	r2, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d84de:	607a      	str	r2, [r7, #4]
{
   d84e0:	460e      	mov	r6, r1
    size_t n = vsnprintf(test, bufsize, format, marker);
   d84e2:	4623      	mov	r3, r4
   d84e4:	2114      	movs	r1, #20
   d84e6:	f107 000c 	add.w	r0, r7, #12
    va_start(marker, format);
   d84ea:	60bc      	str	r4, [r7, #8]
    size_t n = vsnprintf(test, bufsize, format, marker);
   d84ec:	f7fc fc8a 	bl	d4e04 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d84f0:	2813      	cmp	r0, #19
   d84f2:	687a      	ldr	r2, [r7, #4]
   d84f4:	d811      	bhi.n	d851a <_ZN5Print11printf_implEbPKcz+0x50>
  return write(str);
   d84f6:	f107 010c 	add.w	r1, r7, #12
   d84fa:	4628      	mov	r0, r5
   d84fc:	f7ff ffa6 	bl	d844c <_ZN5Print5writeEPKc>
   d8500:	4604      	mov	r4, r0
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d8502:	b11e      	cbz	r6, d850c <_ZN5Print11printf_implEbPKcz+0x42>
        n += println();
   d8504:	4628      	mov	r0, r5
   d8506:	f7ff ffb6 	bl	d8476 <_ZN5Print7printlnEv>
   d850a:	4404      	add	r4, r0
    return n;
}
   d850c:	4620      	mov	r0, r4
   d850e:	3720      	adds	r7, #32
   d8510:	46bd      	mov	sp, r7
   d8512:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d8516:	b002      	add	sp, #8
   d8518:	4770      	bx	lr
        char bigger[n+1];
   d851a:	f100 0308 	add.w	r3, r0, #8
   d851e:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d8522:	46e8      	mov	r8, sp
        char bigger[n+1];
   d8524:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, marker);
   d8528:	1c41      	adds	r1, r0, #1
   d852a:	4623      	mov	r3, r4
   d852c:	4668      	mov	r0, sp
        va_start(marker, format);
   d852e:	60bc      	str	r4, [r7, #8]
        n = vsnprintf(bigger, n+1, format, marker);
   d8530:	f7fc fc68 	bl	d4e04 <vsnprintf>
  return write(str);
   d8534:	4669      	mov	r1, sp
   d8536:	4628      	mov	r0, r5
   d8538:	f7ff ff88 	bl	d844c <_ZN5Print5writeEPKc>
   d853c:	4604      	mov	r4, r0
   d853e:	46c5      	mov	sp, r8
   d8540:	e7df      	b.n	d8502 <_ZN5Print11printf_implEbPKcz+0x38>

000d8542 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d8542:	b510      	push	{r4, lr}
   d8544:	4604      	mov	r4, r0
   d8546:	f7fe f9d3 	bl	d68f0 <_ZNSt14_Function_baseD1Ev>
   d854a:	4620      	mov	r0, r4
   d854c:	bd10      	pop	{r4, pc}
	...

000d8550 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d8550:	4803      	ldr	r0, [pc, #12]	; (d8560 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d8552:	4a04      	ldr	r2, [pc, #16]	; (d8564 <_GLOBAL__sub_I_RGB+0x14>)
   d8554:	4904      	ldr	r1, [pc, #16]	; (d8568 <_GLOBAL__sub_I_RGB+0x18>)
   d8556:	2300      	movs	r3, #0
   d8558:	6083      	str	r3, [r0, #8]
   d855a:	f000 bb2d 	b.w	d8bb8 <__aeabi_atexit>
   d855e:	bf00      	nop
   d8560:	2003e680 	.word	0x2003e680
   d8564:	2003dee8 	.word	0x2003dee8
   d8568:	000d8543 	.word	0x000d8543

000d856c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d856c:	b510      	push	{r4, lr}
   d856e:	4604      	mov	r4, r0
{
	free(buffer);
   d8570:	6800      	ldr	r0, [r0, #0]
   d8572:	f7fc fc37 	bl	d4de4 <free>
}
   d8576:	4620      	mov	r0, r4
   d8578:	bd10      	pop	{r4, pc}

000d857a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d857a:	b510      	push	{r4, lr}
   d857c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d857e:	6800      	ldr	r0, [r0, #0]
   d8580:	b108      	cbz	r0, d8586 <_ZN6String10invalidateEv+0xc>
   d8582:	f7fc fc2f 	bl	d4de4 <free>
	buffer = NULL;
   d8586:	2300      	movs	r3, #0
	capacity = len = 0;
   d8588:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d858c:	6023      	str	r3, [r4, #0]
}
   d858e:	bd10      	pop	{r4, pc}

000d8590 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d8590:	b538      	push	{r3, r4, r5, lr}
   d8592:	4604      	mov	r4, r0
   d8594:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d8596:	6800      	ldr	r0, [r0, #0]
   d8598:	3101      	adds	r1, #1
   d859a:	f7fc fc2b 	bl	d4df4 <realloc>
	if (newbuffer) {
   d859e:	b110      	cbz	r0, d85a6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d85a0:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d85a4:	2001      	movs	r0, #1
	}
	return 0;
}
   d85a6:	bd38      	pop	{r3, r4, r5, pc}

000d85a8 <_ZN6String7reserveEj>:
{
   d85a8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d85aa:	6803      	ldr	r3, [r0, #0]
{
   d85ac:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d85ae:	b123      	cbz	r3, d85ba <_ZN6String7reserveEj+0x12>
   d85b0:	6843      	ldr	r3, [r0, #4]
   d85b2:	428b      	cmp	r3, r1
   d85b4:	d301      	bcc.n	d85ba <_ZN6String7reserveEj+0x12>
   d85b6:	2001      	movs	r0, #1
}
   d85b8:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d85ba:	4620      	mov	r0, r4
   d85bc:	f7ff ffe8 	bl	d8590 <_ZN6String12changeBufferEj>
   d85c0:	2800      	cmp	r0, #0
   d85c2:	d0f9      	beq.n	d85b8 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d85c4:	68a3      	ldr	r3, [r4, #8]
   d85c6:	2b00      	cmp	r3, #0
   d85c8:	d1f5      	bne.n	d85b6 <_ZN6String7reserveEj+0xe>
   d85ca:	6822      	ldr	r2, [r4, #0]
   d85cc:	7013      	strb	r3, [r2, #0]
   d85ce:	e7f2      	b.n	d85b6 <_ZN6String7reserveEj+0xe>

000d85d0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d85d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d85d2:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d85d4:	4611      	mov	r1, r2
   d85d6:	9201      	str	r2, [sp, #4]
{
   d85d8:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d85da:	f7ff ffe5 	bl	d85a8 <_ZN6String7reserveEj>
   d85de:	9a01      	ldr	r2, [sp, #4]
   d85e0:	b928      	cbnz	r0, d85ee <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d85e2:	4620      	mov	r0, r4
   d85e4:	f7ff ffc9 	bl	d857a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d85e8:	4620      	mov	r0, r4
   d85ea:	b003      	add	sp, #12
   d85ec:	bd30      	pop	{r4, r5, pc}
	len = length;
   d85ee:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d85f0:	4629      	mov	r1, r5
   d85f2:	6820      	ldr	r0, [r4, #0]
   d85f4:	f000 fc1a 	bl	d8e2c <memcpy>
	buffer[len] = 0;
   d85f8:	6822      	ldr	r2, [r4, #0]
   d85fa:	68a3      	ldr	r3, [r4, #8]
   d85fc:	2100      	movs	r1, #0
   d85fe:	54d1      	strb	r1, [r2, r3]
	return *this;
   d8600:	e7f2      	b.n	d85e8 <_ZN6String4copyEPKcj+0x18>

000d8602 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d8602:	2300      	movs	r3, #0
String::String(const char *cstr)
   d8604:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d8606:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d860a:	4604      	mov	r4, r0
	len = 0;
   d860c:	6083      	str	r3, [r0, #8]
	flags = 0;
   d860e:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d8610:	b141      	cbz	r1, d8624 <_ZN6StringC1EPKc+0x22>
   d8612:	4608      	mov	r0, r1
   d8614:	9101      	str	r1, [sp, #4]
   d8616:	f000 fca4 	bl	d8f62 <strlen>
   d861a:	9901      	ldr	r1, [sp, #4]
   d861c:	4602      	mov	r2, r0
   d861e:	4620      	mov	r0, r4
   d8620:	f7ff ffd6 	bl	d85d0 <_ZN6String4copyEPKcj>
}
   d8624:	4620      	mov	r0, r4
   d8626:	b002      	add	sp, #8
   d8628:	bd10      	pop	{r4, pc}

000d862a <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d862a:	b538      	push	{r3, r4, r5, lr}
   d862c:	4605      	mov	r5, r0
	if (buffer) {
   d862e:	6800      	ldr	r0, [r0, #0]
{
   d8630:	460c      	mov	r4, r1
	if (buffer) {
   d8632:	b168      	cbz	r0, d8650 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d8634:	686a      	ldr	r2, [r5, #4]
   d8636:	688b      	ldr	r3, [r1, #8]
   d8638:	429a      	cmp	r2, r3
   d863a:	d307      	bcc.n	d864c <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d863c:	6809      	ldr	r1, [r1, #0]
   d863e:	f000 fc6a 	bl	d8f16 <strcpy>
			len = rhs.len;
   d8642:	68a3      	ldr	r3, [r4, #8]
   d8644:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d8646:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d8648:	60a3      	str	r3, [r4, #8]
}
   d864a:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d864c:	f7fc fbca 	bl	d4de4 <free>
	buffer = rhs.buffer;
   d8650:	6823      	ldr	r3, [r4, #0]
   d8652:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d8654:	6863      	ldr	r3, [r4, #4]
   d8656:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d8658:	68a3      	ldr	r3, [r4, #8]
   d865a:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d865c:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d865e:	e9c4 3300 	strd	r3, r3, [r4]
   d8662:	e7f1      	b.n	d8648 <_ZN6String4moveERS_+0x1e>

000d8664 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   d8664:	b510      	push	{r4, lr}
	buffer = NULL;
   d8666:	2300      	movs	r3, #0
	capacity = 0;
   d8668:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   d866c:	4604      	mov	r4, r0
	len = 0;
   d866e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d8670:	7303      	strb	r3, [r0, #12]
	move(rval);
   d8672:	f7ff ffda 	bl	d862a <_ZN6String4moveERS_>
}
   d8676:	4620      	mov	r0, r4
   d8678:	bd10      	pop	{r4, pc}

000d867a <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d867a:	4288      	cmp	r0, r1
{
   d867c:	b510      	push	{r4, lr}
   d867e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d8680:	d005      	beq.n	d868e <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d8682:	680b      	ldr	r3, [r1, #0]
   d8684:	b12b      	cbz	r3, d8692 <_ZN6StringaSERKS_+0x18>
   d8686:	688a      	ldr	r2, [r1, #8]
   d8688:	4619      	mov	r1, r3
   d868a:	f7ff ffa1 	bl	d85d0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d868e:	4620      	mov	r0, r4
   d8690:	bd10      	pop	{r4, pc}
	else invalidate();
   d8692:	f7ff ff72 	bl	d857a <_ZN6String10invalidateEv>
   d8696:	e7fa      	b.n	d868e <_ZN6StringaSERKS_+0x14>

000d8698 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d8698:	b510      	push	{r4, lr}
	buffer = NULL;
   d869a:	2300      	movs	r3, #0
String::String(const String &value)
   d869c:	4604      	mov	r4, r0
	capacity = 0;
   d869e:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d86a2:	6083      	str	r3, [r0, #8]
	flags = 0;
   d86a4:	7303      	strb	r3, [r0, #12]
	*this = value;
   d86a6:	f7ff ffe8 	bl	d867a <_ZN6StringaSERKS_>
}
   d86aa:	4620      	mov	r0, r4
   d86ac:	bd10      	pop	{r4, pc}

000d86ae <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d86ae:	b513      	push	{r0, r1, r4, lr}
   d86b0:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d86b2:	b159      	cbz	r1, d86cc <_ZN6StringaSEPKc+0x1e>
   d86b4:	4608      	mov	r0, r1
   d86b6:	9101      	str	r1, [sp, #4]
   d86b8:	f000 fc53 	bl	d8f62 <strlen>
   d86bc:	9901      	ldr	r1, [sp, #4]
   d86be:	4602      	mov	r2, r0
   d86c0:	4620      	mov	r0, r4
   d86c2:	f7ff ff85 	bl	d85d0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d86c6:	4620      	mov	r0, r4
   d86c8:	b002      	add	sp, #8
   d86ca:	bd10      	pop	{r4, pc}
	else invalidate();
   d86cc:	f7ff ff55 	bl	d857a <_ZN6String10invalidateEv>
   d86d0:	e7f9      	b.n	d86c6 <_ZN6StringaSEPKc+0x18>

000d86d2 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d86d2:	b570      	push	{r4, r5, r6, lr}
   d86d4:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d86d6:	460e      	mov	r6, r1
   d86d8:	b909      	cbnz	r1, d86de <_ZN6String6concatEPKcj+0xc>
   d86da:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d86dc:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d86de:	b16a      	cbz	r2, d86fc <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d86e0:	6884      	ldr	r4, [r0, #8]
   d86e2:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d86e4:	4621      	mov	r1, r4
   d86e6:	f7ff ff5f 	bl	d85a8 <_ZN6String7reserveEj>
   d86ea:	2800      	cmp	r0, #0
   d86ec:	d0f5      	beq.n	d86da <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d86ee:	6828      	ldr	r0, [r5, #0]
   d86f0:	68ab      	ldr	r3, [r5, #8]
   d86f2:	4631      	mov	r1, r6
   d86f4:	4418      	add	r0, r3
   d86f6:	f000 fc0e 	bl	d8f16 <strcpy>
	len = newlen;
   d86fa:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d86fc:	2001      	movs	r0, #1
   d86fe:	e7ed      	b.n	d86dc <_ZN6String6concatEPKcj+0xa>

000d8700 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d8700:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d8702:	2300      	movs	r3, #0
	buf[0] = c;
   d8704:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   d8708:	2201      	movs	r2, #1
   d870a:	a901      	add	r1, sp, #4
	buf[1] = 0;
   d870c:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d8710:	f7ff ffdf 	bl	d86d2 <_ZN6String6concatEPKcj>
}
   d8714:	b003      	add	sp, #12
   d8716:	f85d fb04 	ldr.w	pc, [sp], #4

000d871a <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   d871a:	6802      	ldr	r2, [r0, #0]
{
   d871c:	460b      	mov	r3, r1
   d871e:	6809      	ldr	r1, [r1, #0]
	if (!buffer || !s.buffer) {
   d8720:	b162      	cbz	r2, d873c <_ZNK6String9compareToERKS_+0x22>
   d8722:	b941      	cbnz	r1, d8736 <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   d8724:	6880      	ldr	r0, [r0, #8]
   d8726:	b160      	cbz	r0, d8742 <_ZNK6String9compareToERKS_+0x28>
   d8728:	7810      	ldrb	r0, [r2, #0]
   d872a:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   d872c:	6898      	ldr	r0, [r3, #8]
   d872e:	b140      	cbz	r0, d8742 <_ZNK6String9compareToERKS_+0x28>
   d8730:	7809      	ldrb	r1, [r1, #0]
   d8732:	4248      	negs	r0, r1
   d8734:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   d8736:	4610      	mov	r0, r2
   d8738:	f000 bbe3 	b.w	d8f02 <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   d873c:	2900      	cmp	r1, #0
   d873e:	d1f5      	bne.n	d872c <_ZNK6String9compareToERKS_+0x12>
		return 0;
   d8740:	4608      	mov	r0, r1
}
   d8742:	4770      	bx	lr

000d8744 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   d8744:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   d8746:	6882      	ldr	r2, [r0, #8]
   d8748:	688b      	ldr	r3, [r1, #8]
   d874a:	429a      	cmp	r2, r3
   d874c:	d105      	bne.n	d875a <_ZNK6String6equalsERKS_+0x16>
   d874e:	f7ff ffe4 	bl	d871a <_ZNK6String9compareToERKS_>
   d8752:	fab0 f080 	clz	r0, r0
   d8756:	0940      	lsrs	r0, r0, #5
}
   d8758:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   d875a:	2000      	movs	r0, #0
   d875c:	e7fc      	b.n	d8758 <_ZNK6String6equalsERKS_+0x14>

000d875e <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
   d875e:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d8760:	6882      	ldr	r2, [r0, #8]
   d8762:	b93a      	cbnz	r2, d8774 <_ZNK6String6equalsEPKc+0x16>
   d8764:	b121      	cbz	r1, d8770 <_ZNK6String6equalsEPKc+0x12>
   d8766:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d8768:	fab0 f080 	clz	r0, r0
   d876c:	0940      	lsrs	r0, r0, #5
   d876e:	e000      	b.n	d8772 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d8770:	2001      	movs	r0, #1
}
   d8772:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d8774:	6800      	ldr	r0, [r0, #0]
   d8776:	b909      	cbnz	r1, d877c <_ZNK6String6equalsEPKc+0x1e>
   d8778:	7800      	ldrb	r0, [r0, #0]
   d877a:	e7f5      	b.n	d8768 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d877c:	f000 fbc1 	bl	d8f02 <strcmp>
   d8780:	e7f2      	b.n	d8768 <_ZNK6String6equalsEPKc+0xa>

000d8782 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d8782:	b510      	push	{r4, lr}
   d8784:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d8786:	6800      	ldr	r0, [r0, #0]
   d8788:	b118      	cbz	r0, d8792 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d878a:	f7fc fb2b 	bl	d4de4 <free>
            wakeupSource_ = nullptr;
   d878e:	2300      	movs	r3, #0
   d8790:	6023      	str	r3, [r4, #0]
        }
    }
   d8792:	bd10      	pop	{r4, pc}

000d8794 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d8794:	b510      	push	{r4, lr}
   d8796:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d8798:	f7ff fff3 	bl	d8782 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d879c:	4620      	mov	r0, r4
   d879e:	bd10      	pop	{r4, pc}

000d87a0 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d87a0:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d87a2:	4b09      	ldr	r3, [pc, #36]	; (d87c8 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d87a4:	4c09      	ldr	r4, [pc, #36]	; (d87cc <_GLOBAL__sub_I_System+0x2c>)
   d87a6:	2202      	movs	r2, #2
   d87a8:	2000      	movs	r0, #0
   d87aa:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d87ac:	4b08      	ldr	r3, [pc, #32]	; (d87d0 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d87ae:	6020      	str	r0, [r4, #0]
   d87b0:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d87b2:	71a0      	strb	r0, [r4, #6]
   d87b4:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d87b6:	f7fc fa71 	bl	d4c9c <set_system_mode>
SystemClass System;
   d87ba:	4620      	mov	r0, r4
   d87bc:	4a05      	ldr	r2, [pc, #20]	; (d87d4 <_GLOBAL__sub_I_System+0x34>)
   d87be:	4906      	ldr	r1, [pc, #24]	; (d87d8 <_GLOBAL__sub_I_System+0x38>)
   d87c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d87c4:	f000 b9f8 	b.w	d8bb8 <__aeabi_atexit>
   d87c8:	2003e69c 	.word	0x2003e69c
   d87cc:	2003e690 	.word	0x2003e690
   d87d0:	ffff0000 	.word	0xffff0000
   d87d4:	2003dee8 	.word	0x2003dee8
   d87d8:	000d8795 	.word	0x000d8795

000d87dc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d87dc:	4b02      	ldr	r3, [pc, #8]	; (d87e8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d87de:	681a      	ldr	r2, [r3, #0]
   d87e0:	4b02      	ldr	r3, [pc, #8]	; (d87ec <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d87e2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d87e4:	4770      	bx	lr
   d87e6:	bf00      	nop
   d87e8:	2003de80 	.word	0x2003de80
   d87ec:	2003e6a0 	.word	0x2003e6a0

000d87f0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d87f0:	4770      	bx	lr

000d87f2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d87f2:	7441      	strb	r1, [r0, #17]
}
   d87f4:	4770      	bx	lr

000d87f6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d87f6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d87f8:	7c00      	ldrb	r0, [r0, #16]
   d87fa:	f7fc f9d7 	bl	d4bac <hal_usart_available_data_for_write>
}
   d87fe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8802:	bd08      	pop	{r3, pc}

000d8804 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d8804:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d8806:	7c00      	ldrb	r0, [r0, #16]
   d8808:	f7fc f9b0 	bl	d4b6c <hal_usart_available>
}
   d880c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8810:	bd08      	pop	{r3, pc}

000d8812 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d8812:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d8814:	7c00      	ldrb	r0, [r0, #16]
   d8816:	f7fc f9b9 	bl	d4b8c <hal_usart_peek>
}
   d881a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d881e:	bd08      	pop	{r3, pc}

000d8820 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d8820:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d8822:	7c00      	ldrb	r0, [r0, #16]
   d8824:	f7fc f9aa 	bl	d4b7c <hal_usart_read>
}
   d8828:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d882c:	bd08      	pop	{r3, pc}

000d882e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d882e:	7c00      	ldrb	r0, [r0, #16]
   d8830:	f7fc b9b4 	b.w	d4b9c <hal_usart_flush>

000d8834 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d8834:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d8836:	7c45      	ldrb	r5, [r0, #17]
{
   d8838:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d883a:	b12d      	cbz	r5, d8848 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d883c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d883e:	b003      	add	sp, #12
   d8840:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d8844:	f7fc b98a 	b.w	d4b5c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d8848:	7c00      	ldrb	r0, [r0, #16]
   d884a:	9101      	str	r1, [sp, #4]
   d884c:	f7fc f9ae 	bl	d4bac <hal_usart_available_data_for_write>
   d8850:	2800      	cmp	r0, #0
   d8852:	9901      	ldr	r1, [sp, #4]
   d8854:	dcf2      	bgt.n	d883c <_ZN11USARTSerial5writeEh+0x8>
}
   d8856:	4628      	mov	r0, r5
   d8858:	b003      	add	sp, #12
   d885a:	bd30      	pop	{r4, r5, pc}

000d885c <_ZN11USARTSerialD0Ev>:
   d885c:	b510      	push	{r4, lr}
   d885e:	2114      	movs	r1, #20
   d8860:	4604      	mov	r4, r0
   d8862:	f000 f9ae 	bl	d8bc2 <_ZdlPvj>
   d8866:	4620      	mov	r0, r4
   d8868:	bd10      	pop	{r4, pc}
	...

000d886c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d886c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d886e:	f04f 0c00 	mov.w	ip, #0
   d8872:	4604      	mov	r4, r0
   d8874:	4608      	mov	r0, r1
   d8876:	4611      	mov	r1, r2
   d8878:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d887c:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d8880:	4a04      	ldr	r2, [pc, #16]	; (d8894 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d8882:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d8884:	2201      	movs	r2, #1
  _serial = serial;
   d8886:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d8888:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d888a:	461a      	mov	r2, r3
   d888c:	f7fc f956 	bl	d4b3c <hal_usart_init>
}
   d8890:	4620      	mov	r0, r4
   d8892:	bd10      	pop	{r4, pc}
   d8894:	000d96b4 	.word	0x000d96b4

000d8898 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   d8898:	7c00      	ldrb	r0, [r0, #16]
   d889a:	2300      	movs	r3, #0
   d889c:	f7fc b98e 	b.w	d4bbc <hal_usart_begin_config>

000d88a0 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   d88a0:	2200      	movs	r2, #0
   d88a2:	f7ff bff9 	b.w	d8898 <_ZN11USARTSerial5beginEmm>

000d88a6 <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   d88a6:	7c00      	ldrb	r0, [r0, #16]
   d88a8:	f7fc b950 	b.w	d4b4c <hal_usart_end>

000d88ac <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d88ac:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d88ae:	4c0e      	ldr	r4, [pc, #56]	; (d88e8 <_Z22__fetch_global_Serial1v+0x3c>)
   d88b0:	7821      	ldrb	r1, [r4, #0]
   d88b2:	f3bf 8f5b 	dmb	ish
   d88b6:	f011 0101 	ands.w	r1, r1, #1
   d88ba:	d112      	bne.n	d88e2 <_Z22__fetch_global_Serial1v+0x36>
   d88bc:	4620      	mov	r0, r4
   d88be:	9101      	str	r1, [sp, #4]
   d88c0:	f7fb fbf6 	bl	d40b0 <__cxa_guard_acquire>
   d88c4:	9901      	ldr	r1, [sp, #4]
   d88c6:	b160      	cbz	r0, d88e2 <_Z22__fetch_global_Serial1v+0x36>
   d88c8:	4a08      	ldr	r2, [pc, #32]	; (d88ec <_Z22__fetch_global_Serial1v+0x40>)
   d88ca:	4b09      	ldr	r3, [pc, #36]	; (d88f0 <_Z22__fetch_global_Serial1v+0x44>)
   d88cc:	4809      	ldr	r0, [pc, #36]	; (d88f4 <_Z22__fetch_global_Serial1v+0x48>)
   d88ce:	f7ff ffcd 	bl	d886c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d88d2:	4620      	mov	r0, r4
   d88d4:	f7fb fbf1 	bl	d40ba <__cxa_guard_release>
   d88d8:	4a07      	ldr	r2, [pc, #28]	; (d88f8 <_Z22__fetch_global_Serial1v+0x4c>)
   d88da:	4908      	ldr	r1, [pc, #32]	; (d88fc <_Z22__fetch_global_Serial1v+0x50>)
   d88dc:	4805      	ldr	r0, [pc, #20]	; (d88f4 <_Z22__fetch_global_Serial1v+0x48>)
   d88de:	f000 f96b 	bl	d8bb8 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d88e2:	4804      	ldr	r0, [pc, #16]	; (d88f4 <_Z22__fetch_global_Serial1v+0x48>)
   d88e4:	b002      	add	sp, #8
   d88e6:	bd10      	pop	{r4, pc}
   d88e8:	2003e6a4 	.word	0x2003e6a4
   d88ec:	2003e6a8 	.word	0x2003e6a8
   d88f0:	2003e72c 	.word	0x2003e72c
   d88f4:	2003e7b0 	.word	0x2003e7b0
   d88f8:	2003dee8 	.word	0x2003dee8
   d88fc:	000d87f1 	.word	0x000d87f1

000d8900 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d8900:	7441      	strb	r1, [r0, #17]
}
   d8902:	4770      	bx	lr

000d8904 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d8904:	4770      	bx	lr

000d8906 <_ZN9USBSerial4readEv>:
{
   d8906:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d8908:	2100      	movs	r1, #0
   d890a:	7c00      	ldrb	r0, [r0, #16]
   d890c:	f7fc f986 	bl	d4c1c <HAL_USB_USART_Receive_Data>
}
   d8910:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8914:	bd08      	pop	{r3, pc}

000d8916 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d8916:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d8918:	2101      	movs	r1, #1
   d891a:	7c00      	ldrb	r0, [r0, #16]
   d891c:	f7fc f97e 	bl	d4c1c <HAL_USB_USART_Receive_Data>
}
   d8920:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8924:	bd08      	pop	{r3, pc}

000d8926 <_ZN9USBSerial17availableForWriteEv>:
{
   d8926:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d8928:	7c00      	ldrb	r0, [r0, #16]
   d892a:	f7fc f96f 	bl	d4c0c <HAL_USB_USART_Available_Data_For_Write>
}
   d892e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8932:	bd08      	pop	{r3, pc}

000d8934 <_ZN9USBSerial9availableEv>:
{
   d8934:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d8936:	7c00      	ldrb	r0, [r0, #16]
   d8938:	f7fc f960 	bl	d4bfc <HAL_USB_USART_Available_Data>
}
   d893c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8940:	bd08      	pop	{r3, pc}

000d8942 <_ZN9USBSerial5writeEh>:
{
   d8942:	b513      	push	{r0, r1, r4, lr}
   d8944:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d8946:	7c00      	ldrb	r0, [r0, #16]
{
   d8948:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d894a:	f7fc f95f 	bl	d4c0c <HAL_USB_USART_Available_Data_For_Write>
   d894e:	2800      	cmp	r0, #0
   d8950:	9901      	ldr	r1, [sp, #4]
   d8952:	dc01      	bgt.n	d8958 <_ZN9USBSerial5writeEh+0x16>
   d8954:	7c60      	ldrb	r0, [r4, #17]
   d8956:	b120      	cbz	r0, d8962 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d8958:	7c20      	ldrb	r0, [r4, #16]
   d895a:	f7fc f967 	bl	d4c2c <HAL_USB_USART_Send_Data>
   d895e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d8962:	b002      	add	sp, #8
   d8964:	bd10      	pop	{r4, pc}

000d8966 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d8966:	7c00      	ldrb	r0, [r0, #16]
   d8968:	f7fc b968 	b.w	d4c3c <HAL_USB_USART_Flush_Data>

000d896c <_ZN9USBSerialD0Ev>:
   d896c:	b510      	push	{r4, lr}
   d896e:	2114      	movs	r1, #20
   d8970:	4604      	mov	r4, r0
   d8972:	f000 f926 	bl	d8bc2 <_ZdlPvj>
   d8976:	4620      	mov	r0, r4
   d8978:	bd10      	pop	{r4, pc}
	...

000d897c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d897c:	b510      	push	{r4, lr}
   d897e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8982:	4604      	mov	r4, r0
   d8984:	4608      	mov	r0, r1
   d8986:	2100      	movs	r1, #0
   d8988:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d898c:	4b04      	ldr	r3, [pc, #16]	; (d89a0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d898e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d8990:	2301      	movs	r3, #1
  _serial = serial;
   d8992:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d8994:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d8996:	4611      	mov	r1, r2
   d8998:	f7fc f918 	bl	d4bcc <HAL_USB_USART_Init>
}
   d899c:	4620      	mov	r0, r4
   d899e:	bd10      	pop	{r4, pc}
   d89a0:	000d96e4 	.word	0x000d96e4

000d89a4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d89a4:	7c00      	ldrb	r0, [r0, #16]
   d89a6:	2200      	movs	r2, #0
   d89a8:	f7fc b918 	b.w	d4bdc <HAL_USB_USART_Begin>

000d89ac <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   d89ac:	7c00      	ldrb	r0, [r0, #16]
   d89ae:	f7fc b91d 	b.w	d4bec <HAL_USB_USART_End>

000d89b2 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d89b2:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d89b4:	2214      	movs	r2, #20
{
   d89b6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d89b8:	2100      	movs	r1, #0
   d89ba:	f000 fa5f 	bl	d8e7c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d89be:	4620      	mov	r0, r4
   d89c0:	bd10      	pop	{r4, pc}
	...

000d89c4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d89c4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d89c6:	4c10      	ldr	r4, [pc, #64]	; (d8a08 <_Z16_fetch_usbserialv+0x44>)
{
   d89c8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d89ca:	a803      	add	r0, sp, #12
   d89cc:	f7ff fff1 	bl	d89b2 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d89d0:	7821      	ldrb	r1, [r4, #0]
   d89d2:	f3bf 8f5b 	dmb	ish
   d89d6:	f011 0101 	ands.w	r1, r1, #1
   d89da:	d111      	bne.n	d8a00 <_Z16_fetch_usbserialv+0x3c>
   d89dc:	4620      	mov	r0, r4
   d89de:	9101      	str	r1, [sp, #4]
   d89e0:	f7fb fb66 	bl	d40b0 <__cxa_guard_acquire>
   d89e4:	9901      	ldr	r1, [sp, #4]
   d89e6:	b158      	cbz	r0, d8a00 <_Z16_fetch_usbserialv+0x3c>
   d89e8:	aa03      	add	r2, sp, #12
   d89ea:	4808      	ldr	r0, [pc, #32]	; (d8a0c <_Z16_fetch_usbserialv+0x48>)
   d89ec:	f7ff ffc6 	bl	d897c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d89f0:	4620      	mov	r0, r4
   d89f2:	f7fb fb62 	bl	d40ba <__cxa_guard_release>
   d89f6:	4a06      	ldr	r2, [pc, #24]	; (d8a10 <_Z16_fetch_usbserialv+0x4c>)
   d89f8:	4906      	ldr	r1, [pc, #24]	; (d8a14 <_Z16_fetch_usbserialv+0x50>)
   d89fa:	4804      	ldr	r0, [pc, #16]	; (d8a0c <_Z16_fetch_usbserialv+0x48>)
   d89fc:	f000 f8dc 	bl	d8bb8 <__aeabi_atexit>
	return _usbserial;
}
   d8a00:	4802      	ldr	r0, [pc, #8]	; (d8a0c <_Z16_fetch_usbserialv+0x48>)
   d8a02:	b008      	add	sp, #32
   d8a04:	bd10      	pop	{r4, pc}
   d8a06:	bf00      	nop
   d8a08:	2003e7c4 	.word	0x2003e7c4
   d8a0c:	2003e7c8 	.word	0x2003e7c8
   d8a10:	2003dee8 	.word	0x2003dee8
   d8a14:	000d8905 	.word	0x000d8905

000d8a18 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d8a18:	2200      	movs	r2, #0
   d8a1a:	6840      	ldr	r0, [r0, #4]
   d8a1c:	4611      	mov	r1, r2
   d8a1e:	f7fc b9a1 	b.w	d4d64 <network_ready>

000d8a22 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8a22:	2200      	movs	r2, #0
   d8a24:	6840      	ldr	r0, [r0, #4]
   d8a26:	4611      	mov	r1, r2
   d8a28:	f7fc b9bc 	b.w	d4da4 <network_listening>

000d8a2c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d8a2c:	2200      	movs	r2, #0
   d8a2e:	6840      	ldr	r0, [r0, #4]
   d8a30:	4611      	mov	r1, r2
   d8a32:	f7fc b9c7 	b.w	d4dc4 <network_get_listen_timeout>

000d8a36 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d8a36:	6840      	ldr	r0, [r0, #4]
   d8a38:	2200      	movs	r2, #0
   d8a3a:	f7fc b9bb 	b.w	d4db4 <network_set_listen_timeout>

000d8a3e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d8a3e:	6840      	ldr	r0, [r0, #4]
   d8a40:	2200      	movs	r2, #0
   d8a42:	f081 0101 	eor.w	r1, r1, #1
   d8a46:	f7fc b9a5 	b.w	d4d94 <network_listen>

000d8a4a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d8a4a:	2300      	movs	r3, #0
   d8a4c:	6840      	ldr	r0, [r0, #4]
   d8a4e:	461a      	mov	r2, r3
   d8a50:	4619      	mov	r1, r3
   d8a52:	f7fc b997 	b.w	d4d84 <network_off>

000d8a56 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d8a56:	2300      	movs	r3, #0
   d8a58:	6840      	ldr	r0, [r0, #4]
   d8a5a:	461a      	mov	r2, r3
   d8a5c:	4619      	mov	r1, r3
   d8a5e:	f7fc b989 	b.w	d4d74 <network_on>

000d8a62 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d8a62:	2200      	movs	r2, #0
   d8a64:	6840      	ldr	r0, [r0, #4]
   d8a66:	4611      	mov	r1, r2
   d8a68:	f7fc b96c 	b.w	d4d44 <network_connecting>

000d8a6c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8a6c:	6840      	ldr	r0, [r0, #4]
   d8a6e:	2200      	movs	r2, #0
   d8a70:	2102      	movs	r1, #2
   d8a72:	f7fc b96f 	b.w	d4d54 <network_disconnect>

000d8a76 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d8a76:	2300      	movs	r3, #0
   d8a78:	6840      	ldr	r0, [r0, #4]
   d8a7a:	461a      	mov	r2, r3
   d8a7c:	f7fc b95a 	b.w	d4d34 <network_connect>

000d8a80 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d8a80:	4b02      	ldr	r3, [pc, #8]	; (d8a8c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d8a82:	2204      	movs	r2, #4
   d8a84:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d8a86:	4a02      	ldr	r2, [pc, #8]	; (d8a90 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d8a88:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d8a8a:	4770      	bx	lr
   d8a8c:	2003e7dc 	.word	0x2003e7dc
   d8a90:	000d9714 	.word	0x000d9714

000d8a94 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d8a94:	4b01      	ldr	r3, [pc, #4]	; (d8a9c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d8a96:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d8a98:	4770      	bx	lr
   d8a9a:	bf00      	nop
   d8a9c:	2003de84 	.word	0x2003de84

000d8aa0 <serialEventRun>:
{
   d8aa0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d8aa2:	4b0b      	ldr	r3, [pc, #44]	; (d8ad0 <serialEventRun+0x30>)
   d8aa4:	b143      	cbz	r3, d8ab8 <serialEventRun+0x18>
   d8aa6:	f7ff ff8d 	bl	d89c4 <_Z16_fetch_usbserialv>
   d8aaa:	6803      	ldr	r3, [r0, #0]
   d8aac:	691b      	ldr	r3, [r3, #16]
   d8aae:	4798      	blx	r3
   d8ab0:	2800      	cmp	r0, #0
   d8ab2:	dd01      	ble.n	d8ab8 <serialEventRun+0x18>
        serialEvent();
   d8ab4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d8ab8:	4b06      	ldr	r3, [pc, #24]	; (d8ad4 <serialEventRun+0x34>)
   d8aba:	b143      	cbz	r3, d8ace <serialEventRun+0x2e>
   d8abc:	f7ff fef6 	bl	d88ac <_Z22__fetch_global_Serial1v>
   d8ac0:	6803      	ldr	r3, [r0, #0]
   d8ac2:	691b      	ldr	r3, [r3, #16]
   d8ac4:	4798      	blx	r3
   d8ac6:	2800      	cmp	r0, #0
   d8ac8:	dd01      	ble.n	d8ace <serialEventRun+0x2e>
        serialEvent1();
   d8aca:	f3af 8000 	nop.w
}
   d8ace:	bd08      	pop	{r3, pc}
	...

000d8ad8 <_post_loop>:
{
   d8ad8:	b508      	push	{r3, lr}
	serialEventRun();
   d8ada:	f7ff ffe1 	bl	d8aa0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d8ade:	f7fc f805 	bl	d4aec <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d8ae2:	4b01      	ldr	r3, [pc, #4]	; (d8ae8 <_post_loop+0x10>)
   d8ae4:	6018      	str	r0, [r3, #0]
}
   d8ae6:	bd08      	pop	{r3, pc}
   d8ae8:	2003e7ec 	.word	0x2003e7ec

000d8aec <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d8aec:	4802      	ldr	r0, [pc, #8]	; (d8af8 <_Z33system_initialize_user_backup_ramv+0xc>)
   d8aee:	4a03      	ldr	r2, [pc, #12]	; (d8afc <_Z33system_initialize_user_backup_ramv+0x10>)
   d8af0:	4903      	ldr	r1, [pc, #12]	; (d8b00 <_Z33system_initialize_user_backup_ramv+0x14>)
   d8af2:	1a12      	subs	r2, r2, r0
   d8af4:	f000 b99a 	b.w	d8e2c <memcpy>
   d8af8:	2003f400 	.word	0x2003f400
   d8afc:	2003f404 	.word	0x2003f404
   d8b00:	000d9960 	.word	0x000d9960

000d8b04 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d8b04:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8b06:	2300      	movs	r3, #0
   d8b08:	9300      	str	r3, [sp, #0]
   d8b0a:	461a      	mov	r2, r3
   d8b0c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d8b10:	f7fc f8ee 	bl	d4cf0 <system_ctrl_set_result>
}
   d8b14:	b003      	add	sp, #12
   d8b16:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d8b1c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d8b1c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d8b1e:	8843      	ldrh	r3, [r0, #2]
   d8b20:	2b0a      	cmp	r3, #10
   d8b22:	d008      	beq.n	d8b36 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d8b24:	2b50      	cmp	r3, #80	; 0x50
   d8b26:	d10b      	bne.n	d8b40 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d8b28:	4b09      	ldr	r3, [pc, #36]	; (d8b50 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d8b2a:	681b      	ldr	r3, [r3, #0]
   d8b2c:	b14b      	cbz	r3, d8b42 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d8b2e:	b003      	add	sp, #12
   d8b30:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d8b34:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d8b36:	f7ff ffe5 	bl	d8b04 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d8b3a:	b003      	add	sp, #12
   d8b3c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8b40:	2300      	movs	r3, #0
   d8b42:	9300      	str	r3, [sp, #0]
   d8b44:	461a      	mov	r2, r3
   d8b46:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d8b4a:	f7fc f8d1 	bl	d4cf0 <system_ctrl_set_result>
}
   d8b4e:	e7f4      	b.n	d8b3a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d8b50:	2003e7e8 	.word	0x2003e7e8

000d8b54 <module_user_init_hook>:
{
   d8b54:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d8b56:	4c12      	ldr	r4, [pc, #72]	; (d8ba0 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d8b58:	4812      	ldr	r0, [pc, #72]	; (d8ba4 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d8b5a:	4d13      	ldr	r5, [pc, #76]	; (d8ba8 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d8b5c:	2100      	movs	r1, #0
   d8b5e:	f7fc f969 	bl	d4e34 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d8b62:	6823      	ldr	r3, [r4, #0]
   d8b64:	42ab      	cmp	r3, r5
   d8b66:	4b11      	ldr	r3, [pc, #68]	; (d8bac <module_user_init_hook+0x58>)
   d8b68:	bf0c      	ite	eq
   d8b6a:	2201      	moveq	r2, #1
   d8b6c:	2200      	movne	r2, #0
   d8b6e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d8b70:	d002      	beq.n	d8b78 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d8b72:	f7ff ffbb 	bl	d8aec <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d8b76:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d8b78:	f7fb ffa8 	bl	d4acc <HAL_RNG_GetRandomNumber>
   d8b7c:	4604      	mov	r4, r0
    srand(seed);
   d8b7e:	f000 f985 	bl	d8e8c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d8b82:	4b0b      	ldr	r3, [pc, #44]	; (d8bb0 <module_user_init_hook+0x5c>)
   d8b84:	b113      	cbz	r3, d8b8c <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d8b86:	4620      	mov	r0, r4
   d8b88:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d8b8c:	2100      	movs	r1, #0
   d8b8e:	4808      	ldr	r0, [pc, #32]	; (d8bb0 <module_user_init_hook+0x5c>)
   d8b90:	f7fc f8c8 	bl	d4d24 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d8b94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d8b98:	4806      	ldr	r0, [pc, #24]	; (d8bb4 <module_user_init_hook+0x60>)
   d8b9a:	2100      	movs	r1, #0
   d8b9c:	f7fc b89e 	b.w	d4cdc <system_ctrl_set_app_request_handler>
   d8ba0:	2003f400 	.word	0x2003f400
   d8ba4:	000d8a95 	.word	0x000d8a95
   d8ba8:	9a271c1e 	.word	0x9a271c1e
   d8bac:	2003e7e4 	.word	0x2003e7e4
   d8bb0:	00000000 	.word	0x00000000
   d8bb4:	000d8b1d 	.word	0x000d8b1d

000d8bb8 <__aeabi_atexit>:
   d8bb8:	460b      	mov	r3, r1
   d8bba:	4601      	mov	r1, r0
   d8bbc:	4618      	mov	r0, r3
   d8bbe:	f000 b919 	b.w	d8df4 <__cxa_atexit>

000d8bc2 <_ZdlPvj>:
   d8bc2:	f7fb ba68 	b.w	d4096 <_ZdlPv>

000d8bc6 <_ZnwjRKSt9nothrow_t>:
   d8bc6:	f7fb ba64 	b.w	d4092 <_Znwj>

000d8bca <_ZSt25__throw_bad_function_callv>:
   d8bca:	b508      	push	{r3, lr}
   d8bcc:	f7fc f922 	bl	d4e14 <abort>

000d8bd0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d8bd0:	4901      	ldr	r1, [pc, #4]	; (d8bd8 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d8bd2:	f000 b8f9 	b.w	d8dc8 <_ZNKSt9type_infoeqERKS_>
   d8bd6:	bf00      	nop
   d8bd8:	000d975c 	.word	0x000d975c

000d8bdc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d8bdc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d8bde:	2400      	movs	r4, #0
   d8be0:	2310      	movs	r3, #16
   d8be2:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d8be6:	6803      	ldr	r3, [r0, #0]
   d8be8:	9400      	str	r4, [sp, #0]
   d8bea:	699e      	ldr	r6, [r3, #24]
   d8bec:	f88d 4004 	strb.w	r4, [sp, #4]
   d8bf0:	4615      	mov	r5, r2
   d8bf2:	466b      	mov	r3, sp
   d8bf4:	6812      	ldr	r2, [r2, #0]
   d8bf6:	47b0      	blx	r6
   d8bf8:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d8bfc:	f003 0306 	and.w	r3, r3, #6
   d8c00:	2b06      	cmp	r3, #6
   d8c02:	bf03      	ittte	eq
   d8c04:	9b00      	ldreq	r3, [sp, #0]
   d8c06:	602b      	streq	r3, [r5, #0]
   d8c08:	2001      	moveq	r0, #1
   d8c0a:	4620      	movne	r0, r4
   d8c0c:	b004      	add	sp, #16
   d8c0e:	bd70      	pop	{r4, r5, r6, pc}

000d8c10 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d8c10:	9800      	ldr	r0, [sp, #0]
   d8c12:	4290      	cmp	r0, r2
   d8c14:	bf14      	ite	ne
   d8c16:	2001      	movne	r0, #1
   d8c18:	2006      	moveq	r0, #6
   d8c1a:	4770      	bx	lr

000d8c1c <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d8c1c:	b510      	push	{r4, lr}
   d8c1e:	4b03      	ldr	r3, [pc, #12]	; (d8c2c <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d8c20:	6003      	str	r3, [r0, #0]
   d8c22:	4604      	mov	r4, r0
   d8c24:	f000 f8cd 	bl	d8dc2 <_ZNSt9type_infoD1Ev>
   d8c28:	4620      	mov	r0, r4
   d8c2a:	bd10      	pop	{r4, pc}
   d8c2c:	000d979c 	.word	0x000d979c

000d8c30 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d8c30:	b510      	push	{r4, lr}
   d8c32:	4604      	mov	r4, r0
   d8c34:	f7ff fff2 	bl	d8c1c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d8c38:	4620      	mov	r0, r4
   d8c3a:	2108      	movs	r1, #8
   d8c3c:	f7ff ffc1 	bl	d8bc2 <_ZdlPvj>
   d8c40:	4620      	mov	r0, r4
   d8c42:	bd10      	pop	{r4, pc}

000d8c44 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d8c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8c48:	461f      	mov	r7, r3
   d8c4a:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d8c4e:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d8c52:	4598      	cmp	r8, r3
   d8c54:	4606      	mov	r6, r0
   d8c56:	4615      	mov	r5, r2
   d8c58:	d107      	bne.n	d8c6a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d8c5a:	9907      	ldr	r1, [sp, #28]
   d8c5c:	f000 f8b4 	bl	d8dc8 <_ZNKSt9type_infoeqERKS_>
   d8c60:	b118      	cbz	r0, d8c6a <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d8c62:	7165      	strb	r5, [r4, #5]
   d8c64:	2000      	movs	r0, #0
   d8c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8c6a:	4639      	mov	r1, r7
   d8c6c:	4630      	mov	r0, r6
   d8c6e:	f000 f8ab 	bl	d8dc8 <_ZNKSt9type_infoeqERKS_>
   d8c72:	2800      	cmp	r0, #0
   d8c74:	d0f6      	beq.n	d8c64 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d8c76:	2301      	movs	r3, #1
   d8c78:	f8c4 8000 	str.w	r8, [r4]
   d8c7c:	7125      	strb	r5, [r4, #4]
   d8c7e:	71a3      	strb	r3, [r4, #6]
   d8c80:	e7f0      	b.n	d8c64 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d8c82 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d8c82:	b538      	push	{r3, r4, r5, lr}
   d8c84:	4615      	mov	r5, r2
   d8c86:	461c      	mov	r4, r3
   d8c88:	f000 f89e 	bl	d8dc8 <_ZNKSt9type_infoeqERKS_>
   d8c8c:	b120      	cbz	r0, d8c98 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d8c8e:	2308      	movs	r3, #8
   d8c90:	60e3      	str	r3, [r4, #12]
   d8c92:	2306      	movs	r3, #6
   d8c94:	6025      	str	r5, [r4, #0]
   d8c96:	7123      	strb	r3, [r4, #4]
   d8c98:	bd38      	pop	{r3, r4, r5, pc}

000d8c9a <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d8c9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d8c9c:	4605      	mov	r5, r0
   d8c9e:	460c      	mov	r4, r1
   d8ca0:	9201      	str	r2, [sp, #4]
   d8ca2:	461e      	mov	r6, r3
   d8ca4:	f000 f890 	bl	d8dc8 <_ZNKSt9type_infoeqERKS_>
   d8ca8:	b950      	cbnz	r0, d8cc0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d8caa:	2e03      	cmp	r6, #3
   d8cac:	d808      	bhi.n	d8cc0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d8cae:	6823      	ldr	r3, [r4, #0]
   d8cb0:	9a01      	ldr	r2, [sp, #4]
   d8cb2:	695b      	ldr	r3, [r3, #20]
   d8cb4:	4629      	mov	r1, r5
   d8cb6:	4620      	mov	r0, r4
   d8cb8:	b002      	add	sp, #8
   d8cba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d8cbe:	4718      	bx	r3
   d8cc0:	b002      	add	sp, #8
   d8cc2:	bd70      	pop	{r4, r5, r6, pc}

000d8cc4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d8cc4:	b510      	push	{r4, lr}
   d8cc6:	4b03      	ldr	r3, [pc, #12]	; (d8cd4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d8cc8:	6003      	str	r3, [r0, #0]
   d8cca:	4604      	mov	r4, r0
   d8ccc:	f7ff ffa6 	bl	d8c1c <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d8cd0:	4620      	mov	r0, r4
   d8cd2:	bd10      	pop	{r4, pc}
   d8cd4:	000d97fc 	.word	0x000d97fc

000d8cd8 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d8cd8:	b510      	push	{r4, lr}
   d8cda:	4604      	mov	r4, r0
   d8cdc:	f7ff fff2 	bl	d8cc4 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d8ce0:	4620      	mov	r0, r4
   d8ce2:	210c      	movs	r1, #12
   d8ce4:	f7ff ff6d 	bl	d8bc2 <_ZdlPvj>
   d8ce8:	4620      	mov	r0, r4
   d8cea:	bd10      	pop	{r4, pc}

000d8cec <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d8cec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d8cee:	9f08      	ldr	r7, [sp, #32]
   d8cf0:	4297      	cmp	r7, r2
   d8cf2:	4605      	mov	r5, r0
   d8cf4:	460e      	mov	r6, r1
   d8cf6:	4614      	mov	r4, r2
   d8cf8:	d00a      	beq.n	d8d10 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d8cfa:	68a8      	ldr	r0, [r5, #8]
   d8cfc:	6802      	ldr	r2, [r0, #0]
   d8cfe:	9708      	str	r7, [sp, #32]
   d8d00:	6a15      	ldr	r5, [r2, #32]
   d8d02:	4631      	mov	r1, r6
   d8d04:	4622      	mov	r2, r4
   d8d06:	46ac      	mov	ip, r5
   d8d08:	b003      	add	sp, #12
   d8d0a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d8d0e:	4760      	bx	ip
   d8d10:	4619      	mov	r1, r3
   d8d12:	9301      	str	r3, [sp, #4]
   d8d14:	f000 f858 	bl	d8dc8 <_ZNKSt9type_infoeqERKS_>
   d8d18:	9b01      	ldr	r3, [sp, #4]
   d8d1a:	2800      	cmp	r0, #0
   d8d1c:	d0ed      	beq.n	d8cfa <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d8d1e:	2006      	movs	r0, #6
   d8d20:	b003      	add	sp, #12
   d8d22:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8d24 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d8d24:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8d28:	460d      	mov	r5, r1
   d8d2a:	4619      	mov	r1, r3
   d8d2c:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d8d30:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d8d34:	4681      	mov	r9, r0
   d8d36:	4617      	mov	r7, r2
   d8d38:	4698      	mov	r8, r3
   d8d3a:	f000 f845 	bl	d8dc8 <_ZNKSt9type_infoeqERKS_>
   d8d3e:	b190      	cbz	r0, d8d66 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d8d40:	2d00      	cmp	r5, #0
   d8d42:	6034      	str	r4, [r6, #0]
   d8d44:	7137      	strb	r7, [r6, #4]
   d8d46:	db09      	blt.n	d8d5c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d8d48:	1961      	adds	r1, r4, r5
   d8d4a:	458a      	cmp	sl, r1
   d8d4c:	bf0c      	ite	eq
   d8d4e:	2106      	moveq	r1, #6
   d8d50:	2101      	movne	r1, #1
   d8d52:	71b1      	strb	r1, [r6, #6]
   d8d54:	2000      	movs	r0, #0
   d8d56:	b001      	add	sp, #4
   d8d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8d5c:	3502      	adds	r5, #2
   d8d5e:	d1f9      	bne.n	d8d54 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d8d60:	2301      	movs	r3, #1
   d8d62:	71b3      	strb	r3, [r6, #6]
   d8d64:	e7f6      	b.n	d8d54 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d8d66:	4554      	cmp	r4, sl
   d8d68:	d106      	bne.n	d8d78 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d8d6a:	4659      	mov	r1, fp
   d8d6c:	4648      	mov	r0, r9
   d8d6e:	f000 f82b 	bl	d8dc8 <_ZNKSt9type_infoeqERKS_>
   d8d72:	b108      	cbz	r0, d8d78 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d8d74:	7177      	strb	r7, [r6, #5]
   d8d76:	e7ed      	b.n	d8d54 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d8d78:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d8d7c:	6803      	ldr	r3, [r0, #0]
   d8d7e:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d8d82:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d8d86:	69dc      	ldr	r4, [r3, #28]
   d8d88:	463a      	mov	r2, r7
   d8d8a:	4643      	mov	r3, r8
   d8d8c:	4629      	mov	r1, r5
   d8d8e:	46a4      	mov	ip, r4
   d8d90:	b001      	add	sp, #4
   d8d92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8d96:	4760      	bx	ip

000d8d98 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d8d98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8d9c:	4607      	mov	r7, r0
   d8d9e:	460c      	mov	r4, r1
   d8da0:	4615      	mov	r5, r2
   d8da2:	461e      	mov	r6, r3
   d8da4:	f7ff ff6d 	bl	d8c82 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d8da8:	b948      	cbnz	r0, d8dbe <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d8daa:	68b8      	ldr	r0, [r7, #8]
   d8dac:	6803      	ldr	r3, [r0, #0]
   d8dae:	699f      	ldr	r7, [r3, #24]
   d8db0:	462a      	mov	r2, r5
   d8db2:	4633      	mov	r3, r6
   d8db4:	4621      	mov	r1, r4
   d8db6:	46bc      	mov	ip, r7
   d8db8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d8dbc:	4760      	bx	ip
   d8dbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d8dc2 <_ZNSt9type_infoD1Ev>:
   d8dc2:	4770      	bx	lr

000d8dc4 <_ZNKSt9type_info14__is_pointer_pEv>:
   d8dc4:	2000      	movs	r0, #0
   d8dc6:	4770      	bx	lr

000d8dc8 <_ZNKSt9type_infoeqERKS_>:
   d8dc8:	4281      	cmp	r1, r0
   d8dca:	b508      	push	{r3, lr}
   d8dcc:	d00e      	beq.n	d8dec <_ZNKSt9type_infoeqERKS_+0x24>
   d8dce:	6840      	ldr	r0, [r0, #4]
   d8dd0:	7803      	ldrb	r3, [r0, #0]
   d8dd2:	2b2a      	cmp	r3, #42	; 0x2a
   d8dd4:	d00c      	beq.n	d8df0 <_ZNKSt9type_infoeqERKS_+0x28>
   d8dd6:	6849      	ldr	r1, [r1, #4]
   d8dd8:	780b      	ldrb	r3, [r1, #0]
   d8dda:	2b2a      	cmp	r3, #42	; 0x2a
   d8ddc:	bf08      	it	eq
   d8dde:	3101      	addeq	r1, #1
   d8de0:	f000 f88f 	bl	d8f02 <strcmp>
   d8de4:	fab0 f080 	clz	r0, r0
   d8de8:	0940      	lsrs	r0, r0, #5
   d8dea:	bd08      	pop	{r3, pc}
   d8dec:	2001      	movs	r0, #1
   d8dee:	e7fc      	b.n	d8dea <_ZNKSt9type_infoeqERKS_+0x22>
   d8df0:	2000      	movs	r0, #0
   d8df2:	e7fa      	b.n	d8dea <_ZNKSt9type_infoeqERKS_+0x22>

000d8df4 <__cxa_atexit>:
   d8df4:	b510      	push	{r4, lr}
   d8df6:	4c05      	ldr	r4, [pc, #20]	; (d8e0c <__cxa_atexit+0x18>)
   d8df8:	4613      	mov	r3, r2
   d8dfa:	b12c      	cbz	r4, d8e08 <__cxa_atexit+0x14>
   d8dfc:	460a      	mov	r2, r1
   d8dfe:	4601      	mov	r1, r0
   d8e00:	2002      	movs	r0, #2
   d8e02:	f3af 8000 	nop.w
   d8e06:	bd10      	pop	{r4, pc}
   d8e08:	4620      	mov	r0, r4
   d8e0a:	e7fc      	b.n	d8e06 <__cxa_atexit+0x12>
   d8e0c:	00000000 	.word	0x00000000

000d8e10 <memcmp>:
   d8e10:	b530      	push	{r4, r5, lr}
   d8e12:	3901      	subs	r1, #1
   d8e14:	2400      	movs	r4, #0
   d8e16:	42a2      	cmp	r2, r4
   d8e18:	d101      	bne.n	d8e1e <memcmp+0xe>
   d8e1a:	2000      	movs	r0, #0
   d8e1c:	e005      	b.n	d8e2a <memcmp+0x1a>
   d8e1e:	5d03      	ldrb	r3, [r0, r4]
   d8e20:	3401      	adds	r4, #1
   d8e22:	5d0d      	ldrb	r5, [r1, r4]
   d8e24:	42ab      	cmp	r3, r5
   d8e26:	d0f6      	beq.n	d8e16 <memcmp+0x6>
   d8e28:	1b58      	subs	r0, r3, r5
   d8e2a:	bd30      	pop	{r4, r5, pc}

000d8e2c <memcpy>:
   d8e2c:	440a      	add	r2, r1
   d8e2e:	4291      	cmp	r1, r2
   d8e30:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d8e34:	d100      	bne.n	d8e38 <memcpy+0xc>
   d8e36:	4770      	bx	lr
   d8e38:	b510      	push	{r4, lr}
   d8e3a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8e3e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8e42:	4291      	cmp	r1, r2
   d8e44:	d1f9      	bne.n	d8e3a <memcpy+0xe>
   d8e46:	bd10      	pop	{r4, pc}

000d8e48 <memmove>:
   d8e48:	4288      	cmp	r0, r1
   d8e4a:	b510      	push	{r4, lr}
   d8e4c:	eb01 0402 	add.w	r4, r1, r2
   d8e50:	d902      	bls.n	d8e58 <memmove+0x10>
   d8e52:	4284      	cmp	r4, r0
   d8e54:	4623      	mov	r3, r4
   d8e56:	d807      	bhi.n	d8e68 <memmove+0x20>
   d8e58:	1e43      	subs	r3, r0, #1
   d8e5a:	42a1      	cmp	r1, r4
   d8e5c:	d008      	beq.n	d8e70 <memmove+0x28>
   d8e5e:	f811 2b01 	ldrb.w	r2, [r1], #1
   d8e62:	f803 2f01 	strb.w	r2, [r3, #1]!
   d8e66:	e7f8      	b.n	d8e5a <memmove+0x12>
   d8e68:	4402      	add	r2, r0
   d8e6a:	4601      	mov	r1, r0
   d8e6c:	428a      	cmp	r2, r1
   d8e6e:	d100      	bne.n	d8e72 <memmove+0x2a>
   d8e70:	bd10      	pop	{r4, pc}
   d8e72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d8e76:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d8e7a:	e7f7      	b.n	d8e6c <memmove+0x24>

000d8e7c <memset>:
   d8e7c:	4402      	add	r2, r0
   d8e7e:	4603      	mov	r3, r0
   d8e80:	4293      	cmp	r3, r2
   d8e82:	d100      	bne.n	d8e86 <memset+0xa>
   d8e84:	4770      	bx	lr
   d8e86:	f803 1b01 	strb.w	r1, [r3], #1
   d8e8a:	e7f9      	b.n	d8e80 <memset+0x4>

000d8e8c <srand>:
   d8e8c:	b538      	push	{r3, r4, r5, lr}
   d8e8e:	4b0d      	ldr	r3, [pc, #52]	; (d8ec4 <srand+0x38>)
   d8e90:	681d      	ldr	r5, [r3, #0]
   d8e92:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d8e94:	4604      	mov	r4, r0
   d8e96:	b97b      	cbnz	r3, d8eb8 <srand+0x2c>
   d8e98:	2018      	movs	r0, #24
   d8e9a:	f7fb ff9b 	bl	d4dd4 <malloc>
   d8e9e:	4a0a      	ldr	r2, [pc, #40]	; (d8ec8 <srand+0x3c>)
   d8ea0:	4b0a      	ldr	r3, [pc, #40]	; (d8ecc <srand+0x40>)
   d8ea2:	63a8      	str	r0, [r5, #56]	; 0x38
   d8ea4:	e9c0 2300 	strd	r2, r3, [r0]
   d8ea8:	4b09      	ldr	r3, [pc, #36]	; (d8ed0 <srand+0x44>)
   d8eaa:	6083      	str	r3, [r0, #8]
   d8eac:	230b      	movs	r3, #11
   d8eae:	8183      	strh	r3, [r0, #12]
   d8eb0:	2201      	movs	r2, #1
   d8eb2:	2300      	movs	r3, #0
   d8eb4:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d8eb8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d8eba:	2200      	movs	r2, #0
   d8ebc:	611c      	str	r4, [r3, #16]
   d8ebe:	615a      	str	r2, [r3, #20]
   d8ec0:	bd38      	pop	{r3, r4, r5, pc}
   d8ec2:	bf00      	nop
   d8ec4:	2003de84 	.word	0x2003de84
   d8ec8:	abcd330e 	.word	0xabcd330e
   d8ecc:	e66d1234 	.word	0xe66d1234
   d8ed0:	0005deec 	.word	0x0005deec

000d8ed4 <strchr>:
   d8ed4:	b2c9      	uxtb	r1, r1
   d8ed6:	4603      	mov	r3, r0
   d8ed8:	f810 2b01 	ldrb.w	r2, [r0], #1
   d8edc:	b11a      	cbz	r2, d8ee6 <strchr+0x12>
   d8ede:	428a      	cmp	r2, r1
   d8ee0:	d1f9      	bne.n	d8ed6 <strchr+0x2>
   d8ee2:	4618      	mov	r0, r3
   d8ee4:	4770      	bx	lr
   d8ee6:	2900      	cmp	r1, #0
   d8ee8:	bf18      	it	ne
   d8eea:	2300      	movne	r3, #0
   d8eec:	e7f9      	b.n	d8ee2 <strchr+0xe>

000d8eee <strchrnul>:
   d8eee:	b510      	push	{r4, lr}
   d8ef0:	4604      	mov	r4, r0
   d8ef2:	f7ff ffef 	bl	d8ed4 <strchr>
   d8ef6:	b918      	cbnz	r0, d8f00 <strchrnul+0x12>
   d8ef8:	4620      	mov	r0, r4
   d8efa:	f000 f832 	bl	d8f62 <strlen>
   d8efe:	4420      	add	r0, r4
   d8f00:	bd10      	pop	{r4, pc}

000d8f02 <strcmp>:
   d8f02:	f810 2b01 	ldrb.w	r2, [r0], #1
   d8f06:	f811 3b01 	ldrb.w	r3, [r1], #1
   d8f0a:	2a01      	cmp	r2, #1
   d8f0c:	bf28      	it	cs
   d8f0e:	429a      	cmpcs	r2, r3
   d8f10:	d0f7      	beq.n	d8f02 <strcmp>
   d8f12:	1ad0      	subs	r0, r2, r3
   d8f14:	4770      	bx	lr

000d8f16 <strcpy>:
   d8f16:	4603      	mov	r3, r0
   d8f18:	f811 2b01 	ldrb.w	r2, [r1], #1
   d8f1c:	f803 2b01 	strb.w	r2, [r3], #1
   d8f20:	2a00      	cmp	r2, #0
   d8f22:	d1f9      	bne.n	d8f18 <strcpy+0x2>
   d8f24:	4770      	bx	lr
	...

000d8f28 <strdup>:
   d8f28:	4b02      	ldr	r3, [pc, #8]	; (d8f34 <strdup+0xc>)
   d8f2a:	4601      	mov	r1, r0
   d8f2c:	6818      	ldr	r0, [r3, #0]
   d8f2e:	f000 b803 	b.w	d8f38 <_strdup_r>
   d8f32:	bf00      	nop
   d8f34:	2003de84 	.word	0x2003de84

000d8f38 <_strdup_r>:
   d8f38:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8f3a:	4604      	mov	r4, r0
   d8f3c:	4608      	mov	r0, r1
   d8f3e:	460d      	mov	r5, r1
   d8f40:	f000 f80f 	bl	d8f62 <strlen>
   d8f44:	1c42      	adds	r2, r0, #1
   d8f46:	4611      	mov	r1, r2
   d8f48:	4620      	mov	r0, r4
   d8f4a:	9201      	str	r2, [sp, #4]
   d8f4c:	f7fb ff6a 	bl	d4e24 <_malloc_r>
   d8f50:	4604      	mov	r4, r0
   d8f52:	b118      	cbz	r0, d8f5c <_strdup_r+0x24>
   d8f54:	9a01      	ldr	r2, [sp, #4]
   d8f56:	4629      	mov	r1, r5
   d8f58:	f7ff ff68 	bl	d8e2c <memcpy>
   d8f5c:	4620      	mov	r0, r4
   d8f5e:	b003      	add	sp, #12
   d8f60:	bd30      	pop	{r4, r5, pc}

000d8f62 <strlen>:
   d8f62:	4603      	mov	r3, r0
   d8f64:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8f68:	2a00      	cmp	r2, #0
   d8f6a:	d1fb      	bne.n	d8f64 <strlen+0x2>
   d8f6c:	1a18      	subs	r0, r3, r0
   d8f6e:	3801      	subs	r0, #1
   d8f70:	4770      	bx	lr

000d8f72 <strncmp>:
   d8f72:	b510      	push	{r4, lr}
   d8f74:	b16a      	cbz	r2, d8f92 <strncmp+0x20>
   d8f76:	3901      	subs	r1, #1
   d8f78:	1884      	adds	r4, r0, r2
   d8f7a:	f810 3b01 	ldrb.w	r3, [r0], #1
   d8f7e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d8f82:	4293      	cmp	r3, r2
   d8f84:	d103      	bne.n	d8f8e <strncmp+0x1c>
   d8f86:	42a0      	cmp	r0, r4
   d8f88:	d001      	beq.n	d8f8e <strncmp+0x1c>
   d8f8a:	2b00      	cmp	r3, #0
   d8f8c:	d1f5      	bne.n	d8f7a <strncmp+0x8>
   d8f8e:	1a98      	subs	r0, r3, r2
   d8f90:	bd10      	pop	{r4, pc}
   d8f92:	4610      	mov	r0, r2
   d8f94:	e7fc      	b.n	d8f90 <strncmp+0x1e>

000d8f96 <strnlen>:
   d8f96:	b510      	push	{r4, lr}
   d8f98:	4602      	mov	r2, r0
   d8f9a:	4401      	add	r1, r0
   d8f9c:	428a      	cmp	r2, r1
   d8f9e:	4613      	mov	r3, r2
   d8fa0:	d101      	bne.n	d8fa6 <strnlen+0x10>
   d8fa2:	1a18      	subs	r0, r3, r0
   d8fa4:	bd10      	pop	{r4, pc}
   d8fa6:	781c      	ldrb	r4, [r3, #0]
   d8fa8:	3201      	adds	r2, #1
   d8faa:	2c00      	cmp	r4, #0
   d8fac:	d1f6      	bne.n	d8f9c <strnlen+0x6>
   d8fae:	e7f8      	b.n	d8fa2 <strnlen+0xc>

000d8fb0 <strrchr>:
   d8fb0:	b538      	push	{r3, r4, r5, lr}
   d8fb2:	4603      	mov	r3, r0
   d8fb4:	460c      	mov	r4, r1
   d8fb6:	b969      	cbnz	r1, d8fd4 <strrchr+0x24>
   d8fb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d8fbc:	f7ff bf8a 	b.w	d8ed4 <strchr>
   d8fc0:	1c43      	adds	r3, r0, #1
   d8fc2:	4605      	mov	r5, r0
   d8fc4:	4621      	mov	r1, r4
   d8fc6:	4618      	mov	r0, r3
   d8fc8:	f7ff ff84 	bl	d8ed4 <strchr>
   d8fcc:	2800      	cmp	r0, #0
   d8fce:	d1f7      	bne.n	d8fc0 <strrchr+0x10>
   d8fd0:	4628      	mov	r0, r5
   d8fd2:	bd38      	pop	{r3, r4, r5, pc}
   d8fd4:	2500      	movs	r5, #0
   d8fd6:	e7f5      	b.n	d8fc4 <strrchr+0x14>

000d8fd8 <_strtol_l.isra.0>:
   d8fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8fdc:	4e3a      	ldr	r6, [pc, #232]	; (d90c8 <_strtol_l.isra.0+0xf0>)
   d8fde:	4686      	mov	lr, r0
   d8fe0:	468c      	mov	ip, r1
   d8fe2:	4660      	mov	r0, ip
   d8fe4:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d8fe8:	5da5      	ldrb	r5, [r4, r6]
   d8fea:	f015 0508 	ands.w	r5, r5, #8
   d8fee:	d1f8      	bne.n	d8fe2 <_strtol_l.isra.0+0xa>
   d8ff0:	2c2d      	cmp	r4, #45	; 0x2d
   d8ff2:	d133      	bne.n	d905c <_strtol_l.isra.0+0x84>
   d8ff4:	f89c 4000 	ldrb.w	r4, [ip]
   d8ff8:	f04f 0801 	mov.w	r8, #1
   d8ffc:	f100 0c02 	add.w	ip, r0, #2
   d9000:	2b00      	cmp	r3, #0
   d9002:	d05c      	beq.n	d90be <_strtol_l.isra.0+0xe6>
   d9004:	2b10      	cmp	r3, #16
   d9006:	d10c      	bne.n	d9022 <_strtol_l.isra.0+0x4a>
   d9008:	2c30      	cmp	r4, #48	; 0x30
   d900a:	d10a      	bne.n	d9022 <_strtol_l.isra.0+0x4a>
   d900c:	f89c 0000 	ldrb.w	r0, [ip]
   d9010:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d9014:	2858      	cmp	r0, #88	; 0x58
   d9016:	d14d      	bne.n	d90b4 <_strtol_l.isra.0+0xdc>
   d9018:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d901c:	2310      	movs	r3, #16
   d901e:	f10c 0c02 	add.w	ip, ip, #2
   d9022:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d9026:	3f01      	subs	r7, #1
   d9028:	2600      	movs	r6, #0
   d902a:	fbb7 f9f3 	udiv	r9, r7, r3
   d902e:	4630      	mov	r0, r6
   d9030:	fb03 7a19 	mls	sl, r3, r9, r7
   d9034:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d9038:	2d09      	cmp	r5, #9
   d903a:	d818      	bhi.n	d906e <_strtol_l.isra.0+0x96>
   d903c:	462c      	mov	r4, r5
   d903e:	42a3      	cmp	r3, r4
   d9040:	dd24      	ble.n	d908c <_strtol_l.isra.0+0xb4>
   d9042:	1c75      	adds	r5, r6, #1
   d9044:	d007      	beq.n	d9056 <_strtol_l.isra.0+0x7e>
   d9046:	4581      	cmp	r9, r0
   d9048:	d31d      	bcc.n	d9086 <_strtol_l.isra.0+0xae>
   d904a:	d101      	bne.n	d9050 <_strtol_l.isra.0+0x78>
   d904c:	45a2      	cmp	sl, r4
   d904e:	db1a      	blt.n	d9086 <_strtol_l.isra.0+0xae>
   d9050:	fb00 4003 	mla	r0, r0, r3, r4
   d9054:	2601      	movs	r6, #1
   d9056:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d905a:	e7eb      	b.n	d9034 <_strtol_l.isra.0+0x5c>
   d905c:	2c2b      	cmp	r4, #43	; 0x2b
   d905e:	bf08      	it	eq
   d9060:	f89c 4000 	ldrbeq.w	r4, [ip]
   d9064:	46a8      	mov	r8, r5
   d9066:	bf08      	it	eq
   d9068:	f100 0c02 	addeq.w	ip, r0, #2
   d906c:	e7c8      	b.n	d9000 <_strtol_l.isra.0+0x28>
   d906e:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d9072:	2d19      	cmp	r5, #25
   d9074:	d801      	bhi.n	d907a <_strtol_l.isra.0+0xa2>
   d9076:	3c37      	subs	r4, #55	; 0x37
   d9078:	e7e1      	b.n	d903e <_strtol_l.isra.0+0x66>
   d907a:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d907e:	2d19      	cmp	r5, #25
   d9080:	d804      	bhi.n	d908c <_strtol_l.isra.0+0xb4>
   d9082:	3c57      	subs	r4, #87	; 0x57
   d9084:	e7db      	b.n	d903e <_strtol_l.isra.0+0x66>
   d9086:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d908a:	e7e4      	b.n	d9056 <_strtol_l.isra.0+0x7e>
   d908c:	1c73      	adds	r3, r6, #1
   d908e:	d106      	bne.n	d909e <_strtol_l.isra.0+0xc6>
   d9090:	2322      	movs	r3, #34	; 0x22
   d9092:	f8ce 3000 	str.w	r3, [lr]
   d9096:	4638      	mov	r0, r7
   d9098:	b942      	cbnz	r2, d90ac <_strtol_l.isra.0+0xd4>
   d909a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d909e:	f1b8 0f00 	cmp.w	r8, #0
   d90a2:	d000      	beq.n	d90a6 <_strtol_l.isra.0+0xce>
   d90a4:	4240      	negs	r0, r0
   d90a6:	2a00      	cmp	r2, #0
   d90a8:	d0f7      	beq.n	d909a <_strtol_l.isra.0+0xc2>
   d90aa:	b10e      	cbz	r6, d90b0 <_strtol_l.isra.0+0xd8>
   d90ac:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   d90b0:	6011      	str	r1, [r2, #0]
   d90b2:	e7f2      	b.n	d909a <_strtol_l.isra.0+0xc2>
   d90b4:	2430      	movs	r4, #48	; 0x30
   d90b6:	2b00      	cmp	r3, #0
   d90b8:	d1b3      	bne.n	d9022 <_strtol_l.isra.0+0x4a>
   d90ba:	2308      	movs	r3, #8
   d90bc:	e7b1      	b.n	d9022 <_strtol_l.isra.0+0x4a>
   d90be:	2c30      	cmp	r4, #48	; 0x30
   d90c0:	d0a4      	beq.n	d900c <_strtol_l.isra.0+0x34>
   d90c2:	230a      	movs	r3, #10
   d90c4:	e7ad      	b.n	d9022 <_strtol_l.isra.0+0x4a>
   d90c6:	bf00      	nop
   d90c8:	000d9836 	.word	0x000d9836

000d90cc <strtol>:
   d90cc:	4613      	mov	r3, r2
   d90ce:	460a      	mov	r2, r1
   d90d0:	4601      	mov	r1, r0
   d90d2:	4802      	ldr	r0, [pc, #8]	; (d90dc <strtol+0x10>)
   d90d4:	6800      	ldr	r0, [r0, #0]
   d90d6:	f7ff bf7f 	b.w	d8fd8 <_strtol_l.isra.0>
   d90da:	bf00      	nop
   d90dc:	2003de84 	.word	0x2003de84

000d90e0 <dynalib_user>:
   d90e0:	000d401d 000d4059 000d4081 000d4085     .@..Y@...@...@..
   d90f0:	00000000 4c4c4548 5053004f 41494345     ....HELLO.SPECIA
   d9100:	454d204c 47415353 45522045 56494543     L MESSAGE RECEIV
   d9110:	53004445 49434550 4d204c41 41535345     ED.SPECIAL MESSA
   d9120:	74004547 65707075 72617772 70755f65     GE.tupperware_up
   d9130:	64616f6c 70755400 77726570 5f657261     load.Tupperware_
   d9140:	75542c37 72657070 65726177 542c385f     7,Tupperware_8,T
   d9150:	65707075 72617772 00395f65 67726154     upperware_9.Targ
   d9160:	4e007465 4e5f7765 00656d61 65766461     et.New_Name.adve
   d9170:	73697472 65530065 6c616972 74614420     rtise.Serial Dat
   d9180:	65522061 76696563 00206465 69726553     a Received .Seri
   d9190:	72006c61 3d697373 61206425 65726464     al.rssi=%d addre
   d91a0:	253d7373 3a583230 58323025 3230253a     ss=%02X:%02X:%02
   d91b0:	30253a58 253a5832 3a583230 58323025     X:%02X:%02X:%02X
   d91c0:	41000a20 72657664 69736974 6e20676e      ..Advertising n
   d91d0:	3a656d61 20732520 7673000a 756f4363     ame: %s ..svcCou
   d91e0:	3d20746e 20642520 6f66000a 53646e75     nt = %d ..foundS
   d91f0:	69767265 75556563 3d206469 20582520     erviceUuid = %X 
   d9200:	7554000a 72657070 65726177 5400375f     ..Tupperware_7.T
   d9210:	65707075 72617772 00385f65 73657246     upperware_8.Fres
   d9220:	72755368 5f797465 54524155 6e6f6300     hSurety_UART.con
   d9230:	7463656e 34453600 30303030 35422d31     nect.6E400001-B5
   d9240:	462d3341 2d333933 39413045 3035452d     A3-F393-E0A9-E50
   d9250:	44343245 39414343 45360045 30303034     E24DCCA9E.6E4000
   d9260:	422d3230 2d334135 33393346 4130452d     02-B5A3-F393-E0A
   d9270:	35452d39 34324530 41434344 36004539     9-E50E24DCCA9E.6
   d9280:	30303445 2d333030 33413542 3933462d     E400003-B5A3-F39
   d9290:	30452d33 452d3941 32453035 43434434     3-E0A9-E50E24DCC
   d92a0:	00453941 72007874 00000078              A9E.tx.rx...

000d92ac <_ZTVN5spark10LogHandlerE>:
	...
   d92bc:	000d409d 000d40c1                       .@...@..

000d92c4 <_ZTVN5spark16SerialLogHandlerE>:
	...
   d92cc:	000d40e9 000d411d 000d7fb1 000d40c3     .@...A.......@..
   d92dc:	69726977 622e676e 5300656c 74726174     wiring.ble.Start
   d92ec:	73696420 65766f63 676e6972 72657320      discovering ser
   d92fc:	65636976 53002e73 74726174 73696420     vices..Start dis
   d930c:	65766f63 676e6972 61686320 74636172     covering charact
   d931c:	73697265 73636974 6550002e 64207265     eristics..Peer d
   d932c:	63697665 73692065 73696d20 676e6973     evice is missing
   d933c:	61460021 64656c69 206f7420 65707061     !.Failed to appe
   d934c:	7020646e 20726565 746e6543 206c6172     nd peer Central 
   d935c:	69766564 002e6563 6e6e6f43 65746365     device..Connecte
   d936c:	79622064 6e654320 6c617274 76656420     d by Central dev
   d937c:	2e656369 73694400 6e6e6f63 65746365     ice..Disconnecte
   d938c:	79622064 6d657220 2065746f 69766564     d by remote devi
   d939c:	002e6563 6c696146 74206465 7061206f     ce..Failed to ap
   d93ac:	646e6570 73696420 65766f63 20646572     pend discovered 
   d93bc:	76726573 2e656369 6e614300 20746f6e     service..Cannot 
   d93cc:	20646461 2077656e 72656570 76656420     add new peer dev
   d93dc:	2e656369 77654e00 72657020 65687069     ice..New periphe
   d93ec:	206c6172 63207369 656e6e6f 64657463     ral is connected
   d93fc:	6146002e 64656c69 206f7420 65707061     ..Failed to appe
   d940c:	6420646e 6f637369 65726576 68632064     nd discovered ch
   d941c:	63617261 69726574 63697473 7544002e     aracteristic..Du
   d942c:	63696c70 64657461 61686320 74636172     plicated charact
   d943c:	73697265 20636974 6e6e6163 6220746f     eristic cannot b
   d944c:	64612065 2e646564 69614600 2064656c     e added..Failed 
   d945c:	61206f74 6e657070 6f6c2064 206c6163     to append local 
   d946c:	72616863 65746361 74736972 002e6369     characteristic..

000d947c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d9484:	000d4e79 000d4ee3 000d4edd 000d4f0d     yN...N...N...O..
   d9494:	000d4e7d                                }N..

000d9498 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d94a0:	000d4e75 000d4ef1 000d4e77 000d4f11     uN...N..wN...O..
   d94b0:	000d4e9d                                .N..

000d94b4 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d94bc:	000d4e73 000d4eff 000d5ccd 000d4f15     sN...N...\...O..
   d94cc:	000d4ebd                                .N..

000d94d0 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   d94d8:	5f9b34fb 80000080 00001000 00000000     .4._............

000d94e8 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   d94e8:	7427e37b ac15f87b 13a949dd f5720000     {.'t{....I....r.

000d94f8 <_ZN8particle7BleUuid9BASE_UUIDE>:
   d94f8:	5f9b34fb 80000080 00001000 00000000     .4._............

000d9508 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d9510:	000d68d5 000d68db 000d692b 000d68e9     .h...h..+i...h..
   d9520:	000d68d7                                .h..

000d9524 <_ZTVN5spark13EthernetClassE>:
	...
   d952c:	000d6ea3 000d6e99 000d6e8f 000d6e85     .n...n...n...n..
   d953c:	000d6e79 000d6e6d 000d6e61 000d6e59     yn..mn..an..Yn..
   d954c:	000d6e4f 000d6e45 000d8339              On..En..9...

000d9558 <_ZTV9IPAddress>:
	...
   d9560:	000d6ed1 000d6ec1 000d6ec3 25006425     .n...n...n..%d.%
   d9570:	25750075 00783430 64756162 72655300     u.u%04x.baud.Ser
   d9580:	316c6169 4f534a00 7274534e 4c6d6165     ial1.JSONStreamL
   d9590:	6148676f 656c646e 70610072 30250070     ogHandler.app.%0
   d95a0:	20753031 00205d00 2800202c 00203a29     10u .] ., .(): .
   d95b0:	63005b20 2065646f 2500203d 65640069      [.code = .%i.de
   d95c0:	6c696174 203d2073 000a0d00 0063006d     tails = ....m.c.
   d95d0:	6e6c0066 006e6600 65646f63 74656400     f.ln.fn.code.det
   d95e0:	006c6961                                ail.

000d95e4 <_ZTVN5spark16JSONStreamWriterE>:
	...
   d95ec:	000d738b 000d73b1 000d7371 000d6fd1     .s...s..qs...o..

000d95fc <_ZTVN5spark16StreamLogHandlerE>:
	...
   d9604:	000d77d9 000d77f1 000d7fb1 000d40c3     .w...w.......@..

000d9614 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   d961c:	000d7805 000d7819 000d815d 000d7379     .x...x..]...ys..

000d962c <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   d9634:	000d7389 000d73bf 000d7eed 000d737b     .s...s...~..{s..

000d9644 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   d964c:	000d7387 000d73cd 000d7721 000d73e9     .s...s..!w...s..

000d965c <_ZTVN5spark12NetworkClassE>:
	...
   d9664:	000d82d1 000d82db 000d82e5 000d82ef     ................
   d9674:	000d82f9 000d8305 000d8311 000d831d     ................
   d9684:	000d8325 000d832f 000d8339 252d5925     %.../...9...%Y-%
   d9694:	64252d6d 3a482554 253a4d25 007a2553     m-%dT%H:%M:%S%z.
   d96a4:	74637361 00656d69                       asctime.

000d96ac <_ZTV11USARTSerial>:
	...
   d96b4:	000d87f1 000d885d 000d8835 000d8421     ....]...5...!...
   d96c4:	000d8805 000d8821 000d8813 000d882f     ....!......./...
   d96d4:	000d87f3 000d87f7                       ........

000d96dc <_ZTV9USBSerial>:
	...
   d96e4:	000d8905 000d896d 000d8943 000d8421     ....m...C...!...
   d96f4:	000d8935 000d8907 000d8917 000d8967     5...........g...
   d9704:	000d8927 000d8901                       '.......

000d970c <_ZTVN5spark9WiFiClassE>:
	...
   d9714:	000d8a77 000d8a6d 000d8a63 000d8a19     w...m...c.......
   d9724:	000d8a57 000d8a4b 000d8a3f 000d8a37     W...K...?...7...
   d9734:	000d8a2d 000d8a23 000d8339              -...#...9...

000d9740 <_ZSt7nothrow>:
	...

000d9741 <_ZTSSt19_Sp_make_shared_tag>:
   d9741:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   d9751:	5f646572 00676174                        red_tag....

000d975c <_ZTISt19_Sp_make_shared_tag>:
   d975c:	000d979c 000d9741                       ....A...

000d9764 <_ZTIN10__cxxabiv117__class_type_infoE>:
   d9764:	000d97fc 000d9770 000d9820              ....p... ...

000d9770 <_ZTSN10__cxxabiv117__class_type_infoE>:
   d9770:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   d9780:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   d9790:	00000045                                E...

000d9794 <_ZTVN10__cxxabiv117__class_type_infoE>:
   d9794:	00000000 000d9764 000d8c1d 000d8c31     ....d.......1...
   d97a4:	000d8dc5 000d8dc5 000d8c9b 000d8bdd     ................
   d97b4:	000d8c83 000d8c45 000d8c11              ....E.......

000d97c0 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   d97c0:	000d97fc 000d97cc 000d9764              ........d...

000d97cc <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   d97cc:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   d97dc:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   d97ec:	456f666e 00000000                       nfoE....

000d97f4 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   d97f4:	00000000 000d97c0 000d8cc5 000d8cd9     ................
   d9804:	000d8dc5 000d8dc5 000d8c9b 000d8bdd     ................
   d9814:	000d8d99 000d8d25 000d8ced              ....%.......

000d9820 <_ZTISt9type_info>:
   d9820:	000d979c 000d9828                       ....(...

000d9828 <_ZTSSt9type_info>:
   d9828:	74397453 5f657079 6f666e69               St9type_info.

000d9835 <_ctype_>:
   d9835:	20202000 20202020 28282020 20282828     .         ((((( 
   d9845:	20202020 20202020 20202020 20202020                     
   d9855:	10108820 10101010 10101010 10101010      ...............
   d9865:	04040410 04040404 10040404 10101010     ................
   d9875:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d9885:	01010101 01010101 01010101 10101010     ................
   d9895:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d98a5:	02020202 02020202 02020202 10101010     ................
   d98b5:	00000020 00000000 00000000 00000000      ...............
	...

000d9936 <link_const_variable_data_end>:
	...

000d9938 <link_constructors_location>:
   d9938:	000d4755 	.word	0x000d4755
   d993c:	000d68ad 	.word	0x000d68ad
   d9940:	000d6ead 	.word	0x000d6ead
   d9944:	000d7fa1 	.word	0x000d7fa1
   d9948:	000d840d 	.word	0x000d840d
   d994c:	000d8551 	.word	0x000d8551
   d9950:	000d87a1 	.word	0x000d87a1
   d9954:	000d87dd 	.word	0x000d87dd
   d9958:	000d8a81 	.word	0x000d8a81

000d995c <link_constructors_end>:
   d995c:	00000000 	.word	0x00000000
