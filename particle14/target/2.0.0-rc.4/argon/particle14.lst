
/Users/FreshSurety3/Desktop/particle14/particle14/target/2.0.0-rc.4/argon/particle14.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000059a4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d99c0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000070  2003de78  000d99c4  0001de78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000908  2003dee8  2003dee8  0002dee8  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d9a34  000d9a34  00029a34  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d9a5c  000d9a5c  00029a5c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0010ddd9  00000000  00000000  00029a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00012179  00000000  00000000  00137839  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00029cef  00000000  00000000  001499b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000024a8  00000000  00000000  001736a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00007320  00000000  00000000  00175b49  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00032e4c  00000000  00000000  0017ce69  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002f3d9  00000000  00000000  001afcb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010849b  00000000  00000000  001df08e  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000067b0  00000000  00000000  002e752c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f004 ff29 	bl	d8e84 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f004 ff4b 	bl	d8ed4 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003de78 	.word	0x2003de78
   d4048:	000d99c4 	.word	0x000d99c4
   d404c:	2003dee8 	.word	0x2003dee8
   d4050:	2003dee8 	.word	0x2003dee8
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f004 fda5 	bl	d8bac <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d9994 	.word	0x000d9994
   d407c:	000d99b8 	.word	0x000d99b8

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b8d4 	b.w	d422c <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f951 	bl	d432c <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f004 bd4f 	b.w	d8b30 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f000 bea1 	b.w	d4dd8 <malloc>

000d4096 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d4096:	f000 bea7 	b.w	d4de8 <free>
	...

000d409c <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d409c:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d409e:	4a03      	ldr	r2, [pc, #12]	; (d40ac <__cxa_pure_virtual+0x10>)
   d40a0:	2100      	movs	r1, #0
   d40a2:	200c      	movs	r0, #12
   d40a4:	f000 fdd4 	bl	d4c50 <panic_>
  while (1);
   d40a8:	e7fe      	b.n	d40a8 <__cxa_pure_virtual+0xc>
   d40aa:	bf00      	nop
   d40ac:	000d4af1 	.word	0x000d4af1

000d40b0 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b0:	7800      	ldrb	r0, [r0, #0]
   d40b2:	fab0 f080 	clz	r0, r0
   d40b6:	0940      	lsrs	r0, r0, #5
   d40b8:	4770      	bx	lr

000d40ba <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ba:	2301      	movs	r3, #1
   d40bc:	7003      	strb	r3, [r0, #0]
   d40be:	4770      	bx	lr

000d40c0 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   d40c0:	4770      	bx	lr

000d40c2 <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40c2:	6a00      	ldr	r0, [r0, #32]
   d40c4:	6803      	ldr	r3, [r0, #0]
   d40c6:	68db      	ldr	r3, [r3, #12]
   d40c8:	4718      	bx	r3
	...

000d40cc <_ZN10CloudClass7publishEPKcS1_.isra.0>:

inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   d40cc:	b513      	push	{r0, r1, r4, lr}
   d40ce:	4b05      	ldr	r3, [pc, #20]	; (d40e4 <_ZN10CloudClass7publishEPKcS1_.isra.0+0x18>)
   d40d0:	781b      	ldrb	r3, [r3, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40d2:	f88d 3000 	strb.w	r3, [sp]
   d40d6:	233c      	movs	r3, #60	; 0x3c
inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
   d40d8:	4604      	mov	r4, r0
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40da:	f002 fd6b 	bl	d6bb4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    return publish(name, data, PUBLIC);
}
   d40de:	4620      	mov	r0, r4
   d40e0:	b002      	add	sp, #8
   d40e2:	bd10      	pop	{r4, pc}
   d40e4:	2003df00 	.word	0x2003df00

000d40e8 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d40e8:	4b0a      	ldr	r3, [pc, #40]	; (d4114 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d40ea:	b510      	push	{r4, lr}
   d40ec:	4604      	mov	r4, r0
   d40ee:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d40f0:	f003 fab2 	bl	d7658 <_ZN5spark10LogManager8instanceEv>
   d40f4:	4621      	mov	r1, r4
   d40f6:	f003 fcb4 	bl	d7a62 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d40fa:	f004 fc8f 	bl	d8a1c <_Z16_fetch_usbserialv>
   d40fe:	f004 fc81 	bl	d8a04 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   d4102:	4620      	mov	r0, r4
   d4104:	4b04      	ldr	r3, [pc, #16]	; (d4118 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d4106:	f840 3b04 	str.w	r3, [r0], #4
   d410a:	f003 fb97 	bl	d783c <_ZN5spark6detail9LogFilterD1Ev>
    }
   d410e:	4620      	mov	r0, r4
   d4110:	bd10      	pop	{r4, pc}
   d4112:	bf00      	nop
   d4114:	000d9328 	.word	0x000d9328
   d4118:	000d9310 	.word	0x000d9310

000d411c <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   d411c:	b510      	push	{r4, lr}
   d411e:	4604      	mov	r4, r0
    }
   d4120:	f7ff ffe2 	bl	d40e8 <_ZN5spark16SerialLogHandlerD1Ev>
   d4124:	4620      	mov	r0, r4
   d4126:	2124      	movs	r1, #36	; 0x24
   d4128:	f004 fd77 	bl	d8c1a <_ZdlPvj>
   d412c:	4620      	mov	r0, r4
   d412e:	bd10      	pop	{r4, pc}

000d4130 <_ZN5Print6printfEPKcz>:
    size_t println(double, int = 2);
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4130:	b40e      	push	{r1, r2, r3}
   d4132:	b503      	push	{r0, r1, lr}
   d4134:	ab03      	add	r3, sp, #12
    {
        va_list args;
        va_start(args, format);
        auto r = this->vprintf(false, format, args);
   d4136:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4138:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d413c:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d413e:	f004 f9fc 	bl	d853a <_ZN5Print7vprintfEbPKcSt9__va_list>
        va_end(args);
        return r;
    }
   d4142:	b002      	add	sp, #8
   d4144:	f85d eb04 	ldr.w	lr, [sp], #4
   d4148:	b003      	add	sp, #12
   d414a:	4770      	bx	lr

000d414c <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d414c:	b40e      	push	{r1, r2, r3}
   d414e:	b510      	push	{r4, lr}
   d4150:	b08d      	sub	sp, #52	; 0x34
   d4152:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d4154:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d4156:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d415a:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d415c:	2300      	movs	r3, #0
   d415e:	2020      	movs	r0, #32
   d4160:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4164:	e9cd 4200 	strd	r4, r2, [sp]
   d4168:	201e      	movs	r0, #30
   d416a:	aa04      	add	r2, sp, #16
   d416c:	f000 fd80 	bl	d4c70 <log_message_v>
}
   d4170:	b00d      	add	sp, #52	; 0x34
   d4172:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4176:	b003      	add	sp, #12
   d4178:	4770      	bx	lr

000d417a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d417a:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d417c:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d417e:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d4180:	b17c      	cbz	r4, d41a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d4182:	6863      	ldr	r3, [r4, #4]
   d4184:	3b01      	subs	r3, #1
   d4186:	6063      	str	r3, [r4, #4]
   d4188:	b95b      	cbnz	r3, d41a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d418a:	6823      	ldr	r3, [r4, #0]
   d418c:	4620      	mov	r0, r4
   d418e:	689b      	ldr	r3, [r3, #8]
   d4190:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4192:	68a3      	ldr	r3, [r4, #8]
   d4194:	3b01      	subs	r3, #1
   d4196:	60a3      	str	r3, [r4, #8]
   d4198:	b91b      	cbnz	r3, d41a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d419a:	6823      	ldr	r3, [r4, #0]
   d419c:	4620      	mov	r0, r4
   d419e:	68db      	ldr	r3, [r3, #12]
   d41a0:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d41a2:	4628      	mov	r0, r5
   d41a4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d41a8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
const unsigned long SCAN_PERIOD_MS = 2000;
unsigned long lastScan = 0;


void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context) 
{
   d41a8:	b590      	push	{r4, r7, lr}
    char str[len+1];
   d41aa:	f101 0308 	add.w	r3, r1, #8
{
   d41ae:	b089      	sub	sp, #36	; 0x24
    char str[len+1];
   d41b0:	f023 0307 	bic.w	r3, r3, #7
{
   d41b4:	af00      	add	r7, sp, #0
    char str[len+1];
   d41b6:	ebad 0d03 	sub.w	sp, sp, r3
    memcpy(str, data, len);
   d41ba:	460a      	mov	r2, r1
{
   d41bc:	460c      	mov	r4, r1
    memcpy(str, data, len);
   d41be:	4601      	mov	r1, r0
   d41c0:	4668      	mov	r0, sp
   d41c2:	f004 fe5f 	bl	d8e84 <memcpy>
    str[len] = '\0';
   d41c6:	2300      	movs	r3, #0
    if ((String)str == (String)"HELLO")
   d41c8:	4669      	mov	r1, sp
   d41ca:	4638      	mov	r0, r7
    str[len] = '\0';
   d41cc:	f80d 3004 	strb.w	r3, [sp, r4]
    if ((String)str == (String)"HELLO")
   d41d0:	f004 fa43 	bl	d865a <_ZN6StringC1EPKc>
   d41d4:	4911      	ldr	r1, [pc, #68]	; (d421c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x74>)
   d41d6:	f107 0010 	add.w	r0, r7, #16
   d41da:	f004 fa3e 	bl	d865a <_ZN6StringC1EPKc>
	// comparison (only works w/ Strings and "strings")
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
   d41de:	f107 0110 	add.w	r1, r7, #16
   d41e2:	4638      	mov	r0, r7
   d41e4:	f004 fada 	bl	d879c <_ZNK6String6equalsERKS_>
   d41e8:	4604      	mov	r4, r0
   d41ea:	f107 0010 	add.w	r0, r7, #16
   d41ee:	f004 f9e9 	bl	d85c4 <_ZN6StringD1Ev>
   d41f2:	4638      	mov	r0, r7
   d41f4:	f004 f9e6 	bl	d85c4 <_ZN6StringD1Ev>
   d41f8:	b164      	cbz	r4, d4214 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x6c>
    {
      Particle.publish("SPECIAL MESSAGE", "SPECIAL MESSAGE RECEIVED");
   d41fa:	4a09      	ldr	r2, [pc, #36]	; (d4220 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x78>)
   d41fc:	4909      	ldr	r1, [pc, #36]	; (d4224 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x7c>)
    }
    else
    {
    Particle.publish("tupperware_upload",  str);
   d41fe:	f107 0010 	add.w	r0, r7, #16
   d4202:	f7ff ff63 	bl	d40cc <_ZN10CloudClass7publishEPKcS1_.isra.0>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4206:	f107 0014 	add.w	r0, r7, #20
   d420a:	f7ff ffb6 	bl	d417a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    }
}
   d420e:	3724      	adds	r7, #36	; 0x24
   d4210:	46bd      	mov	sp, r7
   d4212:	bd90      	pop	{r4, r7, pc}
    Particle.publish("tupperware_upload",  str);
   d4214:	4904      	ldr	r1, [pc, #16]	; (d4228 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x80>)
   d4216:	466a      	mov	r2, sp
   d4218:	e7f1      	b.n	d41fe <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x56>
   d421a:	bf00      	nop
   d421c:	000d914c 	.word	0x000d914c
   d4220:	000d9152 	.word	0x000d9152
   d4224:	000d916b 	.word	0x000d916b
   d4228:	000d917b 	.word	0x000d917b

000d422c <setup>:

// setup() runs once, when the device is first turned on.
void setup() 
{
   d422c:	b510      	push	{r4, lr}
   d422e:	b096      	sub	sp, #88	; 0x58
  // Put initialization like pinMode and begin functions here.

  Particle.publish("Target", "Tupperware_13,Tupperware_14,Tupperware_15");
   d4230:	4a35      	ldr	r2, [pc, #212]	; (d4308 <setup+0xdc>)
   d4232:	4936      	ldr	r1, [pc, #216]	; (d430c <setup+0xe0>)
   d4234:	a80d      	add	r0, sp, #52	; 0x34
   d4236:	f7ff ff49 	bl	d40cc <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d423a:	a80e      	add	r0, sp, #56	; 0x38
   d423c:	f7ff ff9d 	bl	d417a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  Serial.begin();
   d4240:	f004 fbec 	bl	d8a1c <_Z16_fetch_usbserialv>
   d4244:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4248:	f004 fbd8 	bl	d89fc <_ZN9USBSerial5beginEl>
  BLE.on();
   d424c:	f001 fc4e 	bl	d5aec <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4250:	f001 fc96 	bl	d5b80 <_ZNK8particle14BleLocalDevice2onEv>
  peerTxCharacteristic.onDataReceived(onDataReceived, &peerTxCharacteristic);
   d4254:	4a2e      	ldr	r2, [pc, #184]	; (d4310 <setup+0xe4>)
   d4256:	492f      	ldr	r1, [pc, #188]	; (d4314 <setup+0xe8>)
   d4258:	4610      	mov	r0, r2
   d425a:	f001 fae9 	bl	d5830 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>


// start of ad
  BLE.addCharacteristic(txCharacteristic);
   d425e:	f001 fc45 	bl	d5aec <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4262:	4a2d      	ldr	r2, [pc, #180]	; (d4318 <setup+0xec>)
   d4264:	4601      	mov	r1, r0
   d4266:	a80d      	add	r0, sp, #52	; 0x34
   d4268:	f002 fa52 	bl	d6710 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d426c:	a80d      	add	r0, sp, #52	; 0x34
   d426e:	f001 fd29 	bl	d5cc4 <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(rxCharacteristic);
   d4272:	f001 fc3b 	bl	d5aec <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4276:	4a29      	ldr	r2, [pc, #164]	; (d431c <setup+0xf0>)
   d4278:	4601      	mov	r1, r0
   d427a:	a80d      	add	r0, sp, #52	; 0x34
   d427c:	f002 fa48 	bl	d6710 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d4280:	a80d      	add	r0, sp, #52	; 0x34
   d4282:	f001 fd1f 	bl	d5cc4 <_ZN8particle17BleCharacteristicD1Ev>

  BleAdvertisingData data;
   d4286:	a80d      	add	r0, sp, #52	; 0x34
   d4288:	f001 f8b3 	bl	d53f2 <_ZN8particle18BleAdvertisingDataC1Ev>
  data.appendLocalName("New_Name");
   d428c:	4924      	ldr	r1, [pc, #144]	; (d4320 <setup+0xf4>)
   d428e:	a80d      	add	r0, sp, #52	; 0x34
   d4290:	f001 f8c8 	bl	d5424 <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>
  data.appendServiceUUID(serviceUuid);
   d4294:	4923      	ldr	r1, [pc, #140]	; (d4324 <setup+0xf8>)
   d4296:	a803      	add	r0, sp, #12
   d4298:	f000 ff26 	bl	d50e8 <_ZN8particle7BleUuidC1ERKS0_>
    size_t appendLocalName(const char* name);
    size_t appendLocalName(const String& name);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   d429c:	a903      	add	r1, sp, #12
   d429e:	a808      	add	r0, sp, #32
   d42a0:	f000 ff22 	bl	d50e8 <_ZN8particle7BleUuidC1ERKS0_>
        if (tempUUID.type() == BleUuidType::SHORT) {
   d42a4:	a808      	add	r0, sp, #32
   d42a6:	f000 ff6f 	bl	d5188 <_ZNK8particle7BleUuid4typeEv>
   d42aa:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   d42ac:	a808      	add	r0, sp, #32
        if (tempUUID.type() == BleUuidType::SHORT) {
   d42ae:	bb14      	cbnz	r4, d42f6 <setup+0xca>
            uint16_t uuid16 = tempUUID.shorted();
   d42b0:	f000 ff89 	bl	d51c6 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d42b4:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   d42b6:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d42ba:	2302      	movs	r3, #2
   d42bc:	f10d 020a 	add.w	r2, sp, #10
   d42c0:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   d42c2:	a80d      	add	r0, sp, #52	; 0x34
   d42c4:	f001 f84d 	bl	d5362 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>

  Particle.publish("advertise",data.deviceName());
   d42c8:	a90d      	add	r1, sp, #52	; 0x34
   d42ca:	a808      	add	r0, sp, #32
   d42cc:	f001 f908 	bl	d54e0 <_ZNK8particle18BleAdvertisingData10deviceNameEv>
   d42d0:	9a08      	ldr	r2, [sp, #32]
   d42d2:	4915      	ldr	r1, [pc, #84]	; (d4328 <setup+0xfc>)
   d42d4:	a803      	add	r0, sp, #12
   d42d6:	f7ff fef9 	bl	d40cc <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d42da:	a804      	add	r0, sp, #16
   d42dc:	f7ff ff4d 	bl	d417a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d42e0:	a808      	add	r0, sp, #32
   d42e2:	f004 f96f 	bl	d85c4 <_ZN6StringD1Ev>
  BLE.advertise(&data);
   d42e6:	f001 fc01 	bl	d5aec <_ZN8particle14BleLocalDevice11getInstanceEv>
   d42ea:	2200      	movs	r2, #0
   d42ec:	a90d      	add	r1, sp, #52	; 0x34
   d42ee:	f001 fc7d 	bl	d5bec <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
  
// end  
  
//   bleLogHandler.setup();
}
   d42f2:	b016      	add	sp, #88	; 0x58
   d42f4:	bd10      	pop	{r4, pc}
   d42f6:	f000 ff6b 	bl	d51d0 <_ZNK8particle7BleUuid8rawBytesEv>
   d42fa:	2300      	movs	r3, #0
   d42fc:	9300      	str	r3, [sp, #0]
   d42fe:	4602      	mov	r2, r0
   d4300:	2310      	movs	r3, #16
   d4302:	2107      	movs	r1, #7
   d4304:	e7dd      	b.n	d42c2 <setup+0x96>
   d4306:	bf00      	nop
   d4308:	000d918d 	.word	0x000d918d
   d430c:	000d91b7 	.word	0x000d91b7
   d4310:	2003df44 	.word	0x2003df44
   d4314:	000d41a9 	.word	0x000d41a9
   d4318:	2003e61c 	.word	0x2003e61c
   d431c:	2003df4c 	.word	0x2003df4c
   d4320:	000d91be 	.word	0x000d91be
   d4324:	2003deec 	.word	0x2003deec
   d4328:	000d91c7 	.word	0x000d91c7

000d432c <loop>:

// loop() runs over and over again, as quickly as it can execute.
  int incomingByte = 0;
void loop() 
{
   d432c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    
    // The core of your code likely lives here

    // bleLogHandler.loop();

    if (millis() - lastLog >= LOG_INTERVAL) 
   d4330:	4cad      	ldr	r4, [pc, #692]	; (d45e8 <loop+0x2bc>)
{
   d4332:	b0a1      	sub	sp, #132	; 0x84

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4334:	f000 fbe4 	bl	d4b00 <HAL_Timer_Get_Milli_Seconds>
    if (millis() - lastLog >= LOG_INTERVAL) 
   d4338:	6823      	ldr	r3, [r4, #0]
   d433a:	1ac0      	subs	r0, r0, r3
   d433c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d4340:	d302      	bcc.n	d4348 <loop+0x1c>
   d4342:	f000 fbdd 	bl	d4b00 <HAL_Timer_Get_Milli_Seconds>
    {
        lastLog = millis();
   d4346:	6020      	str	r0, [r4, #0]
        // This is just so the demo prints a message every second so the log updates frequently
        //Log.info("counter=%u", counter++);
    }
  //Particle.publish("tupperware_upload", "Hello2");
    char string[32];
    if (BLE.connected()) {
   d4348:	f001 fbd0 	bl	d5aec <_ZN8particle14BleLocalDevice11getInstanceEv>
   d434c:	f001 fc94 	bl	d5c78 <_ZNK8particle14BleLocalDevice9connectedEv>
   d4350:	b368      	cbz	r0, d43ae <loop+0x82>
   d4352:	4ca6      	ldr	r4, [pc, #664]	; (d45ec <loop+0x2c0>)
            
            int availableBytes = Serial.available();
            for(int i=0; i<availableBytes; i++)
            {
             string[i] = Serial.read();
             string[i+1] = '\0'; // Append a null
   d4354:	f04f 0800 	mov.w	r8, #0
        while (Serial.available() && txLen < UART_TX_BUF_SIZE) 
   d4358:	f004 fb60 	bl	d8a1c <_Z16_fetch_usbserialv>
   d435c:	6803      	ldr	r3, [r0, #0]
   d435e:	691b      	ldr	r3, [r3, #16]
   d4360:	4798      	blx	r3
   d4362:	b1d8      	cbz	r0, d439c <loop+0x70>
   d4364:	6823      	ldr	r3, [r4, #0]
   d4366:	2b13      	cmp	r3, #19
   d4368:	d818      	bhi.n	d439c <loop+0x70>
            delay(3);                                                                                                                                                                                                                                                                  
   d436a:	2003      	movs	r0, #3
   d436c:	f000 fd6c 	bl	d4e48 <delay>
            int availableBytes = Serial.available();
   d4370:	f004 fb54 	bl	d8a1c <_Z16_fetch_usbserialv>
   d4374:	6803      	ldr	r3, [r0, #0]
   d4376:	691b      	ldr	r3, [r3, #16]
   d4378:	4798      	blx	r3
   d437a:	ad18      	add	r5, sp, #96	; 0x60
   d437c:	4607      	mov	r7, r0
            for(int i=0; i<availableBytes; i++)
   d437e:	2600      	movs	r6, #0
   d4380:	46a9      	mov	r9, r5
   d4382:	42be      	cmp	r6, r7
   d4384:	f280 80ad 	bge.w	d44e2 <loop+0x1b6>
             string[i] = Serial.read();
   d4388:	f004 fb48 	bl	d8a1c <_Z16_fetch_usbserialv>
   d438c:	6803      	ldr	r3, [r0, #0]
   d438e:	695b      	ldr	r3, [r3, #20]
   d4390:	4798      	blx	r3
             string[i+1] = '\0'; // Append a null
   d4392:	3601      	adds	r6, #1
             string[i] = Serial.read();
   d4394:	7028      	strb	r0, [r5, #0]
             string[i+1] = '\0'; // Append a null
   d4396:	f805 8f01 	strb.w	r8, [r5, #1]!
            for(int i=0; i<availableBytes; i++)
   d439a:	e7f2      	b.n	d4382 <loop+0x56>
            Particle.publish("Serial", string);
        }
        
        

        if (txLen > 0) 
   d439c:	6822      	ldr	r2, [r4, #0]
   d439e:	b132      	cbz	r2, d43ae <loop+0x82>
        {
            // Transmit the data to the BLE peripheral
            peerRxCharacteristic.setValue(txBuf, txLen);
   d43a0:	2300      	movs	r3, #0
   d43a2:	4993      	ldr	r1, [pc, #588]	; (d45f0 <loop+0x2c4>)
   d43a4:	4893      	ldr	r0, [pc, #588]	; (d45f4 <loop+0x2c8>)
   d43a6:	f001 f9a9 	bl	d56fc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
            txLen = 0;
   d43aa:	2300      	movs	r3, #0
   d43ac:	6023      	str	r3, [r4, #0]
        }
    }
    
    
        if (millis() - lastScan >= SCAN_PERIOD_MS) 
   d43ae:	4c92      	ldr	r4, [pc, #584]	; (d45f8 <loop+0x2cc>)
   d43b0:	f000 fba6 	bl	d4b00 <HAL_Timer_Get_Milli_Seconds>
   d43b4:	6823      	ldr	r3, [r4, #0]
   d43b6:	1ac0      	subs	r0, r0, r3
   d43b8:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
   d43bc:	f0c0 808e 	bcc.w	d44dc <loop+0x1b0>
   d43c0:	f000 fb9e 	bl	d4b00 <HAL_Timer_Get_Milli_Seconds>
        {
            // Time to scan
            lastScan = millis();
   d43c4:	6020      	str	r0, [r4, #0]

            size_t count = BLE.scan(scanResults, SCAN_RESULT_COUNT);
   d43c6:	f001 fb91 	bl	d5aec <_ZN8particle14BleLocalDevice11getInstanceEv>
   d43ca:	498c      	ldr	r1, [pc, #560]	; (d45fc <loop+0x2d0>)
   d43cc:	2214      	movs	r2, #20
   d43ce:	f001 fc2b 	bl	d5c28 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>
            if (count > 0) 
   d43d2:	4607      	mov	r7, r0
   d43d4:	2800      	cmp	r0, #0
   d43d6:	f000 8081 	beq.w	d44dc <loop+0x1b0>
                for (uint8_t ii = 0; ii < count; ii++) 
                {
                    // Our serial peripheral only supports one service, so we only look for one here.
                    // In some cases, you may want to get all of the service UUIDs and scan the list
                    // looking to see if the serviceUuid is anywhere in the list.
                    Log.info("rssi=%d address=%02X:%02X:%02X:%02X:%02X:%02X \n", scanResults[ii].rssi, scanResults[ii].address[0], scanResults[ii].address[1], scanResults[ii].address[2], scanResults[ii].address[3], scanResults[ii].address[4], scanResults[ii].address[5]);
   d43da:	f8df 8220 	ldr.w	r8, [pc, #544]	; d45fc <loop+0x2d0>
   d43de:	f8df a25c 	ldr.w	sl, [pc, #604]	; d463c <loop+0x310>
                for (uint8_t ii = 0; ii < count; ii++) 
   d43e2:	2600      	movs	r6, #0
                    Log.info("rssi=%d address=%02X:%02X:%02X:%02X:%02X:%02X \n", scanResults[ii].rssi, scanResults[ii].address[0], scanResults[ii].address[1], scanResults[ii].address[2], scanResults[ii].address[3], scanResults[ii].address[4], scanResults[ii].address[5]);
   d43e4:	2454      	movs	r4, #84	; 0x54
   d43e6:	fb04 8306 	mla	r3, r4, r6, r8
   d43ea:	fb16 f404 	smulbb	r4, r6, r4
   d43ee:	eb08 0504 	add.w	r5, r8, r4
   d43f2:	f993 2050 	ldrsb.w	r2, [r3, #80]	; 0x50
   d43f6:	9209      	str	r2, [sp, #36]	; 0x24
   d43f8:	2100      	movs	r1, #0
   d43fa:	4628      	mov	r0, r5
   d43fc:	f000 fe2b 	bl	d5056 <_ZNK8particle10BleAddressixEh>
   d4400:	2101      	movs	r1, #1
   d4402:	9008      	str	r0, [sp, #32]
   d4404:	4628      	mov	r0, r5
   d4406:	f000 fe26 	bl	d5056 <_ZNK8particle10BleAddressixEh>
   d440a:	2102      	movs	r1, #2
   d440c:	9006      	str	r0, [sp, #24]
   d440e:	4628      	mov	r0, r5
   d4410:	f000 fe21 	bl	d5056 <_ZNK8particle10BleAddressixEh>
   d4414:	2103      	movs	r1, #3
   d4416:	9007      	str	r0, [sp, #28]
   d4418:	4628      	mov	r0, r5
   d441a:	f000 fe1c 	bl	d5056 <_ZNK8particle10BleAddressixEh>
   d441e:	2104      	movs	r1, #4
   d4420:	4681      	mov	r9, r0
   d4422:	4628      	mov	r0, r5
   d4424:	f000 fe17 	bl	d5056 <_ZNK8particle10BleAddressixEh>
   d4428:	2105      	movs	r1, #5
   d442a:	4683      	mov	fp, r0
   d442c:	4628      	mov	r0, r5
   d442e:	f000 fe12 	bl	d5056 <_ZNK8particle10BleAddressixEh>
   d4432:	9b07      	ldr	r3, [sp, #28]
   d4434:	9301      	str	r3, [sp, #4]
   d4436:	9b06      	ldr	r3, [sp, #24]
   d4438:	f8cd 9008 	str.w	r9, [sp, #8]
   d443c:	4651      	mov	r1, sl
   d443e:	e9cd b003 	strd	fp, r0, [sp, #12]
   d4442:	9300      	str	r3, [sp, #0]
   d4444:	486e      	ldr	r0, [pc, #440]	; (d4600 <loop+0x2d4>)
   d4446:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
                    
                    

                    BleUuid foundServiceUuid;
                    size_t svcCount = scanResults[ii].advertisingData.serviceUUID(&foundServiceUuid, 1);
   d444a:	3408      	adds	r4, #8
                    Log.info("rssi=%d address=%02X:%02X:%02X:%02X:%02X:%02X \n", scanResults[ii].rssi, scanResults[ii].address[0], scanResults[ii].address[1], scanResults[ii].address[2], scanResults[ii].address[3], scanResults[ii].address[4], scanResults[ii].address[5]);
   d444c:	f7ff fe7e 	bl	d414c <_ZNK5spark6Logger4infoEPKcz>
                    size_t svcCount = scanResults[ii].advertisingData.serviceUUID(&foundServiceUuid, 1);
   d4450:	4444      	add	r4, r8
                    BleUuid foundServiceUuid;
   d4452:	a80e      	add	r0, sp, #56	; 0x38
   d4454:	f000 fe12 	bl	d507c <_ZN8particle7BleUuidC1Ev>
                    size_t svcCount = scanResults[ii].advertisingData.serviceUUID(&foundServiceUuid, 1);
   d4458:	2201      	movs	r2, #1
   d445a:	a90e      	add	r1, sp, #56	; 0x38
   d445c:	4620      	mov	r0, r4
   d445e:	f001 f8c8 	bl	d55f2 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>
                    String peripheralName = scanResults[ii].advertisingData.deviceName();
   d4462:	4621      	mov	r1, r4
                    size_t svcCount = scanResults[ii].advertisingData.serviceUUID(&foundServiceUuid, 1);
   d4464:	4681      	mov	r9, r0
                    String peripheralName = scanResults[ii].advertisingData.deviceName();
   d4466:	a80a      	add	r0, sp, #40	; 0x28
   d4468:	f001 f83a 	bl	d54e0 <_ZNK8particle18BleAdvertisingData10deviceNameEv>

                    if(peripheralName.length() > 0)
   d446c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d446e:	b123      	cbz	r3, d447a <loop+0x14e>
                    {
                        Log.info("Advertising name: %s \n", peripheralName.c_str());
   d4470:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d4472:	4964      	ldr	r1, [pc, #400]	; (d4604 <loop+0x2d8>)
   d4474:	4862      	ldr	r0, [pc, #392]	; (d4600 <loop+0x2d4>)
   d4476:	f7ff fe69 	bl	d414c <_ZNK5spark6Logger4infoEPKcz>
                    }

                    Serial.printf("svcCount = %d \n", svcCount);
   d447a:	f004 facf 	bl	d8a1c <_Z16_fetch_usbserialv>
   d447e:	464a      	mov	r2, r9
   d4480:	4961      	ldr	r1, [pc, #388]	; (d4608 <loop+0x2dc>)
   d4482:	f7ff fe55 	bl	d4130 <_ZN5Print6printfEPKcz>
                    Serial.printf("foundServiceUuid = %X \n", foundServiceUuid);
   d4486:	f004 fac9 	bl	d8a1c <_Z16_fetch_usbserialv>
   d448a:	a90e      	add	r1, sp, #56	; 0x38
   d448c:	4604      	mov	r4, r0
   d448e:	a813      	add	r0, sp, #76	; 0x4c
   d4490:	f000 fe2a 	bl	d50e8 <_ZN8particle7BleUuidC1ERKS0_>
   d4494:	495d      	ldr	r1, [pc, #372]	; (d460c <loop+0x2e0>)
   d4496:	aa13      	add	r2, sp, #76	; 0x4c
   d4498:	4620      	mov	r0, r4
   d449a:	f7ff fe49 	bl	d4130 <_ZN5Print6printfEPKcz>
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d449e:	495c      	ldr	r1, [pc, #368]	; (d4610 <loop+0x2e4>)
   d44a0:	a80a      	add	r0, sp, #40	; 0x28
   d44a2:	f004 f988 	bl	d87b6 <_ZNK6String6equalsEPKc>

                    //replace peripheralName != NULL with actual value
                    if(peripheralName == "Tupperware_13" || peripheralName == "Tupperware_14" || peripheralName == "Tupperware_15" || peripheralName == "FreshSurety_UART") //if (svcCount > 0 && foundServiceUuid == serviceUuid) 
   d44a6:	2800      	cmp	r0, #0
   d44a8:	d13f      	bne.n	d452a <loop+0x1fe>
   d44aa:	495a      	ldr	r1, [pc, #360]	; (d4614 <loop+0x2e8>)
   d44ac:	a80a      	add	r0, sp, #40	; 0x28
   d44ae:	f004 f982 	bl	d87b6 <_ZNK6String6equalsEPKc>
   d44b2:	2800      	cmp	r0, #0
   d44b4:	d139      	bne.n	d452a <loop+0x1fe>
   d44b6:	4958      	ldr	r1, [pc, #352]	; (d4618 <loop+0x2ec>)
   d44b8:	a80a      	add	r0, sp, #40	; 0x28
   d44ba:	f004 f97c 	bl	d87b6 <_ZNK6String6equalsEPKc>
   d44be:	2800      	cmp	r0, #0
   d44c0:	d133      	bne.n	d452a <loop+0x1fe>
   d44c2:	4956      	ldr	r1, [pc, #344]	; (d461c <loop+0x2f0>)
   d44c4:	a80a      	add	r0, sp, #40	; 0x28
   d44c6:	f004 f976 	bl	d87b6 <_ZNK6String6equalsEPKc>
   d44ca:	2800      	cmp	r0, #0
   d44cc:	d12d      	bne.n	d452a <loop+0x1fe>
                for (uint8_t ii = 0; ii < count; ii++) 
   d44ce:	3601      	adds	r6, #1
                    String peripheralName = scanResults[ii].advertisingData.deviceName();
   d44d0:	a80a      	add	r0, sp, #40	; 0x28
                for (uint8_t ii = 0; ii < count; ii++) 
   d44d2:	b2f6      	uxtb	r6, r6
                    String peripheralName = scanResults[ii].advertisingData.deviceName();
   d44d4:	f004 f876 	bl	d85c4 <_ZN6StringD1Ev>
                for (uint8_t ii = 0; ii < count; ii++) 
   d44d8:	42be      	cmp	r6, r7
   d44da:	d383      	bcc.n	d43e4 <loop+0xb8>
                }
            }
        }

    
   d44dc:	b021      	add	sp, #132	; 0x84
   d44de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            txBuf[txLen++] = Serial.read();
   d44e2:	f004 fa9b 	bl	d8a1c <_Z16_fetch_usbserialv>
   d44e6:	6803      	ldr	r3, [r0, #0]
   d44e8:	4d41      	ldr	r5, [pc, #260]	; (d45f0 <loop+0x2c4>)
   d44ea:	695b      	ldr	r3, [r3, #20]
   d44ec:	4798      	blx	r3
   d44ee:	6823      	ldr	r3, [r4, #0]
   d44f0:	1c5a      	adds	r2, r3, #1
   d44f2:	6022      	str	r2, [r4, #0]
   d44f4:	54e8      	strb	r0, [r5, r3]
            Serial.write(txBuf[txLen - 1]);
   d44f6:	f004 fa91 	bl	d8a1c <_Z16_fetch_usbserialv>
   d44fa:	6823      	ldr	r3, [r4, #0]
   d44fc:	441d      	add	r5, r3
   d44fe:	6803      	ldr	r3, [r0, #0]
   d4500:	f815 1c01 	ldrb.w	r1, [r5, #-1]
   d4504:	689b      	ldr	r3, [r3, #8]
   d4506:	4798      	blx	r3
            Particle.publish("Serial", "Serial Data Received ");
   d4508:	4a45      	ldr	r2, [pc, #276]	; (d4620 <loop+0x2f4>)
   d450a:	4946      	ldr	r1, [pc, #280]	; (d4624 <loop+0x2f8>)
   d450c:	a813      	add	r0, sp, #76	; 0x4c
   d450e:	f7ff fddd 	bl	d40cc <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d4512:	a814      	add	r0, sp, #80	; 0x50
   d4514:	f7ff fe31 	bl	d417a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            Particle.publish("Serial", string);
   d4518:	a813      	add	r0, sp, #76	; 0x4c
   d451a:	4942      	ldr	r1, [pc, #264]	; (d4624 <loop+0x2f8>)
   d451c:	464a      	mov	r2, r9
   d451e:	f7ff fdd5 	bl	d40cc <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d4522:	a814      	add	r0, sp, #80	; 0x50
   d4524:	f7ff fe29 	bl	d417a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        while (Serial.available() && txLen < UART_TX_BUF_SIZE) 
   d4528:	e716      	b.n	d4358 <loop+0x2c>
                        peer = BLE.connect(scanResults[ii].address);
   d452a:	f001 fadf 	bl	d5aec <_ZN8particle14BleLocalDevice11getInstanceEv>
   d452e:	2301      	movs	r3, #1
   d4530:	4601      	mov	r1, r0
   d4532:	462a      	mov	r2, r5
   d4534:	a813      	add	r0, sp, #76	; 0x4c
   d4536:	f002 f825 	bl	d6584 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>
   d453a:	a913      	add	r1, sp, #76	; 0x4c
   d453c:	483a      	ldr	r0, [pc, #232]	; (d4628 <loop+0x2fc>)
   d453e:	f001 fa47 	bl	d59d0 <_ZN8particle13BlePeerDeviceaSERKS0_>
   d4542:	a813      	add	r0, sp, #76	; 0x4c
   d4544:	f001 fbc5 	bl	d5cd2 <_ZN8particle13BlePeerDeviceD1Ev>
                        if (peer.connected()) 
   d4548:	4837      	ldr	r0, [pc, #220]	; (d4628 <loop+0x2fc>)
   d454a:	f001 fa6f 	bl	d5a2c <_ZNK8particle13BlePeerDevice9connectedEv>
   d454e:	2800      	cmp	r0, #0
   d4550:	d045      	beq.n	d45de <loop+0x2b2>
   d4552:	492f      	ldr	r1, [pc, #188]	; (d4610 <loop+0x2e4>)
   d4554:	a80a      	add	r0, sp, #40	; 0x28
   d4556:	f004 f92e 	bl	d87b6 <_ZNK6String6equalsEPKc>
                            if(peripheralName == "Tupperware_13")
   d455a:	b138      	cbz	r0, d456c <loop+0x240>
                              Particle.publish("connect", "Tupperware_13");
   d455c:	a813      	add	r0, sp, #76	; 0x4c
   d455e:	4a2c      	ldr	r2, [pc, #176]	; (d4610 <loop+0x2e4>)
   d4560:	4932      	ldr	r1, [pc, #200]	; (d462c <loop+0x300>)
   d4562:	f7ff fdb3 	bl	d40cc <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d4566:	a814      	add	r0, sp, #80	; 0x50
   d4568:	f7ff fe07 	bl	d417a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d456c:	4929      	ldr	r1, [pc, #164]	; (d4614 <loop+0x2e8>)
   d456e:	a80a      	add	r0, sp, #40	; 0x28
   d4570:	f004 f921 	bl	d87b6 <_ZNK6String6equalsEPKc>
                            if(peripheralName == "Tupperware_14")
   d4574:	b138      	cbz	r0, d4586 <loop+0x25a>
                              Particle.publish("connect", "Tupperware_14");
   d4576:	a813      	add	r0, sp, #76	; 0x4c
   d4578:	4a26      	ldr	r2, [pc, #152]	; (d4614 <loop+0x2e8>)
   d457a:	492c      	ldr	r1, [pc, #176]	; (d462c <loop+0x300>)
   d457c:	f7ff fda6 	bl	d40cc <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d4580:	a814      	add	r0, sp, #80	; 0x50
   d4582:	f7ff fdfa 	bl	d417a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4586:	4924      	ldr	r1, [pc, #144]	; (d4618 <loop+0x2ec>)
   d4588:	a80a      	add	r0, sp, #40	; 0x28
   d458a:	f004 f914 	bl	d87b6 <_ZNK6String6equalsEPKc>
                            if(peripheralName == "Tupperware_15")
   d458e:	b138      	cbz	r0, d45a0 <loop+0x274>
                              Particle.publish("connect", "Tupperware_15");
   d4590:	a813      	add	r0, sp, #76	; 0x4c
   d4592:	4a21      	ldr	r2, [pc, #132]	; (d4618 <loop+0x2ec>)
   d4594:	4925      	ldr	r1, [pc, #148]	; (d462c <loop+0x300>)
   d4596:	f7ff fd99 	bl	d40cc <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d459a:	a814      	add	r0, sp, #80	; 0x50
   d459c:	f7ff fded 	bl	d417a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d45a0:	491e      	ldr	r1, [pc, #120]	; (d461c <loop+0x2f0>)
   d45a2:	a80a      	add	r0, sp, #40	; 0x28
   d45a4:	f004 f907 	bl	d87b6 <_ZNK6String6equalsEPKc>
                            if (peripheralName == "FreshSurety_UART")
   d45a8:	b138      	cbz	r0, d45ba <loop+0x28e>
                              Particle.publish("connect", "FreshSurety_UART");
   d45aa:	a813      	add	r0, sp, #76	; 0x4c
   d45ac:	4a1b      	ldr	r2, [pc, #108]	; (d461c <loop+0x2f0>)
   d45ae:	491f      	ldr	r1, [pc, #124]	; (d462c <loop+0x300>)
   d45b0:	f7ff fd8c 	bl	d40cc <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d45b4:	a814      	add	r0, sp, #80	; 0x50
   d45b6:	f7ff fde0 	bl	d417a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                            Particle.publish("connect", peripheralName);
   d45ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   d45bc:	491b      	ldr	r1, [pc, #108]	; (d462c <loop+0x300>)
   d45be:	a813      	add	r0, sp, #76	; 0x4c
   d45c0:	f7ff fd84 	bl	d40cc <_ZN10CloudClass7publishEPKcS1_.isra.0>
   d45c4:	a814      	add	r0, sp, #80	; 0x50
   d45c6:	f7ff fdd8 	bl	d417a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
                            peer.getCharacteristicByUUID(peerTxCharacteristic, txUuid);
   d45ca:	4a19      	ldr	r2, [pc, #100]	; (d4630 <loop+0x304>)
   d45cc:	4919      	ldr	r1, [pc, #100]	; (d4634 <loop+0x308>)
   d45ce:	4816      	ldr	r0, [pc, #88]	; (d4628 <loop+0x2fc>)
   d45d0:	f001 fa08 	bl	d59e4 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                            peer.getCharacteristicByUUID(peerRxCharacteristic, rxUuid);
   d45d4:	4a18      	ldr	r2, [pc, #96]	; (d4638 <loop+0x30c>)
   d45d6:	4907      	ldr	r1, [pc, #28]	; (d45f4 <loop+0x2c8>)
   d45d8:	4813      	ldr	r0, [pc, #76]	; (d4628 <loop+0x2fc>)
   d45da:	f001 fa03 	bl	d59e4 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>
                    String peripheralName = scanResults[ii].advertisingData.deviceName();
   d45de:	a80a      	add	r0, sp, #40	; 0x28
   d45e0:	f003 fff0 	bl	d85c4 <_ZN6StringD1Ev>
   d45e4:	e77a      	b.n	d44dc <loop+0x1b0>
   d45e6:	bf00      	nop
   d45e8:	2003df2c 	.word	0x2003df2c
   d45ec:	2003e624 	.word	0x2003e624
   d45f0:	2003e608 	.word	0x2003e608
   d45f4:	2003df3c 	.word	0x2003df3c
   d45f8:	2003df30 	.word	0x2003df30
   d45fc:	2003df54 	.word	0x2003df54
   d4600:	2003e64c 	.word	0x2003e64c
   d4604:	000d921e 	.word	0x000d921e
   d4608:	000d9235 	.word	0x000d9235
   d460c:	000d9245 	.word	0x000d9245
   d4610:	000d925d 	.word	0x000d925d
   d4614:	000d926b 	.word	0x000d926b
   d4618:	000d91a9 	.word	0x000d91a9
   d461c:	000d9279 	.word	0x000d9279
   d4620:	000d91d1 	.word	0x000d91d1
   d4624:	000d91e7 	.word	0x000d91e7
   d4628:	2003df34 	.word	0x2003df34
   d462c:	000d928a 	.word	0x000d928a
   d4630:	2003df18 	.word	0x2003df18
   d4634:	2003df44 	.word	0x2003df44
   d4638:	2003df04 	.word	0x2003df04
   d463c:	000d91ee 	.word	0x000d91ee

000d4640 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4640:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d4642:	e9d0 5300 	ldrd	r5, r3, [r0]
   d4646:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d4648:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d464a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d464e:	42ae      	cmp	r6, r5
   d4650:	d004      	beq.n	d465c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   d4652:	4628      	mov	r0, r5
   d4654:	f003 ffb6 	bl	d85c4 <_ZN6StringD1Ev>
   d4658:	3514      	adds	r5, #20
   d465a:	e7f8      	b.n	d464e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d465c:	6820      	ldr	r0, [r4, #0]
   d465e:	f000 fbc3 	bl	d4de8 <free>
    AllocatorT::free(data_);
}
   d4662:	4620      	mov	r0, r4
   d4664:	bd70      	pop	{r4, r5, r6, pc}

000d4666 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr)
            : BleCharacteristic(desc.c_str(), properties, callback, context) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d4666:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4668:	4616      	mov	r6, r2
   d466a:	b091      	sub	sp, #68	; 0x44
      : _M_ptr(0), _M_refcount()
   d466c:	2200      	movs	r2, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d466e:	e9c0 2200 	strd	r2, r2, [r0]
   d4672:	4604      	mov	r4, r0
   d4674:	460d      	mov	r5, r1
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
   d4676:	af0b      	add	r7, sp, #44	; 0x2c
        BleUuid cUuid(charUuid);
   d4678:	4619      	mov	r1, r3
   d467a:	a806      	add	r0, sp, #24
   d467c:	f000 fd34 	bl	d50e8 <_ZN8particle7BleUuidC1ERKS0_>
        BleUuid sUuid(svcUuid);
   d4680:	9916      	ldr	r1, [sp, #88]	; 0x58
   d4682:	4638      	mov	r0, r7
   d4684:	f000 fd30 	bl	d50e8 <_ZN8particle7BleUuidC1ERKS0_>
    value_ = static_cast<ValueType>(value);
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   d4688:	7833      	ldrb	r3, [r6, #0]
   d468a:	f88d 3014 	strb.w	r3, [sp, #20]
        construct(desc, properties, cUuid, sUuid, callback, context);
   d468e:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d4690:	9302      	str	r3, [sp, #8]
   d4692:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d4694:	4620      	mov	r0, r4
   d4696:	e9cd 7300 	strd	r7, r3, [sp]
   d469a:	aa05      	add	r2, sp, #20
   d469c:	ab06      	add	r3, sp, #24
   d469e:	4629      	mov	r1, r5
   d46a0:	f001 fb6c 	bl	d5d7c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   d46a4:	4620      	mov	r0, r4
   d46a6:	b011      	add	sp, #68	; 0x44
   d46a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d46aa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d46aa:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d46ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d46ae:	4604      	mov	r4, r0
   d46b0:	460d      	mov	r5, r1
   d46b2:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d46b4:	d916      	bls.n	d46e4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d46b6:	4290      	cmp	r0, r2
   d46b8:	d215      	bcs.n	d46e6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   d46ba:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   d46be:	1a75      	subs	r5, r6, r1
   d46c0:	f1a1 0714 	sub.w	r7, r1, #20
   d46c4:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d46c6:	42b7      	cmp	r7, r6
   d46c8:	d01c      	beq.n	d4704 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d46ca:	b12c      	cbz	r4, d46d8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d46cc:	4631      	mov	r1, r6
   d46ce:	4620      	mov	r0, r4
   d46d0:	f003 fff4 	bl	d86bc <_ZN6StringC1EOS_>
   d46d4:	7c33      	ldrb	r3, [r6, #16]
   d46d6:	7423      	strb	r3, [r4, #16]
   d46d8:	4630      	mov	r0, r6
   d46da:	f003 ff73 	bl	d85c4 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d46de:	3e14      	subs	r6, #20
   d46e0:	3c14      	subs	r4, #20
   d46e2:	e7f0      	b.n	d46c6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d46e4:	d00e      	beq.n	d4704 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d46e6:	42b5      	cmp	r5, r6
   d46e8:	d00c      	beq.n	d4704 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d46ea:	b12c      	cbz	r4, d46f8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d46ec:	4629      	mov	r1, r5
   d46ee:	4620      	mov	r0, r4
   d46f0:	f003 ffe4 	bl	d86bc <_ZN6StringC1EOS_>
   d46f4:	7c2b      	ldrb	r3, [r5, #16]
   d46f6:	7423      	strb	r3, [r4, #16]
   d46f8:	4628      	mov	r0, r5
   d46fa:	f003 ff63 	bl	d85c4 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d46fe:	3514      	adds	r5, #20
   d4700:	3414      	adds	r4, #20
   d4702:	e7f0      	b.n	d46e6 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   d4704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4706 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d470a:	2300      	movs	r3, #0
   d470c:	e9c0 3300 	strd	r3, r3, [r0]
   d4710:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4712:	684f      	ldr	r7, [r1, #4]
   d4714:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d4716:	4604      	mov	r4, r0
   d4718:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d471a:	dd23      	ble.n	d4764 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   d471c:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   d4720:	fb08 f007 	mul.w	r0, r8, r7
   d4724:	f000 fb58 	bl	d4dd8 <malloc>
            if (!d) {
   d4728:	4605      	mov	r5, r0
   d472a:	b1d8      	cbz	r0, d4764 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   d472c:	e9d4 1200 	ldrd	r1, r2, [r4]
   d4730:	fb08 1202 	mla	r2, r8, r2, r1
   d4734:	f7ff ffb9 	bl	d46aa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d4738:	6820      	ldr	r0, [r4, #0]
   d473a:	f000 fb55 	bl	d4de8 <free>
        data_ = d;
   d473e:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d4740:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d4742:	e9d6 7300 	ldrd	r7, r3, [r6]
   d4746:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   d474a:	45b8      	cmp	r8, r7
   d474c:	d008      	beq.n	d4760 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   d474e:	4639      	mov	r1, r7
   d4750:	4628      	mov	r0, r5
   d4752:	f003 ffcd 	bl	d86f0 <_ZN6StringC1ERKS_>
   d4756:	7c3b      	ldrb	r3, [r7, #16]
   d4758:	742b      	strb	r3, [r5, #16]
   d475a:	3714      	adds	r7, #20
   d475c:	3514      	adds	r5, #20
   d475e:	e7f4      	b.n	d474a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   d4760:	6873      	ldr	r3, [r6, #4]
   d4762:	6063      	str	r3, [r4, #4]
}
   d4764:	4620      	mov	r0, r4
   d4766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d476c <_GLOBAL__sub_I_serialLogHandler>:
   d476c:	b530      	push	{r4, r5, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d476e:	4a55      	ldr	r2, [pc, #340]	; (d48c4 <_GLOBAL__sub_I_serialLogHandler+0x158>)
        filter_(level, filters) {
   d4770:	4c55      	ldr	r4, [pc, #340]	; (d48c8 <_GLOBAL__sub_I_serialLogHandler+0x15c>)
   d4772:	b095      	sub	sp, #84	; 0x54
   d4774:	2300      	movs	r3, #0
   d4776:	7013      	strb	r3, [r2, #0]
        capacity_(0) {
   d4778:	e9cd 3304 	strd	r3, r3, [sp, #16]
   d477c:	9306      	str	r3, [sp, #24]
            StreamLogHandler(Serial, level, filters) {
   d477e:	f004 f94d 	bl	d8a1c <_Z16_fetch_usbserialv>
   d4782:	a904      	add	r1, sp, #16
   d4784:	4605      	mov	r5, r0
   d4786:	a807      	add	r0, sp, #28
   d4788:	f7ff ffbd 	bl	d4706 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        stream_(&stream) {
   d478c:	a907      	add	r1, sp, #28
   d478e:	a80a      	add	r0, sp, #40	; 0x28
   d4790:	f7ff ffb9 	bl	d4706 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d4794:	4b4d      	ldr	r3, [pc, #308]	; (d48cc <_GLOBAL__sub_I_serialLogHandler+0x160>)
   d4796:	6023      	str	r3, [r4, #0]
   d4798:	a90a      	add	r1, sp, #40	; 0x28
   d479a:	a80f      	add	r0, sp, #60	; 0x3c
   d479c:	f7ff ffb3 	bl	d4706 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d47a0:	aa0f      	add	r2, sp, #60	; 0x3c
   d47a2:	2101      	movs	r1, #1
   d47a4:	1d20      	adds	r0, r4, #4
   d47a6:	f003 faaf 	bl	d7d08 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d47aa:	a80f      	add	r0, sp, #60	; 0x3c
   d47ac:	f7ff ff48 	bl	d4640 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   d47b0:	a80a      	add	r0, sp, #40	; 0x28
   d47b2:	f7ff ff45 	bl	d4640 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d47b6:	4b46      	ldr	r3, [pc, #280]	; (d48d0 <_GLOBAL__sub_I_serialLogHandler+0x164>)
   d47b8:	6023      	str	r3, [r4, #0]
   d47ba:	6225      	str	r5, [r4, #32]
   d47bc:	a807      	add	r0, sp, #28
   d47be:	f7ff ff3f 	bl	d4640 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d47c2:	4b44      	ldr	r3, [pc, #272]	; (d48d4 <_GLOBAL__sub_I_serialLogHandler+0x168>)
   d47c4:	6023      	str	r3, [r4, #0]
        Serial.begin();
   d47c6:	f004 f929 	bl	d8a1c <_Z16_fetch_usbserialv>
   d47ca:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d47ce:	f004 f915 	bl	d89fc <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d47d2:	f002 ff41 	bl	d7658 <_ZN5spark10LogManager8instanceEv>
   d47d6:	4621      	mov	r1, r4
   d47d8:	f003 fa28 	bl	d7c2c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler serialLogHandler(LOG_LEVEL_TRACE);
   d47dc:	a804      	add	r0, sp, #16
   d47de:	f7ff ff2f 	bl	d4640 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d47e2:	4a3d      	ldr	r2, [pc, #244]	; (d48d8 <_GLOBAL__sub_I_serialLogHandler+0x16c>)
   d47e4:	493d      	ldr	r1, [pc, #244]	; (d48dc <_GLOBAL__sub_I_serialLogHandler+0x170>)
   d47e6:	4d3e      	ldr	r5, [pc, #248]	; (d48e0 <_GLOBAL__sub_I_serialLogHandler+0x174>)
   d47e8:	4620      	mov	r0, r4
   d47ea:	f004 fa11 	bl	d8c10 <__aeabi_atexit>
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   d47ee:	493d      	ldr	r1, [pc, #244]	; (d48e4 <_GLOBAL__sub_I_serialLogHandler+0x178>)
   d47f0:	483d      	ldr	r0, [pc, #244]	; (d48e8 <_GLOBAL__sub_I_serialLogHandler+0x17c>)
   d47f2:	f000 fd9b 	bl	d532c <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   d47f6:	493d      	ldr	r1, [pc, #244]	; (d48ec <_GLOBAL__sub_I_serialLogHandler+0x180>)
   d47f8:	483d      	ldr	r0, [pc, #244]	; (d48f0 <_GLOBAL__sub_I_serialLogHandler+0x184>)
   d47fa:	f000 fd97 	bl	d532c <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   d47fe:	493d      	ldr	r1, [pc, #244]	; (d48f4 <_GLOBAL__sub_I_serialLogHandler+0x188>)
   d4800:	483d      	ldr	r0, [pc, #244]	; (d48f8 <_GLOBAL__sub_I_serialLogHandler+0x18c>)
   d4802:	f000 fd93 	bl	d532c <_ZN8particle7BleUuidC1EPKc>
   d4806:	2414      	movs	r4, #20
private:
    std::shared_ptr<BleServiceImpl> impl_;
};


class BleScanResult {
   d4808:	4628      	mov	r0, r5
   d480a:	f000 fc1f 	bl	d504c <_ZN8particle10BleAddressC1Ev>
   d480e:	f105 0008 	add.w	r0, r5, #8
   d4812:	f000 fdee 	bl	d53f2 <_ZN8particle18BleAdvertisingDataC1Ev>
   d4816:	f105 002c 	add.w	r0, r5, #44	; 0x2c
   d481a:	f000 fdea 	bl	d53f2 <_ZN8particle18BleAdvertisingDataC1Ev>
BleScanResult scanResults[SCAN_RESULT_COUNT];
   d481e:	3c01      	subs	r4, #1
   d4820:	f105 0554 	add.w	r5, r5, #84	; 0x54
   d4824:	d1f0      	bne.n	d4808 <_GLOBAL__sub_I_serialLogHandler+0x9c>
BleCharacteristic peerTxCharacteristic;
   d4826:	4835      	ldr	r0, [pc, #212]	; (d48fc <_GLOBAL__sub_I_serialLogHandler+0x190>)
   d4828:	f000 ff3c 	bl	d56a4 <_ZN8particle17BleCharacteristicC1Ev>
   d482c:	4a2a      	ldr	r2, [pc, #168]	; (d48d8 <_GLOBAL__sub_I_serialLogHandler+0x16c>)
   d482e:	4934      	ldr	r1, [pc, #208]	; (d4900 <_GLOBAL__sub_I_serialLogHandler+0x194>)
   d4830:	4832      	ldr	r0, [pc, #200]	; (d48fc <_GLOBAL__sub_I_serialLogHandler+0x190>)
   d4832:	f004 f9ed 	bl	d8c10 <__aeabi_atexit>
BleCharacteristic peerRxCharacteristic;
   d4836:	4833      	ldr	r0, [pc, #204]	; (d4904 <_GLOBAL__sub_I_serialLogHandler+0x198>)
   d4838:	f000 ff34 	bl	d56a4 <_ZN8particle17BleCharacteristicC1Ev>
   d483c:	4a26      	ldr	r2, [pc, #152]	; (d48d8 <_GLOBAL__sub_I_serialLogHandler+0x16c>)
   d483e:	4930      	ldr	r1, [pc, #192]	; (d4900 <_GLOBAL__sub_I_serialLogHandler+0x194>)
   d4840:	4830      	ldr	r0, [pc, #192]	; (d4904 <_GLOBAL__sub_I_serialLogHandler+0x198>)
   d4842:	f004 f9e5 	bl	d8c10 <__aeabi_atexit>
BlePeerDevice peer;
   d4846:	4830      	ldr	r0, [pc, #192]	; (d4908 <_GLOBAL__sub_I_serialLogHandler+0x19c>)
   d4848:	f001 f8a0 	bl	d598c <_ZN8particle13BlePeerDeviceC1Ev>
   d484c:	4a22      	ldr	r2, [pc, #136]	; (d48d8 <_GLOBAL__sub_I_serialLogHandler+0x16c>)
   d484e:	492f      	ldr	r1, [pc, #188]	; (d490c <_GLOBAL__sub_I_serialLogHandler+0x1a0>)
   d4850:	482d      	ldr	r0, [pc, #180]	; (d4908 <_GLOBAL__sub_I_serialLogHandler+0x19c>)
   d4852:	f004 f9dd 	bl	d8c10 <__aeabi_atexit>
    value_ = static_cast<ValueType>(value);
   d4856:	2310      	movs	r3, #16
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   d4858:	4927      	ldr	r1, [pc, #156]	; (d48f8 <_GLOBAL__sub_I_serialLogHandler+0x18c>)
   d485a:	f88d 301c 	strb.w	r3, [sp, #28]
   d485e:	a80a      	add	r0, sp, #40	; 0x28
   d4860:	f000 fc42 	bl	d50e8 <_ZN8particle7BleUuidC1ERKS0_>
   d4864:	4920      	ldr	r1, [pc, #128]	; (d48e8 <_GLOBAL__sub_I_serialLogHandler+0x17c>)
   d4866:	a80f      	add	r0, sp, #60	; 0x3c
   d4868:	f000 fc3e 	bl	d50e8 <_ZN8particle7BleUuidC1ERKS0_>
   d486c:	ab0f      	add	r3, sp, #60	; 0x3c
   d486e:	9300      	str	r3, [sp, #0]
   d4870:	aa07      	add	r2, sp, #28
   d4872:	ab0a      	add	r3, sp, #40	; 0x28
   d4874:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d4878:	4925      	ldr	r1, [pc, #148]	; (d4910 <_GLOBAL__sub_I_serialLogHandler+0x1a4>)
   d487a:	4826      	ldr	r0, [pc, #152]	; (d4914 <_GLOBAL__sub_I_serialLogHandler+0x1a8>)
   d487c:	f7ff fef3 	bl	d4666 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d4880:	4a15      	ldr	r2, [pc, #84]	; (d48d8 <_GLOBAL__sub_I_serialLogHandler+0x16c>)
   d4882:	491f      	ldr	r1, [pc, #124]	; (d4900 <_GLOBAL__sub_I_serialLogHandler+0x194>)
   d4884:	4823      	ldr	r0, [pc, #140]	; (d4914 <_GLOBAL__sub_I_serialLogHandler+0x1a8>)
   d4886:	f004 f9c3 	bl	d8c10 <__aeabi_atexit>
   d488a:	2304      	movs	r3, #4
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);
   d488c:	4918      	ldr	r1, [pc, #96]	; (d48f0 <_GLOBAL__sub_I_serialLogHandler+0x184>)
   d488e:	f88d 301c 	strb.w	r3, [sp, #28]
   d4892:	a80a      	add	r0, sp, #40	; 0x28
   d4894:	f000 fc28 	bl	d50e8 <_ZN8particle7BleUuidC1ERKS0_>
   d4898:	4913      	ldr	r1, [pc, #76]	; (d48e8 <_GLOBAL__sub_I_serialLogHandler+0x17c>)
   d489a:	a80f      	add	r0, sp, #60	; 0x3c
   d489c:	f000 fc24 	bl	d50e8 <_ZN8particle7BleUuidC1ERKS0_>
   d48a0:	4b1d      	ldr	r3, [pc, #116]	; (d4918 <_GLOBAL__sub_I_serialLogHandler+0x1ac>)
   d48a2:	9301      	str	r3, [sp, #4]
   d48a4:	ab0f      	add	r3, sp, #60	; 0x3c
   d48a6:	9300      	str	r3, [sp, #0]
   d48a8:	aa07      	add	r2, sp, #28
   d48aa:	ab0a      	add	r3, sp, #40	; 0x28
   d48ac:	491b      	ldr	r1, [pc, #108]	; (d491c <_GLOBAL__sub_I_serialLogHandler+0x1b0>)
   d48ae:	9402      	str	r4, [sp, #8]
   d48b0:	481b      	ldr	r0, [pc, #108]	; (d4920 <_GLOBAL__sub_I_serialLogHandler+0x1b4>)
   d48b2:	f7ff fed8 	bl	d4666 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d48b6:	4a08      	ldr	r2, [pc, #32]	; (d48d8 <_GLOBAL__sub_I_serialLogHandler+0x16c>)
   d48b8:	4911      	ldr	r1, [pc, #68]	; (d4900 <_GLOBAL__sub_I_serialLogHandler+0x194>)
   d48ba:	4819      	ldr	r0, [pc, #100]	; (d4920 <_GLOBAL__sub_I_serialLogHandler+0x1b4>)
   d48bc:	f004 f9a8 	bl	d8c10 <__aeabi_atexit>
   d48c0:	b015      	add	sp, #84	; 0x54
   d48c2:	bd30      	pop	{r4, r5, pc}
   d48c4:	2003df00 	.word	0x2003df00
   d48c8:	2003e5e4 	.word	0x2003e5e4
   d48cc:	000d9310 	.word	0x000d9310
   d48d0:	000d9660 	.word	0x000d9660
   d48d4:	000d9328 	.word	0x000d9328
   d48d8:	2003dee8 	.word	0x2003dee8
   d48dc:	000d40e9 	.word	0x000d40e9
   d48e0:	2003df54 	.word	0x2003df54
   d48e4:	000d9292 	.word	0x000d9292
   d48e8:	2003deec 	.word	0x2003deec
   d48ec:	000d92b7 	.word	0x000d92b7
   d48f0:	2003df04 	.word	0x2003df04
   d48f4:	000d92dc 	.word	0x000d92dc
   d48f8:	2003df18 	.word	0x2003df18
   d48fc:	2003df44 	.word	0x2003df44
   d4900:	000d5cc5 	.word	0x000d5cc5
   d4904:	2003df3c 	.word	0x2003df3c
   d4908:	2003df34 	.word	0x2003df34
   d490c:	000d5cd3 	.word	0x000d5cd3
   d4910:	000d9301 	.word	0x000d9301
   d4914:	2003e61c 	.word	0x2003e61c
   d4918:	000d41a9 	.word	0x000d41a9
   d491c:	000d9304 	.word	0x000d9304
   d4920:	2003df4c 	.word	0x2003df4c

000d4924 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d4924:	b508      	push	{r3, lr}
   d4926:	4b02      	ldr	r3, [pc, #8]	; (d4930 <hal_ble_stack_init+0xc>)
   d4928:	681b      	ldr	r3, [r3, #0]
   d492a:	689b      	ldr	r3, [r3, #8]
   d492c:	9301      	str	r3, [sp, #4]
   d492e:	bd08      	pop	{r3, pc}
   d4930:	00030278 	.word	0x00030278

000d4934 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d4934:	b508      	push	{r3, lr}
   d4936:	4b02      	ldr	r3, [pc, #8]	; (d4940 <hal_ble_gap_set_advertising_data+0xc>)
   d4938:	681b      	ldr	r3, [r3, #0]
   d493a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d493c:	9301      	str	r3, [sp, #4]
   d493e:	bd08      	pop	{r3, pc}
   d4940:	00030278 	.word	0x00030278

000d4944 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d4944:	b508      	push	{r3, lr}
   d4946:	4b02      	ldr	r3, [pc, #8]	; (d4950 <hal_ble_gap_set_scan_response_data+0xc>)
   d4948:	681b      	ldr	r3, [r3, #0]
   d494a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d494c:	9301      	str	r3, [sp, #4]
   d494e:	bd08      	pop	{r3, pc}
   d4950:	00030278 	.word	0x00030278

000d4954 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d4954:	b508      	push	{r3, lr}
   d4956:	4b02      	ldr	r3, [pc, #8]	; (d4960 <hal_ble_gap_start_advertising+0xc>)
   d4958:	681b      	ldr	r3, [r3, #0]
   d495a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d495c:	9301      	str	r3, [sp, #4]
   d495e:	bd08      	pop	{r3, pc}
   d4960:	00030278 	.word	0x00030278

000d4964 <hal_ble_gap_start_scan>:
DYNALIB_FN(26, hal_ble, hal_ble_gap_get_auto_advertise, int(hal_ble_auto_adv_cfg_t*, void*))
DYNALIB_FN(27, hal_ble, hal_ble_gap_stop_advertising, int(void*))
DYNALIB_FN(28, hal_ble, hal_ble_gap_is_advertising, bool(void*))
DYNALIB_FN(29, hal_ble, hal_ble_gap_set_scan_parameters, int(const hal_ble_scan_params_t*, void*))
DYNALIB_FN(30, hal_ble, hal_ble_gap_get_scan_parameters, int(hal_ble_scan_params_t*, void*))
DYNALIB_FN(31, hal_ble, hal_ble_gap_start_scan, int(hal_ble_on_scan_result_cb_t, void*, void*))
   d4964:	b508      	push	{r3, lr}
   d4966:	4b02      	ldr	r3, [pc, #8]	; (d4970 <hal_ble_gap_start_scan+0xc>)
   d4968:	681b      	ldr	r3, [r3, #0]
   d496a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
   d496c:	9301      	str	r3, [sp, #4]
   d496e:	bd08      	pop	{r3, pc}
   d4970:	00030278 	.word	0x00030278

000d4974 <hal_ble_gap_stop_scan>:
DYNALIB_FN(32, hal_ble, hal_ble_gap_is_scanning, bool(void*))
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
   d4974:	b508      	push	{r3, lr}
   d4976:	4b03      	ldr	r3, [pc, #12]	; (d4984 <hal_ble_gap_stop_scan+0x10>)
   d4978:	681b      	ldr	r3, [r3, #0]
   d497a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
   d497e:	9301      	str	r3, [sp, #4]
   d4980:	bd08      	pop	{r3, pc}
   d4982:	0000      	.short	0x0000
   d4984:	00030278 	.word	0x00030278

000d4988 <hal_ble_gap_disconnect>:
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d4988:	b508      	push	{r3, lr}
   d498a:	4b03      	ldr	r3, [pc, #12]	; (d4998 <hal_ble_gap_disconnect+0x10>)
   d498c:	681b      	ldr	r3, [r3, #0]
   d498e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d4992:	9301      	str	r3, [sp, #4]
   d4994:	bd08      	pop	{r3, pc}
   d4996:	0000      	.short	0x0000
   d4998:	00030278 	.word	0x00030278

000d499c <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   d499c:	b508      	push	{r3, lr}
   d499e:	4b03      	ldr	r3, [pc, #12]	; (d49ac <hal_ble_gatt_server_add_service+0x10>)
   d49a0:	681b      	ldr	r3, [r3, #0]
   d49a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d49a6:	9301      	str	r3, [sp, #4]
   d49a8:	bd08      	pop	{r3, pc}
   d49aa:	0000      	.short	0x0000
   d49ac:	00030278 	.word	0x00030278

000d49b0 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d49b0:	b508      	push	{r3, lr}
   d49b2:	4b03      	ldr	r3, [pc, #12]	; (d49c0 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   d49b4:	681b      	ldr	r3, [r3, #0]
   d49b6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   d49ba:	9301      	str	r3, [sp, #4]
   d49bc:	bd08      	pop	{r3, pc}
   d49be:	0000      	.short	0x0000
   d49c0:	00030278 	.word	0x00030278

000d49c4 <hal_ble_gatt_client_discover_all_services>:
DYNALIB_FN(46, hal_ble, hal_ble_gatt_server_get_characteristic_value, ssize_t(hal_ble_attr_handle_t, uint8_t*, size_t, void*))
DYNALIB_FN(47, hal_ble, hal_ble_gatt_client_discover_all_services, int(hal_ble_conn_handle_t, hal_ble_on_disc_service_cb_t, void*, void*))
   d49c4:	b508      	push	{r3, lr}
   d49c6:	4b03      	ldr	r3, [pc, #12]	; (d49d4 <hal_ble_gatt_client_discover_all_services+0x10>)
   d49c8:	681b      	ldr	r3, [r3, #0]
   d49ca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
   d49ce:	9301      	str	r3, [sp, #4]
   d49d0:	bd08      	pop	{r3, pc}
   d49d2:	0000      	.short	0x0000
   d49d4:	00030278 	.word	0x00030278

000d49d8 <hal_ble_gatt_client_discover_characteristics>:
DYNALIB_FN(48, hal_ble, hal_ble_gatt_client_discover_service_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_uuid_t*, hal_ble_on_disc_service_cb_t, void*, void*))
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
   d49d8:	b508      	push	{r3, lr}
   d49da:	4b03      	ldr	r3, [pc, #12]	; (d49e8 <hal_ble_gatt_client_discover_characteristics+0x10>)
   d49dc:	681b      	ldr	r3, [r3, #0]
   d49de:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
   d49e2:	9301      	str	r3, [sp, #4]
   d49e4:	bd08      	pop	{r3, pc}
   d49e6:	0000      	.short	0x0000
   d49e8:	00030278 	.word	0x00030278

000d49ec <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d49ec:	b508      	push	{r3, lr}
   d49ee:	4b03      	ldr	r3, [pc, #12]	; (d49fc <hal_ble_gatt_client_write_with_response+0x10>)
   d49f0:	681b      	ldr	r3, [r3, #0]
   d49f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   d49f6:	9301      	str	r3, [sp, #4]
   d49f8:	bd08      	pop	{r3, pc}
   d49fa:	0000      	.short	0x0000
   d49fc:	00030278 	.word	0x00030278

000d4a00 <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4a00:	b508      	push	{r3, lr}
   d4a02:	4b03      	ldr	r3, [pc, #12]	; (d4a10 <hal_ble_gatt_client_write_without_response+0x10>)
   d4a04:	681b      	ldr	r3, [r3, #0]
   d4a06:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   d4a0a:	9301      	str	r3, [sp, #4]
   d4a0c:	bd08      	pop	{r3, pc}
   d4a0e:	0000      	.short	0x0000
   d4a10:	00030278 	.word	0x00030278

000d4a14 <hal_ble_gatt_client_read>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))
   d4a14:	b508      	push	{r3, lr}
   d4a16:	4b03      	ldr	r3, [pc, #12]	; (d4a24 <hal_ble_gatt_client_read+0x10>)
   d4a18:	681b      	ldr	r3, [r3, #0]
   d4a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   d4a1e:	9301      	str	r3, [sp, #4]
   d4a20:	bd08      	pop	{r3, pc}
   d4a22:	0000      	.short	0x0000
   d4a24:	00030278 	.word	0x00030278

000d4a28 <hal_ble_gap_connect>:

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
   d4a28:	b508      	push	{r3, lr}
   d4a2a:	4b03      	ldr	r3, [pc, #12]	; (d4a38 <hal_ble_gap_connect+0x10>)
   d4a2c:	681b      	ldr	r3, [r3, #0]
   d4a2e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
   d4a32:	9301      	str	r3, [sp, #4]
   d4a34:	bd08      	pop	{r3, pc}
   d4a36:	0000      	.short	0x0000
   d4a38:	00030278 	.word	0x00030278

000d4a3c <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   d4a3c:	b508      	push	{r3, lr}
   d4a3e:	4b03      	ldr	r3, [pc, #12]	; (d4a4c <hal_ble_gatt_server_add_characteristic+0x10>)
   d4a40:	681b      	ldr	r3, [r3, #0]
   d4a42:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   d4a46:	9301      	str	r3, [sp, #4]
   d4a48:	bd08      	pop	{r3, pc}
   d4a4a:	0000      	.short	0x0000
   d4a4c:	00030278 	.word	0x00030278

000d4a50 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d4a50:	b508      	push	{r3, lr}
   d4a52:	4b03      	ldr	r3, [pc, #12]	; (d4a60 <hal_ble_set_callback_on_periph_link_events+0x10>)
   d4a54:	681b      	ldr	r3, [r3, #0]
   d4a56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d4a5a:	9301      	str	r3, [sp, #4]
   d4a5c:	bd08      	pop	{r3, pc}
   d4a5e:	0000      	.short	0x0000
   d4a60:	00030278 	.word	0x00030278

000d4a64 <hal_ble_gatt_client_configure_cccd>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
   d4a64:	b508      	push	{r3, lr}
   d4a66:	4b03      	ldr	r3, [pc, #12]	; (d4a74 <hal_ble_gatt_client_configure_cccd+0x10>)
   d4a68:	681b      	ldr	r3, [r3, #0]
   d4a6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
   d4a6e:	9301      	str	r3, [sp, #4]
   d4a70:	bd08      	pop	{r3, pc}
   d4a72:	0000      	.short	0x0000
   d4a74:	00030278 	.word	0x00030278

000d4a78 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4a78:	b508      	push	{r3, lr}
   d4a7a:	4b03      	ldr	r3, [pc, #12]	; (d4a88 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   d4a7c:	681b      	ldr	r3, [r3, #0]
   d4a7e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   d4a82:	9301      	str	r3, [sp, #4]
   d4a84:	bd08      	pop	{r3, pc}
   d4a86:	0000      	.short	0x0000
   d4a88:	00030278 	.word	0x00030278

000d4a8c <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   d4a8c:	b508      	push	{r3, lr}
   d4a8e:	4b03      	ldr	r3, [pc, #12]	; (d4a9c <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   d4a90:	681b      	ldr	r3, [r3, #0]
   d4a92:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   d4a96:	9301      	str	r3, [sp, #4]
   d4a98:	bd08      	pop	{r3, pc}
   d4a9a:	0000      	.short	0x0000
   d4a9c:	00030278 	.word	0x00030278

000d4aa0 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4aa0:	b508      	push	{r3, lr}
   d4aa2:	4b02      	ldr	r3, [pc, #8]	; (d4aac <os_mutex_recursive_create+0xc>)
   d4aa4:	681b      	ldr	r3, [r3, #0]
   d4aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4aa8:	9301      	str	r3, [sp, #4]
   d4aaa:	bd08      	pop	{r3, pc}
   d4aac:	00030248 	.word	0x00030248

000d4ab0 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4ab0:	b508      	push	{r3, lr}
   d4ab2:	4b02      	ldr	r3, [pc, #8]	; (d4abc <os_mutex_recursive_destroy+0xc>)
   d4ab4:	681b      	ldr	r3, [r3, #0]
   d4ab6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4ab8:	9301      	str	r3, [sp, #4]
   d4aba:	bd08      	pop	{r3, pc}
   d4abc:	00030248 	.word	0x00030248

000d4ac0 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d4ac0:	b508      	push	{r3, lr}
   d4ac2:	4b02      	ldr	r3, [pc, #8]	; (d4acc <os_mutex_recursive_lock+0xc>)
   d4ac4:	681b      	ldr	r3, [r3, #0]
   d4ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4ac8:	9301      	str	r3, [sp, #4]
   d4aca:	bd08      	pop	{r3, pc}
   d4acc:	00030248 	.word	0x00030248

000d4ad0 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d4ad0:	b508      	push	{r3, lr}
   d4ad2:	4b02      	ldr	r3, [pc, #8]	; (d4adc <os_mutex_recursive_unlock+0xc>)
   d4ad4:	681b      	ldr	r3, [r3, #0]
   d4ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4ad8:	9301      	str	r3, [sp, #4]
   d4ada:	bd08      	pop	{r3, pc}
   d4adc:	00030248 	.word	0x00030248

000d4ae0 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4ae0:	b508      	push	{r3, lr}
   d4ae2:	4b02      	ldr	r3, [pc, #8]	; (d4aec <HAL_RNG_GetRandomNumber+0xc>)
   d4ae4:	681b      	ldr	r3, [r3, #0]
   d4ae6:	685b      	ldr	r3, [r3, #4]
   d4ae8:	9301      	str	r3, [sp, #4]
   d4aea:	bd08      	pop	{r3, pc}
   d4aec:	00030218 	.word	0x00030218

000d4af0 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4af0:	b508      	push	{r3, lr}
   d4af2:	4b02      	ldr	r3, [pc, #8]	; (d4afc <HAL_Delay_Microseconds+0xc>)
   d4af4:	681b      	ldr	r3, [r3, #0]
   d4af6:	68db      	ldr	r3, [r3, #12]
   d4af8:	9301      	str	r3, [sp, #4]
   d4afa:	bd08      	pop	{r3, pc}
   d4afc:	00030218 	.word	0x00030218

000d4b00 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4b00:	b508      	push	{r3, lr}
   d4b02:	4b02      	ldr	r3, [pc, #8]	; (d4b0c <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4b04:	681b      	ldr	r3, [r3, #0]
   d4b06:	695b      	ldr	r3, [r3, #20]
   d4b08:	9301      	str	r3, [sp, #4]
   d4b0a:	bd08      	pop	{r3, pc}
   d4b0c:	00030218 	.word	0x00030218

000d4b10 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4b10:	b508      	push	{r3, lr}
   d4b12:	4b02      	ldr	r3, [pc, #8]	; (d4b1c <inet_inet_ntop+0xc>)
   d4b14:	681b      	ldr	r3, [r3, #0]
   d4b16:	695b      	ldr	r3, [r3, #20]
   d4b18:	9301      	str	r3, [sp, #4]
   d4b1a:	bd08      	pop	{r3, pc}
   d4b1c:	00030264 	.word	0x00030264

000d4b20 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4b20:	b508      	push	{r3, lr}
   d4b22:	4b02      	ldr	r3, [pc, #8]	; (d4b2c <netdb_freeaddrinfo+0xc>)
   d4b24:	681b      	ldr	r3, [r3, #0]
   d4b26:	689b      	ldr	r3, [r3, #8]
   d4b28:	9301      	str	r3, [sp, #4]
   d4b2a:	bd08      	pop	{r3, pc}
   d4b2c:	00030268 	.word	0x00030268

000d4b30 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4b30:	b508      	push	{r3, lr}
   d4b32:	4b02      	ldr	r3, [pc, #8]	; (d4b3c <netdb_getaddrinfo+0xc>)
   d4b34:	681b      	ldr	r3, [r3, #0]
   d4b36:	68db      	ldr	r3, [r3, #12]
   d4b38:	9301      	str	r3, [sp, #4]
   d4b3a:	bd08      	pop	{r3, pc}
   d4b3c:	00030268 	.word	0x00030268

000d4b40 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4b40:	b508      	push	{r3, lr}
   d4b42:	4b02      	ldr	r3, [pc, #8]	; (d4b4c <hal_usart_init+0xc>)
   d4b44:	681b      	ldr	r3, [r3, #0]
   d4b46:	681b      	ldr	r3, [r3, #0]
   d4b48:	9301      	str	r3, [sp, #4]
   d4b4a:	bd08      	pop	{r3, pc}
   d4b4c:	0003023c 	.word	0x0003023c

000d4b50 <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   d4b50:	b508      	push	{r3, lr}
   d4b52:	4b02      	ldr	r3, [pc, #8]	; (d4b5c <hal_usart_end+0xc>)
   d4b54:	681b      	ldr	r3, [r3, #0]
   d4b56:	689b      	ldr	r3, [r3, #8]
   d4b58:	9301      	str	r3, [sp, #4]
   d4b5a:	bd08      	pop	{r3, pc}
   d4b5c:	0003023c 	.word	0x0003023c

000d4b60 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4b60:	b508      	push	{r3, lr}
   d4b62:	4b02      	ldr	r3, [pc, #8]	; (d4b6c <hal_usart_write+0xc>)
   d4b64:	681b      	ldr	r3, [r3, #0]
   d4b66:	68db      	ldr	r3, [r3, #12]
   d4b68:	9301      	str	r3, [sp, #4]
   d4b6a:	bd08      	pop	{r3, pc}
   d4b6c:	0003023c 	.word	0x0003023c

000d4b70 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4b70:	b508      	push	{r3, lr}
   d4b72:	4b02      	ldr	r3, [pc, #8]	; (d4b7c <hal_usart_available+0xc>)
   d4b74:	681b      	ldr	r3, [r3, #0]
   d4b76:	691b      	ldr	r3, [r3, #16]
   d4b78:	9301      	str	r3, [sp, #4]
   d4b7a:	bd08      	pop	{r3, pc}
   d4b7c:	0003023c 	.word	0x0003023c

000d4b80 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4b80:	b508      	push	{r3, lr}
   d4b82:	4b02      	ldr	r3, [pc, #8]	; (d4b8c <hal_usart_read+0xc>)
   d4b84:	681b      	ldr	r3, [r3, #0]
   d4b86:	695b      	ldr	r3, [r3, #20]
   d4b88:	9301      	str	r3, [sp, #4]
   d4b8a:	bd08      	pop	{r3, pc}
   d4b8c:	0003023c 	.word	0x0003023c

000d4b90 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4b90:	b508      	push	{r3, lr}
   d4b92:	4b02      	ldr	r3, [pc, #8]	; (d4b9c <hal_usart_peek+0xc>)
   d4b94:	681b      	ldr	r3, [r3, #0]
   d4b96:	699b      	ldr	r3, [r3, #24]
   d4b98:	9301      	str	r3, [sp, #4]
   d4b9a:	bd08      	pop	{r3, pc}
   d4b9c:	0003023c 	.word	0x0003023c

000d4ba0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4ba0:	b508      	push	{r3, lr}
   d4ba2:	4b02      	ldr	r3, [pc, #8]	; (d4bac <hal_usart_flush+0xc>)
   d4ba4:	681b      	ldr	r3, [r3, #0]
   d4ba6:	69db      	ldr	r3, [r3, #28]
   d4ba8:	9301      	str	r3, [sp, #4]
   d4baa:	bd08      	pop	{r3, pc}
   d4bac:	0003023c 	.word	0x0003023c

000d4bb0 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4bb0:	b508      	push	{r3, lr}
   d4bb2:	4b02      	ldr	r3, [pc, #8]	; (d4bbc <hal_usart_available_data_for_write+0xc>)
   d4bb4:	681b      	ldr	r3, [r3, #0]
   d4bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4bb8:	9301      	str	r3, [sp, #4]
   d4bba:	bd08      	pop	{r3, pc}
   d4bbc:	0003023c 	.word	0x0003023c

000d4bc0 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d4bc0:	b508      	push	{r3, lr}
   d4bc2:	4b02      	ldr	r3, [pc, #8]	; (d4bcc <hal_usart_begin_config+0xc>)
   d4bc4:	681b      	ldr	r3, [r3, #0]
   d4bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4bc8:	9301      	str	r3, [sp, #4]
   d4bca:	bd08      	pop	{r3, pc}
   d4bcc:	0003023c 	.word	0x0003023c

000d4bd0 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4bd0:	b508      	push	{r3, lr}
   d4bd2:	4b02      	ldr	r3, [pc, #8]	; (d4bdc <HAL_USB_USART_Init+0xc>)
   d4bd4:	681b      	ldr	r3, [r3, #0]
   d4bd6:	681b      	ldr	r3, [r3, #0]
   d4bd8:	9301      	str	r3, [sp, #4]
   d4bda:	bd08      	pop	{r3, pc}
   d4bdc:	0003024c 	.word	0x0003024c

000d4be0 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4be0:	b508      	push	{r3, lr}
   d4be2:	4b02      	ldr	r3, [pc, #8]	; (d4bec <HAL_USB_USART_Begin+0xc>)
   d4be4:	681b      	ldr	r3, [r3, #0]
   d4be6:	685b      	ldr	r3, [r3, #4]
   d4be8:	9301      	str	r3, [sp, #4]
   d4bea:	bd08      	pop	{r3, pc}
   d4bec:	0003024c 	.word	0x0003024c

000d4bf0 <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d4bf0:	b508      	push	{r3, lr}
   d4bf2:	4b02      	ldr	r3, [pc, #8]	; (d4bfc <HAL_USB_USART_End+0xc>)
   d4bf4:	681b      	ldr	r3, [r3, #0]
   d4bf6:	689b      	ldr	r3, [r3, #8]
   d4bf8:	9301      	str	r3, [sp, #4]
   d4bfa:	bd08      	pop	{r3, pc}
   d4bfc:	0003024c 	.word	0x0003024c

000d4c00 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4c00:	b508      	push	{r3, lr}
   d4c02:	4b02      	ldr	r3, [pc, #8]	; (d4c0c <HAL_USB_USART_Available_Data+0xc>)
   d4c04:	681b      	ldr	r3, [r3, #0]
   d4c06:	691b      	ldr	r3, [r3, #16]
   d4c08:	9301      	str	r3, [sp, #4]
   d4c0a:	bd08      	pop	{r3, pc}
   d4c0c:	0003024c 	.word	0x0003024c

000d4c10 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4c10:	b508      	push	{r3, lr}
   d4c12:	4b02      	ldr	r3, [pc, #8]	; (d4c1c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4c14:	681b      	ldr	r3, [r3, #0]
   d4c16:	695b      	ldr	r3, [r3, #20]
   d4c18:	9301      	str	r3, [sp, #4]
   d4c1a:	bd08      	pop	{r3, pc}
   d4c1c:	0003024c 	.word	0x0003024c

000d4c20 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4c20:	b508      	push	{r3, lr}
   d4c22:	4b02      	ldr	r3, [pc, #8]	; (d4c2c <HAL_USB_USART_Receive_Data+0xc>)
   d4c24:	681b      	ldr	r3, [r3, #0]
   d4c26:	699b      	ldr	r3, [r3, #24]
   d4c28:	9301      	str	r3, [sp, #4]
   d4c2a:	bd08      	pop	{r3, pc}
   d4c2c:	0003024c 	.word	0x0003024c

000d4c30 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4c30:	b508      	push	{r3, lr}
   d4c32:	4b02      	ldr	r3, [pc, #8]	; (d4c3c <HAL_USB_USART_Send_Data+0xc>)
   d4c34:	681b      	ldr	r3, [r3, #0]
   d4c36:	69db      	ldr	r3, [r3, #28]
   d4c38:	9301      	str	r3, [sp, #4]
   d4c3a:	bd08      	pop	{r3, pc}
   d4c3c:	0003024c 	.word	0x0003024c

000d4c40 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4c40:	b508      	push	{r3, lr}
   d4c42:	4b02      	ldr	r3, [pc, #8]	; (d4c4c <HAL_USB_USART_Flush_Data+0xc>)
   d4c44:	681b      	ldr	r3, [r3, #0]
   d4c46:	6a1b      	ldr	r3, [r3, #32]
   d4c48:	9301      	str	r3, [sp, #4]
   d4c4a:	bd08      	pop	{r3, pc}
   d4c4c:	0003024c 	.word	0x0003024c

000d4c50 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4c50:	b508      	push	{r3, lr}
   d4c52:	4b02      	ldr	r3, [pc, #8]	; (d4c5c <panic_+0xc>)
   d4c54:	681b      	ldr	r3, [r3, #0]
   d4c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4c58:	9301      	str	r3, [sp, #4]
   d4c5a:	bd08      	pop	{r3, pc}
   d4c5c:	00030260 	.word	0x00030260

000d4c60 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d4c60:	b508      	push	{r3, lr}
   d4c62:	4b02      	ldr	r3, [pc, #8]	; (d4c6c <log_message+0xc>)
   d4c64:	681b      	ldr	r3, [r3, #0]
   d4c66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4c68:	9301      	str	r3, [sp, #4]
   d4c6a:	bd08      	pop	{r3, pc}
   d4c6c:	00030260 	.word	0x00030260

000d4c70 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d4c70:	b508      	push	{r3, lr}
   d4c72:	4b02      	ldr	r3, [pc, #8]	; (d4c7c <log_message_v+0xc>)
   d4c74:	681b      	ldr	r3, [r3, #0]
   d4c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4c78:	9301      	str	r3, [sp, #4]
   d4c7a:	bd08      	pop	{r3, pc}
   d4c7c:	00030260 	.word	0x00030260

000d4c80 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d4c80:	b508      	push	{r3, lr}
   d4c82:	4b02      	ldr	r3, [pc, #8]	; (d4c8c <log_level_name+0xc>)
   d4c84:	681b      	ldr	r3, [r3, #0]
   d4c86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d4c88:	9301      	str	r3, [sp, #4]
   d4c8a:	bd08      	pop	{r3, pc}
   d4c8c:	00030260 	.word	0x00030260

000d4c90 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d4c90:	b508      	push	{r3, lr}
   d4c92:	4b02      	ldr	r3, [pc, #8]	; (d4c9c <log_set_callbacks+0xc>)
   d4c94:	681b      	ldr	r3, [r3, #0]
   d4c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d4c98:	9301      	str	r3, [sp, #4]
   d4c9a:	bd08      	pop	{r3, pc}
   d4c9c:	00030260 	.word	0x00030260

000d4ca0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4ca0:	b508      	push	{r3, lr}
   d4ca2:	4b02      	ldr	r3, [pc, #8]	; (d4cac <set_system_mode+0xc>)
   d4ca4:	681b      	ldr	r3, [r3, #0]
   d4ca6:	685b      	ldr	r3, [r3, #4]
   d4ca8:	9301      	str	r3, [sp, #4]
   d4caa:	bd08      	pop	{r3, pc}
   d4cac:	00030220 	.word	0x00030220

000d4cb0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4cb0:	b508      	push	{r3, lr}
   d4cb2:	4b02      	ldr	r3, [pc, #8]	; (d4cbc <system_delay_ms+0xc>)
   d4cb4:	681b      	ldr	r3, [r3, #0]
   d4cb6:	695b      	ldr	r3, [r3, #20]
   d4cb8:	9301      	str	r3, [sp, #4]
   d4cba:	bd08      	pop	{r3, pc}
   d4cbc:	00030220 	.word	0x00030220

000d4cc0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4cc0:	b508      	push	{r3, lr}
   d4cc2:	4b02      	ldr	r3, [pc, #8]	; (d4ccc <application_thread_current+0xc>)
   d4cc4:	681b      	ldr	r3, [r3, #0]
   d4cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4cc8:	9301      	str	r3, [sp, #4]
   d4cca:	bd08      	pop	{r3, pc}
   d4ccc:	00030220 	.word	0x00030220

000d4cd0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4cd0:	b508      	push	{r3, lr}
   d4cd2:	4b02      	ldr	r3, [pc, #8]	; (d4cdc <application_thread_invoke+0xc>)
   d4cd4:	681b      	ldr	r3, [r3, #0]
   d4cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4cd8:	9301      	str	r3, [sp, #4]
   d4cda:	bd08      	pop	{r3, pc}
   d4cdc:	00030220 	.word	0x00030220

000d4ce0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4ce0:	b508      	push	{r3, lr}
   d4ce2:	4b03      	ldr	r3, [pc, #12]	; (d4cf0 <system_ctrl_set_app_request_handler+0x10>)
   d4ce4:	681b      	ldr	r3, [r3, #0]
   d4ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4cea:	9301      	str	r3, [sp, #4]
   d4cec:	bd08      	pop	{r3, pc}
   d4cee:	0000      	.short	0x0000
   d4cf0:	00030220 	.word	0x00030220

000d4cf4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4cf4:	b508      	push	{r3, lr}
   d4cf6:	4b03      	ldr	r3, [pc, #12]	; (d4d04 <system_ctrl_set_result+0x10>)
   d4cf8:	681b      	ldr	r3, [r3, #0]
   d4cfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4cfe:	9301      	str	r3, [sp, #4]
   d4d00:	bd08      	pop	{r3, pc}
   d4d02:	0000      	.short	0x0000
   d4d04:	00030220 	.word	0x00030220

000d4d08 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d4d08:	b508      	push	{r3, lr}
   d4d0a:	4b02      	ldr	r3, [pc, #8]	; (d4d14 <spark_cloud_flag_connected+0xc>)
   d4d0c:	681b      	ldr	r3, [r3, #0]
   d4d0e:	695b      	ldr	r3, [r3, #20]
   d4d10:	9301      	str	r3, [sp, #4]
   d4d12:	bd08      	pop	{r3, pc}
   d4d14:	00030244 	.word	0x00030244

000d4d18 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4d18:	b508      	push	{r3, lr}
   d4d1a:	4b02      	ldr	r3, [pc, #8]	; (d4d24 <spark_send_event+0xc>)
   d4d1c:	681b      	ldr	r3, [r3, #0]
   d4d1e:	6a1b      	ldr	r3, [r3, #32]
   d4d20:	9301      	str	r3, [sp, #4]
   d4d22:	bd08      	pop	{r3, pc}
   d4d24:	00030244 	.word	0x00030244

000d4d28 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4d28:	b508      	push	{r3, lr}
   d4d2a:	4b02      	ldr	r3, [pc, #8]	; (d4d34 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4d2c:	681b      	ldr	r3, [r3, #0]
   d4d2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4d30:	9301      	str	r3, [sp, #4]
   d4d32:	bd08      	pop	{r3, pc}
   d4d34:	00030244 	.word	0x00030244

000d4d38 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4d38:	b508      	push	{r3, lr}
   d4d3a:	4b02      	ldr	r3, [pc, #8]	; (d4d44 <network_connect+0xc>)
   d4d3c:	681b      	ldr	r3, [r3, #0]
   d4d3e:	685b      	ldr	r3, [r3, #4]
   d4d40:	9301      	str	r3, [sp, #4]
   d4d42:	bd08      	pop	{r3, pc}
   d4d44:	00030240 	.word	0x00030240

000d4d48 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4d48:	b508      	push	{r3, lr}
   d4d4a:	4b02      	ldr	r3, [pc, #8]	; (d4d54 <network_connecting+0xc>)
   d4d4c:	681b      	ldr	r3, [r3, #0]
   d4d4e:	689b      	ldr	r3, [r3, #8]
   d4d50:	9301      	str	r3, [sp, #4]
   d4d52:	bd08      	pop	{r3, pc}
   d4d54:	00030240 	.word	0x00030240

000d4d58 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4d58:	b508      	push	{r3, lr}
   d4d5a:	4b02      	ldr	r3, [pc, #8]	; (d4d64 <network_disconnect+0xc>)
   d4d5c:	681b      	ldr	r3, [r3, #0]
   d4d5e:	68db      	ldr	r3, [r3, #12]
   d4d60:	9301      	str	r3, [sp, #4]
   d4d62:	bd08      	pop	{r3, pc}
   d4d64:	00030240 	.word	0x00030240

000d4d68 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4d68:	b508      	push	{r3, lr}
   d4d6a:	4b02      	ldr	r3, [pc, #8]	; (d4d74 <network_ready+0xc>)
   d4d6c:	681b      	ldr	r3, [r3, #0]
   d4d6e:	691b      	ldr	r3, [r3, #16]
   d4d70:	9301      	str	r3, [sp, #4]
   d4d72:	bd08      	pop	{r3, pc}
   d4d74:	00030240 	.word	0x00030240

000d4d78 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4d78:	b508      	push	{r3, lr}
   d4d7a:	4b02      	ldr	r3, [pc, #8]	; (d4d84 <network_on+0xc>)
   d4d7c:	681b      	ldr	r3, [r3, #0]
   d4d7e:	695b      	ldr	r3, [r3, #20]
   d4d80:	9301      	str	r3, [sp, #4]
   d4d82:	bd08      	pop	{r3, pc}
   d4d84:	00030240 	.word	0x00030240

000d4d88 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4d88:	b508      	push	{r3, lr}
   d4d8a:	4b02      	ldr	r3, [pc, #8]	; (d4d94 <network_off+0xc>)
   d4d8c:	681b      	ldr	r3, [r3, #0]
   d4d8e:	699b      	ldr	r3, [r3, #24]
   d4d90:	9301      	str	r3, [sp, #4]
   d4d92:	bd08      	pop	{r3, pc}
   d4d94:	00030240 	.word	0x00030240

000d4d98 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4d98:	b508      	push	{r3, lr}
   d4d9a:	4b02      	ldr	r3, [pc, #8]	; (d4da4 <network_listen+0xc>)
   d4d9c:	681b      	ldr	r3, [r3, #0]
   d4d9e:	69db      	ldr	r3, [r3, #28]
   d4da0:	9301      	str	r3, [sp, #4]
   d4da2:	bd08      	pop	{r3, pc}
   d4da4:	00030240 	.word	0x00030240

000d4da8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4da8:	b508      	push	{r3, lr}
   d4daa:	4b02      	ldr	r3, [pc, #8]	; (d4db4 <network_listening+0xc>)
   d4dac:	681b      	ldr	r3, [r3, #0]
   d4dae:	6a1b      	ldr	r3, [r3, #32]
   d4db0:	9301      	str	r3, [sp, #4]
   d4db2:	bd08      	pop	{r3, pc}
   d4db4:	00030240 	.word	0x00030240

000d4db8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4db8:	b508      	push	{r3, lr}
   d4dba:	4b02      	ldr	r3, [pc, #8]	; (d4dc4 <network_set_listen_timeout+0xc>)
   d4dbc:	681b      	ldr	r3, [r3, #0]
   d4dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4dc0:	9301      	str	r3, [sp, #4]
   d4dc2:	bd08      	pop	{r3, pc}
   d4dc4:	00030240 	.word	0x00030240

000d4dc8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4dc8:	b508      	push	{r3, lr}
   d4dca:	4b02      	ldr	r3, [pc, #8]	; (d4dd4 <network_get_listen_timeout+0xc>)
   d4dcc:	681b      	ldr	r3, [r3, #0]
   d4dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4dd0:	9301      	str	r3, [sp, #4]
   d4dd2:	bd08      	pop	{r3, pc}
   d4dd4:	00030240 	.word	0x00030240

000d4dd8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4dd8:	b508      	push	{r3, lr}
   d4dda:	4b02      	ldr	r3, [pc, #8]	; (d4de4 <malloc+0xc>)
   d4ddc:	681b      	ldr	r3, [r3, #0]
   d4dde:	681b      	ldr	r3, [r3, #0]
   d4de0:	9301      	str	r3, [sp, #4]
   d4de2:	bd08      	pop	{r3, pc}
   d4de4:	0003021c 	.word	0x0003021c

000d4de8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4de8:	b508      	push	{r3, lr}
   d4dea:	4b02      	ldr	r3, [pc, #8]	; (d4df4 <free+0xc>)
   d4dec:	681b      	ldr	r3, [r3, #0]
   d4dee:	685b      	ldr	r3, [r3, #4]
   d4df0:	9301      	str	r3, [sp, #4]
   d4df2:	bd08      	pop	{r3, pc}
   d4df4:	0003021c 	.word	0x0003021c

000d4df8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d4df8:	b508      	push	{r3, lr}
   d4dfa:	4b02      	ldr	r3, [pc, #8]	; (d4e04 <realloc+0xc>)
   d4dfc:	681b      	ldr	r3, [r3, #0]
   d4dfe:	689b      	ldr	r3, [r3, #8]
   d4e00:	9301      	str	r3, [sp, #4]
   d4e02:	bd08      	pop	{r3, pc}
   d4e04:	0003021c 	.word	0x0003021c

000d4e08 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4e08:	b508      	push	{r3, lr}
   d4e0a:	4b02      	ldr	r3, [pc, #8]	; (d4e14 <vsnprintf+0xc>)
   d4e0c:	681b      	ldr	r3, [r3, #0]
   d4e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4e10:	9301      	str	r3, [sp, #4]
   d4e12:	bd08      	pop	{r3, pc}
   d4e14:	0003021c 	.word	0x0003021c

000d4e18 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d4e18:	b508      	push	{r3, lr}
   d4e1a:	4b02      	ldr	r3, [pc, #8]	; (d4e24 <abort+0xc>)
   d4e1c:	681b      	ldr	r3, [r3, #0]
   d4e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4e20:	9301      	str	r3, [sp, #4]
   d4e22:	bd08      	pop	{r3, pc}
   d4e24:	0003021c 	.word	0x0003021c

000d4e28 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d4e28:	b508      	push	{r3, lr}
   d4e2a:	4b02      	ldr	r3, [pc, #8]	; (d4e34 <_malloc_r+0xc>)
   d4e2c:	681b      	ldr	r3, [r3, #0]
   d4e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4e30:	9301      	str	r3, [sp, #4]
   d4e32:	bd08      	pop	{r3, pc}
   d4e34:	0003021c 	.word	0x0003021c

000d4e38 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4e38:	b508      	push	{r3, lr}
   d4e3a:	4b02      	ldr	r3, [pc, #8]	; (d4e44 <newlib_impure_ptr_callback+0xc>)
   d4e3c:	681b      	ldr	r3, [r3, #0]
   d4e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4e40:	9301      	str	r3, [sp, #4]
   d4e42:	bd08      	pop	{r3, pc}
   d4e44:	0003021c 	.word	0x0003021c

000d4e48 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4e48:	2100      	movs	r1, #0
   d4e4a:	f7ff bf31 	b.w	d4cb0 <system_delay_ms>

000d4e4e <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d4e4e:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4e50:	6883      	ldr	r3, [r0, #8]
   d4e52:	4604      	mov	r4, r0
   d4e54:	b90b      	cbnz	r3, d4e5a <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d4e56:	f003 fee4 	bl	d8c22 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4e5a:	68c3      	ldr	r3, [r0, #12]
   d4e5c:	4798      	blx	r3
      if (_M_manager)
   d4e5e:	68a3      	ldr	r3, [r4, #8]
   d4e60:	b11b      	cbz	r3, d4e6a <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4e62:	2203      	movs	r2, #3
   d4e64:	4621      	mov	r1, r4
   d4e66:	4620      	mov	r0, r4
   d4e68:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d4e6a:	4620      	mov	r0, r4
   d4e6c:	2110      	movs	r1, #16
}
   d4e6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d4e72:	f003 bed2 	b.w	d8c1a <_ZdlPvj>

000d4e76 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d4e76:	4770      	bx	lr

000d4e78 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   d4e78:	4770      	bx	lr

000d4e7a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   d4e7a:	4770      	bx	lr

000d4e7c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d4e7c:	4770      	bx	lr
	...

000d4e80 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d4e80:	4b06      	ldr	r3, [pc, #24]	; (d4e9c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d4e82:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d4e84:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d4e86:	f100 040c 	add.w	r4, r0, #12
	    ||
   d4e8a:	d005      	beq.n	d4e98 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d4e8c:	4608      	mov	r0, r1
   d4e8e:	f003 fecb 	bl	d8c28 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d4e92:	2800      	cmp	r0, #0
	return nullptr;
   d4e94:	bf08      	it	eq
   d4e96:	2400      	moveq	r4, #0
      }
   d4e98:	4620      	mov	r0, r4
   d4e9a:	bd10      	pop	{r4, pc}
   d4e9c:	000d952c 	.word	0x000d952c

000d4ea0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d4ea0:	4b06      	ldr	r3, [pc, #24]	; (d4ebc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d4ea2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d4ea4:	b510      	push	{r4, lr}
   d4ea6:	f100 040c 	add.w	r4, r0, #12
	    ||
   d4eaa:	d005      	beq.n	d4eb8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d4eac:	4608      	mov	r0, r1
   d4eae:	f003 febb 	bl	d8c28 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d4eb2:	2800      	cmp	r0, #0
	return nullptr;
   d4eb4:	bf08      	it	eq
   d4eb6:	2400      	moveq	r4, #0
      }
   d4eb8:	4620      	mov	r0, r4
   d4eba:	bd10      	pop	{r4, pc}
   d4ebc:	000d952c 	.word	0x000d952c

000d4ec0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d4ec0:	4b06      	ldr	r3, [pc, #24]	; (d4edc <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d4ec2:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d4ec4:	b510      	push	{r4, lr}
   d4ec6:	f100 040c 	add.w	r4, r0, #12
	    ||
   d4eca:	d005      	beq.n	d4ed8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d4ecc:	4608      	mov	r0, r1
   d4ece:	f003 feab 	bl	d8c28 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d4ed2:	2800      	cmp	r0, #0
	return nullptr;
   d4ed4:	bf08      	it	eq
   d4ed6:	2400      	moveq	r4, #0
      }
   d4ed8:	4620      	mov	r0, r4
   d4eda:	bd10      	pop	{r4, pc}
   d4edc:	000d952c 	.word	0x000d952c

000d4ee0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
            : BleCharacteristicImpl(desc, properties, callback, context) {
        charUuid_ = charUuid;
        svcUuid_ = svcUuid;
    }

    ~BleCharacteristicImpl() = default;
   d4ee0:	3048      	adds	r0, #72	; 0x48
   d4ee2:	f003 bb6f 	b.w	d85c4 <_ZN6StringD1Ev>

000d4ee6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d4ee6:	b510      	push	{r4, lr}
   d4ee8:	2160      	movs	r1, #96	; 0x60
   d4eea:	4604      	mov	r4, r0
   d4eec:	f003 fe95 	bl	d8c1a <_ZdlPvj>
   d4ef0:	4620      	mov	r0, r4
   d4ef2:	bd10      	pop	{r4, pc}

000d4ef4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   d4ef4:	b510      	push	{r4, lr}
   d4ef6:	2124      	movs	r1, #36	; 0x24
   d4ef8:	4604      	mov	r4, r0
   d4efa:	f003 fe8e 	bl	d8c1a <_ZdlPvj>
   d4efe:	4620      	mov	r0, r4
   d4f00:	bd10      	pop	{r4, pc}

000d4f02 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   d4f02:	b510      	push	{r4, lr}
   d4f04:	2130      	movs	r1, #48	; 0x30
   d4f06:	4604      	mov	r4, r0
   d4f08:	f003 fe87 	bl	d8c1a <_ZdlPvj>
   d4f0c:	4620      	mov	r0, r4
   d4f0e:	bd10      	pop	{r4, pc}

000d4f10 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d4f10:	f7ff b8c1 	b.w	d4096 <_ZdlPv>

000d4f14 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   d4f14:	f7ff b8bf 	b.w	d4096 <_ZdlPv>

000d4f18 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   d4f18:	f7ff b8bd 	b.w	d4096 <_ZdlPv>

000d4f1c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4f1c:	b510      	push	{r4, lr}
          _M_dispose();
   d4f1e:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4f20:	4604      	mov	r4, r0
          _M_dispose();
   d4f22:	689b      	ldr	r3, [r3, #8]
   d4f24:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4f26:	68a3      	ldr	r3, [r4, #8]
   d4f28:	3b01      	subs	r3, #1
   d4f2a:	60a3      	str	r3, [r4, #8]
   d4f2c:	b92b      	cbnz	r3, d4f3a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d4f2e:	6823      	ldr	r3, [r4, #0]
   d4f30:	4620      	mov	r0, r4
   d4f32:	68db      	ldr	r3, [r3, #12]
    }
   d4f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d4f38:	4718      	bx	r3
    }
   d4f3a:	bd10      	pop	{r4, pc}

000d4f3c <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4f3c:	b510      	push	{r4, lr}
   d4f3e:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4f40:	6800      	ldr	r0, [r0, #0]
   d4f42:	b108      	cbz	r0, d4f48 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4f44:	f7ff fdb4 	bl	d4ab0 <os_mutex_recursive_destroy>
    }
   d4f48:	4620      	mov	r0, r4
   d4f4a:	bd10      	pop	{r4, pc}

000d4f4c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d4f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d4f4e:	2500      	movs	r5, #0
   d4f50:	1cec      	adds	r4, r5, #3
   d4f52:	428c      	cmp	r4, r1
   d4f54:	d80d      	bhi.n	d4f72 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        if (buf[i + 1] == adsType) {
   d4f56:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   d4f58:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   d4f5a:	5d87      	ldrb	r7, [r0, r6]
   d4f5c:	4297      	cmp	r7, r2
   d4f5e:	d105      	bne.n	d4f6c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            if ((i + adsLen + 1) <= len) {
   d4f60:	4426      	add	r6, r4
   d4f62:	42b1      	cmp	r1, r6
   d4f64:	d305      	bcc.n	d4f72 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   d4f66:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   d4f68:	1c60      	adds	r0, r4, #1
}
   d4f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   d4f6c:	3401      	adds	r4, #1
   d4f6e:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d4f70:	e7ee      	b.n	d4f50 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   d4f72:	2000      	movs	r0, #0
   d4f74:	e7f9      	b.n	d4f6a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>
	...

000d4f78 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>:
        CHECK(discoverAllServices(peer));
        CHECK(discoverAllCharacteristics(peer));
        return SYSTEM_ERROR_NONE;
    }

    int discoverAllServices(BlePeerDevice& peer) {
   d4f78:	b510      	push	{r4, lr}
        LOG(TRACE, "Start discovering services.");
   d4f7a:	2300      	movs	r3, #0
    int discoverAllServices(BlePeerDevice& peer) {
   d4f7c:	b08a      	sub	sp, #40	; 0x28
        LOG(TRACE, "Start discovering services.");
   d4f7e:	2220      	movs	r2, #32
   d4f80:	e9cd 2302 	strd	r2, r3, [sp, #8]
    int discoverAllServices(BlePeerDevice& peer) {
   d4f84:	4604      	mov	r4, r0
        LOG(TRACE, "Start discovering services.");
   d4f86:	4a08      	ldr	r2, [pc, #32]	; (d4fa8 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x30>)
   d4f88:	9200      	str	r2, [sp, #0]
   d4f8a:	4908      	ldr	r1, [pc, #32]	; (d4fac <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x34>)
   d4f8c:	aa02      	add	r2, sp, #8
   d4f8e:	2001      	movs	r0, #1
   d4f90:	f7ff fe66 	bl	d4c60 <log_message>
        return hal_ble_gatt_client_discover_all_services(peer.impl()->connHandle(), onServicesDiscovered, &peer, nullptr);
   d4f94:	6820      	ldr	r0, [r4, #0]
   d4f96:	4906      	ldr	r1, [pc, #24]	; (d4fb0 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0+0x38>)
   d4f98:	8800      	ldrh	r0, [r0, #0]
   d4f9a:	2300      	movs	r3, #0
   d4f9c:	4622      	mov	r2, r4
   d4f9e:	f7ff fd11 	bl	d49c4 <hal_ble_gatt_client_discover_all_services>
    }
   d4fa2:	b00a      	add	sp, #40	; 0x28
   d4fa4:	bd10      	pop	{r4, pc}
   d4fa6:	bf00      	nop
   d4fa8:	000d9343 	.word	0x000d9343
   d4fac:	000d9338 	.word	0x000d9338
   d4fb0:	000d62e1 	.word	0x000d62e1

000d4fb4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
        SPARK_ASSERT(false);
   d4fb4:	4a02      	ldr	r2, [pc, #8]	; (d4fc0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   d4fb6:	2100      	movs	r1, #0
   d4fb8:	200a      	movs	r0, #10
   d4fba:	f7ff be49 	b.w	d4c50 <panic_>
   d4fbe:	bf00      	nop
   d4fc0:	000d4af1 	.word	0x000d4af1

000d4fc4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>:
      operator=(const __shared_count& __r) noexcept
   d4fc4:	b538      	push	{r3, r4, r5, lr}
	if (__tmp != _M_pi)
   d4fc6:	6803      	ldr	r3, [r0, #0]
   d4fc8:	428b      	cmp	r3, r1
      operator=(const __shared_count& __r) noexcept
   d4fca:	4605      	mov	r5, r0
   d4fcc:	460c      	mov	r4, r1
	if (__tmp != _M_pi)
   d4fce:	d00c      	beq.n	d4fea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x26>
	    if (__tmp != 0)
   d4fd0:	b111      	cbz	r1, d4fd8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x14>
    { ++_M_use_count; }
   d4fd2:	684b      	ldr	r3, [r1, #4]
   d4fd4:	3301      	adds	r3, #1
   d4fd6:	604b      	str	r3, [r1, #4]
	    if (_M_pi != 0)
   d4fd8:	6828      	ldr	r0, [r5, #0]
   d4fda:	b128      	cbz	r0, d4fe8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x24>
      if (--_M_use_count == 0)
   d4fdc:	6843      	ldr	r3, [r0, #4]
   d4fde:	3b01      	subs	r3, #1
   d4fe0:	6043      	str	r3, [r0, #4]
   d4fe2:	b90b      	cbnz	r3, d4fe8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0+0x24>
   d4fe4:	f7ff ff9a 	bl	d4f1c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d4fe8:	602c      	str	r4, [r5, #0]
      }
   d4fea:	4628      	mov	r0, r5
   d4fec:	bd38      	pop	{r3, r4, r5, pc}

000d4fee <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d4fee:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d4ff2:	b2da      	uxtb	r2, r3
   d4ff4:	2a09      	cmp	r2, #9
   d4ff6:	d801      	bhi.n	d4ffc <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d4ff8:	4618      	mov	r0, r3
   d4ffa:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d4ffc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d5000:	2b05      	cmp	r3, #5
   d5002:	d801      	bhi.n	d5008 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d5004:	3857      	subs	r0, #87	; 0x57
   d5006:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d5008:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d500c:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d500e:	bf94      	ite	ls
   d5010:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d5012:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   d5016:	4770      	bx	lr

000d5018 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   d5018:	b510      	push	{r4, lr}
            locked_(false) {
   d501a:	2300      	movs	r3, #0
   d501c:	7003      	strb	r3, [r0, #0]
        mutex_.lock();
   d501e:	4b04      	ldr	r3, [pc, #16]	; (d5030 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   d5020:	4604      	mov	r4, r0
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d5022:	6818      	ldr	r0, [r3, #0]
   d5024:	f7ff fd4c 	bl	d4ac0 <os_mutex_recursive_lock>
        locked_ = true;
   d5028:	2301      	movs	r3, #1
   d502a:	7023      	strb	r3, [r4, #0]
    }
   d502c:	4620      	mov	r0, r4
   d502e:	bd10      	pop	{r4, pc}
   d5030:	2003e630 	.word	0x2003e630

000d5034 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   d5034:	b510      	push	{r4, lr}
        if (locked_) {
   d5036:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   d5038:	4604      	mov	r4, r0
        if (locked_) {
   d503a:	b11b      	cbz	r3, d5044 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
        mutex_.unlock();
   d503c:	4b02      	ldr	r3, [pc, #8]	; (d5048 <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d503e:	6818      	ldr	r0, [r3, #0]
   d5040:	f7ff fd46 	bl	d4ad0 <os_mutex_recursive_unlock>
    }
   d5044:	4620      	mov	r0, r4
   d5046:	bd10      	pop	{r4, pc}
   d5048:	2003e630 	.word	0x2003e630

000d504c <_ZN8particle10BleAddressC1Ev>:
        : address_{} {
   d504c:	2200      	movs	r2, #0
   d504e:	6042      	str	r2, [r0, #4]
   d5050:	6002      	str	r2, [r0, #0]
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   d5052:	7182      	strb	r2, [r0, #6]
}
   d5054:	4770      	bx	lr

000d5056 <_ZNK8particle10BleAddressixEh>:
    if (i >= BLE_SIG_ADDR_LEN) {
   d5056:	2905      	cmp	r1, #5
    return address_.addr[i];
   d5058:	bf94      	ite	ls
   d505a:	5c40      	ldrbls	r0, [r0, r1]
        return 0;
   d505c:	2000      	movhi	r0, #0
}
   d505e:	4770      	bx	lr

000d5060 <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   d5060:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d5062:	7982      	ldrb	r2, [r0, #6]
   d5064:	798b      	ldrb	r3, [r1, #6]
   d5066:	429a      	cmp	r2, r3
   d5068:	d106      	bne.n	d5078 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d506a:	2206      	movs	r2, #6
   d506c:	f003 fefc 	bl	d8e68 <memcmp>
   d5070:	fab0 f080 	clz	r0, r0
   d5074:	0940      	lsrs	r0, r0, #5
}
   d5076:	bd08      	pop	{r3, pc}
    return false;
   d5078:	2000      	movs	r0, #0
   d507a:	e7fc      	b.n	d5076 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000d507c <_ZN8particle7BleUuidC1Ev>:
        : type_(BleUuidType::LONG) {
   d507c:	2201      	movs	r2, #1
   d507e:	6102      	str	r2, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d5080:	4a06      	ldr	r2, [pc, #24]	; (d509c <_ZN8particle7BleUuidC1Ev+0x20>)
   d5082:	6811      	ldr	r1, [r2, #0]
   d5084:	6001      	str	r1, [r0, #0]
   d5086:	6851      	ldr	r1, [r2, #4]
   d5088:	6041      	str	r1, [r0, #4]
   d508a:	8911      	ldrh	r1, [r2, #8]
   d508c:	7a92      	ldrb	r2, [r2, #10]
   d508e:	7282      	strb	r2, [r0, #10]
   d5090:	2200      	movs	r2, #0
   d5092:	8101      	strh	r1, [r0, #8]
   d5094:	f8c0 200b 	str.w	r2, [r0, #11]
   d5098:	73c2      	strb	r2, [r0, #15]
}
   d509a:	4770      	bx	lr
   d509c:	000d9534 	.word	0x000d9534

000d50a0 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>:
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   d50a0:	7c0b      	ldrb	r3, [r1, #16]
   d50a2:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
BleUuid::BleUuid(const hal_ble_uuid_t& uuid) {
   d50a6:	b510      	push	{r4, lr}
    if (uuid.type == BLE_UUID_TYPE_16BIT || uuid.type == BLE_UUID_TYPE_128BIT_SHORTED) {
   d50a8:	d10f      	bne.n	d50ca <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x2a>
        memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d50aa:	4a0e      	ldr	r2, [pc, #56]	; (d50e4 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x44>)
   d50ac:	f8c0 300b 	str.w	r3, [r0, #11]
   d50b0:	6814      	ldr	r4, [r2, #0]
   d50b2:	6004      	str	r4, [r0, #0]
   d50b4:	6854      	ldr	r4, [r2, #4]
   d50b6:	6044      	str	r4, [r0, #4]
   d50b8:	8914      	ldrh	r4, [r2, #8]
   d50ba:	7a92      	ldrb	r2, [r2, #10]
        type_ = BleUuidType::SHORT;
   d50bc:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d50be:	8104      	strh	r4, [r0, #8]
   d50c0:	7282      	strb	r2, [r0, #10]
   d50c2:	73c3      	strb	r3, [r0, #15]
        uuid128_[UUID16_LO] = (uint8_t)uuid.uuid16;
   d50c4:	880b      	ldrh	r3, [r1, #0]
   d50c6:	8183      	strh	r3, [r0, #12]
}
   d50c8:	bd10      	pop	{r4, pc}
        type_ = BleUuidType::LONG;
   d50ca:	2301      	movs	r3, #1
   d50cc:	6103      	str	r3, [r0, #16]
        memcpy(uuid128_, uuid.uuid128, BLE_SIG_UUID_128BIT_LEN);
   d50ce:	f101 0210 	add.w	r2, r1, #16
   d50d2:	4603      	mov	r3, r0
   d50d4:	f851 4b04 	ldr.w	r4, [r1], #4
   d50d8:	f843 4b04 	str.w	r4, [r3], #4
   d50dc:	4291      	cmp	r1, r2
   d50de:	d1f9      	bne.n	d50d4 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x34>
   d50e0:	e7f2      	b.n	d50c8 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t+0x28>
   d50e2:	bf00      	nop
   d50e4:	000d9534 	.word	0x000d9534

000d50e8 <_ZN8particle7BleUuidC1ERKS0_>:
BleUuid::BleUuid(const BleUuid& uuid)
   d50e8:	b510      	push	{r4, lr}
        : type_(uuid.type_) {
   d50ea:	690b      	ldr	r3, [r1, #16]
   d50ec:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d50ee:	f101 0210 	add.w	r2, r1, #16
   d50f2:	4603      	mov	r3, r0
   d50f4:	f851 4b04 	ldr.w	r4, [r1], #4
   d50f8:	f843 4b04 	str.w	r4, [r3], #4
   d50fc:	4291      	cmp	r1, r2
   d50fe:	d1f9      	bne.n	d50f4 <_ZN8particle7BleUuidC1ERKS0_+0xc>
}
   d5100:	bd10      	pop	{r4, pc}

000d5102 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d5102:	b510      	push	{r4, lr}
    if (uuid128) {
   d5104:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d5106:	4604      	mov	r4, r0
    if (uuid128) {
   d5108:	b1b1      	cbz	r1, d5138 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   d510a:	2a01      	cmp	r2, #1
   d510c:	f101 0210 	add.w	r2, r1, #16
   d5110:	d10a      	bne.n	d5128 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d5112:	4601      	mov	r1, r0
   d5114:	f853 0b04 	ldr.w	r0, [r3], #4
   d5118:	f841 0b04 	str.w	r0, [r1], #4
   d511c:	4293      	cmp	r3, r2
   d511e:	d1f9      	bne.n	d5114 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   d5120:	2301      	movs	r3, #1
   d5122:	6123      	str	r3, [r4, #16]
}
   d5124:	4620      	mov	r0, r4
   d5126:	bd10      	pop	{r4, pc}
   d5128:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   d512a:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   d512e:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d5132:	429a      	cmp	r2, r3
   d5134:	d1f9      	bne.n	d512a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   d5136:	e7f3      	b.n	d5120 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d5138:	2210      	movs	r2, #16
   d513a:	f003 fecb 	bl	d8ed4 <memset>
   d513e:	e7f1      	b.n	d5124 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000d5140 <_ZN8particle7BleUuidC1Et>:
BleUuid::BleUuid(uint16_t uuid16)
   d5140:	b510      	push	{r4, lr}
   d5142:	4603      	mov	r3, r0
   d5144:	460c      	mov	r4, r1
        : BleUuid() {
   d5146:	f7ff ff99 	bl	d507c <_ZN8particle7BleUuidC1Ev>
    type_ = BleUuidType::SHORT;
   d514a:	2200      	movs	r2, #0
   d514c:	611a      	str	r2, [r3, #16]
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   d514e:	819c      	strh	r4, [r3, #12]
}
   d5150:	4618      	mov	r0, r3
   d5152:	bd10      	pop	{r4, pc}

000d5154 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   d5154:	b538      	push	{r3, r4, r5, lr}
   d5156:	4604      	mov	r4, r0
   d5158:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   d515a:	461a      	mov	r2, r3
   d515c:	f7ff ffd1 	bl	d5102 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   d5160:	81a5      	strh	r5, [r4, #12]
}
   d5162:	4620      	mov	r0, r4
   d5164:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5168 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   d5168:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   d516a:	6902      	ldr	r2, [r0, #16]
   d516c:	b922      	cbnz	r2, d5178 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   d516e:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d5170:	3800      	subs	r0, #0
   d5172:	bf18      	it	ne
   d5174:	2001      	movne	r0, #1
}
   d5176:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d5178:	4902      	ldr	r1, [pc, #8]	; (d5184 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   d517a:	2210      	movs	r2, #16
   d517c:	f003 fe74 	bl	d8e68 <memcmp>
   d5180:	e7f6      	b.n	d5170 <_ZNK8particle7BleUuid7isValidEv+0x8>
   d5182:	bf00      	nop
   d5184:	000d9554 	.word	0x000d9554

000d5188 <_ZNK8particle7BleUuid4typeEv>:
}
   d5188:	6900      	ldr	r0, [r0, #16]
   d518a:	4770      	bx	lr

000d518c <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   d518c:	b538      	push	{r3, r4, r5, lr}
   d518e:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   d5190:	2214      	movs	r2, #20
   d5192:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   d5194:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   d5196:	f003 fe9d 	bl	d8ed4 <memset>
    if (type_ == BleUuidType::SHORT) {
   d519a:	6923      	ldr	r3, [r4, #16]
   d519c:	b93b      	cbnz	r3, d51ae <_ZN8particle7BleUuid7halUUIDEv+0x22>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d519e:	7b62      	ldrb	r2, [r4, #13]
        uuid.type = BLE_UUID_TYPE_16BIT;
   d51a0:	742b      	strb	r3, [r5, #16]
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d51a2:	7b23      	ldrb	r3, [r4, #12]
   d51a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d51a8:	802b      	strh	r3, [r5, #0]
}
   d51aa:	4628      	mov	r0, r5
   d51ac:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   d51ae:	2301      	movs	r3, #1
   d51b0:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d51b2:	f104 0210 	add.w	r2, r4, #16
   d51b6:	462b      	mov	r3, r5
   d51b8:	f854 1b04 	ldr.w	r1, [r4], #4
   d51bc:	f843 1b04 	str.w	r1, [r3], #4
   d51c0:	4294      	cmp	r4, r2
   d51c2:	d1f9      	bne.n	d51b8 <_ZN8particle7BleUuid7halUUIDEv+0x2c>
   d51c4:	e7f1      	b.n	d51aa <_ZN8particle7BleUuid7halUUIDEv+0x1e>

000d51c6 <_ZNK8particle7BleUuid7shortedEv>:
    return ((uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8));
   d51c6:	7b42      	ldrb	r2, [r0, #13]
   d51c8:	7b00      	ldrb	r0, [r0, #12]
}
   d51ca:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   d51ce:	4770      	bx	lr

000d51d0 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   d51d0:	4770      	bx	lr

000d51d2 <_ZN8particle7BleUuidaSERKS0_>:
BleUuid& BleUuid::operator=(const BleUuid& uuid) {
   d51d2:	b510      	push	{r4, lr}
    type_ = uuid.type_;
   d51d4:	690b      	ldr	r3, [r1, #16]
   d51d6:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d51d8:	f101 0210 	add.w	r2, r1, #16
   d51dc:	4603      	mov	r3, r0
   d51de:	f851 4b04 	ldr.w	r4, [r1], #4
   d51e2:	f843 4b04 	str.w	r4, [r3], #4
   d51e6:	4291      	cmp	r1, r2
   d51e8:	d1f9      	bne.n	d51de <_ZN8particle7BleUuidaSERKS0_+0xc>
}
   d51ea:	bd10      	pop	{r4, pc}

000d51ec <_ZN8particle7BleUuidaSEPKh>:
BleUuid& BleUuid::operator=(const uint8_t* uuid128) {
   d51ec:	b510      	push	{r4, lr}
   d51ee:	b086      	sub	sp, #24
   d51f0:	4604      	mov	r4, r0
    return *this = BleUuid(uuid128);
   d51f2:	2201      	movs	r2, #1
   d51f4:	a801      	add	r0, sp, #4
   d51f6:	f7ff ff84 	bl	d5102 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   d51fa:	a901      	add	r1, sp, #4
   d51fc:	4620      	mov	r0, r4
   d51fe:	f7ff ffe8 	bl	d51d2 <_ZN8particle7BleUuidaSERKS0_>
}
   d5202:	b006      	add	sp, #24
   d5204:	bd10      	pop	{r4, pc}

000d5206 <_ZN8particle7BleUuidaSEt>:
BleUuid& BleUuid::operator=(uint16_t uuid16) {
   d5206:	b510      	push	{r4, lr}
   d5208:	b086      	sub	sp, #24
   d520a:	4604      	mov	r4, r0
    return *this = BleUuid(uuid16);
   d520c:	a801      	add	r0, sp, #4
   d520e:	f7ff ff97 	bl	d5140 <_ZN8particle7BleUuidC1Et>
   d5212:	a901      	add	r1, sp, #4
   d5214:	4620      	mov	r0, r4
   d5216:	f7ff ffdc 	bl	d51d2 <_ZN8particle7BleUuidaSERKS0_>
}
   d521a:	b006      	add	sp, #24
   d521c:	bd10      	pop	{r4, pc}

000d521e <_ZN8particle7BleUuidaSERK14hal_ble_uuid_t>:
BleUuid& BleUuid::operator=(const hal_ble_uuid_t& uuid) {
   d521e:	b510      	push	{r4, lr}
   d5220:	b086      	sub	sp, #24
   d5222:	4604      	mov	r4, r0
    return *this = BleUuid(uuid);
   d5224:	a801      	add	r0, sp, #4
   d5226:	f7ff ff3b 	bl	d50a0 <_ZN8particle7BleUuidC1ERK14hal_ble_uuid_t>
   d522a:	a901      	add	r1, sp, #4
   d522c:	4620      	mov	r0, r4
   d522e:	f7ff ffd0 	bl	d51d2 <_ZN8particle7BleUuidaSERKS0_>
}
   d5232:	b006      	add	sp, #24
   d5234:	bd10      	pop	{r4, pc}

000d5236 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   d5236:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d5238:	6902      	ldr	r2, [r0, #16]
   d523a:	690b      	ldr	r3, [r1, #16]
   d523c:	429a      	cmp	r2, r3
   d523e:	d106      	bne.n	d524e <_ZNK8particle7BleUuideqERKS0_+0x18>
   d5240:	2210      	movs	r2, #16
   d5242:	f003 fe11 	bl	d8e68 <memcmp>
   d5246:	fab0 f080 	clz	r0, r0
   d524a:	0940      	lsrs	r0, r0, #5
}
   d524c:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d524e:	2000      	movs	r0, #0
   d5250:	e7fc      	b.n	d524c <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000d5254 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   d5254:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   d5256:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   d525a:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d525c:	4b32      	ldr	r3, [pc, #200]	; (d5328 <_ZN8particle7BleUuid9constructEPKc+0xd4>)
   d525e:	681a      	ldr	r2, [r3, #0]
   d5260:	6002      	str	r2, [r0, #0]
   d5262:	685a      	ldr	r2, [r3, #4]
   d5264:	6042      	str	r2, [r0, #4]
   d5266:	2500      	movs	r5, #0
   d5268:	891a      	ldrh	r2, [r3, #8]
   d526a:	7a9b      	ldrb	r3, [r3, #10]
   d526c:	8102      	strh	r2, [r0, #8]
void BleUuid::construct(const char* uuid) {
   d526e:	4604      	mov	r4, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d5270:	7283      	strb	r3, [r0, #10]
   d5272:	f8c0 500b 	str.w	r5, [r0, #11]
   d5276:	73c5      	strb	r5, [r0, #15]
    if (uuid == nullptr) {
   d5278:	460e      	mov	r6, r1
   d527a:	b321      	cbz	r1, d52c6 <_ZN8particle7BleUuid9constructEPKc+0x72>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d527c:	2124      	movs	r1, #36	; 0x24
   d527e:	4630      	mov	r0, r6
   d5280:	f003 feb5 	bl	d8fee <strnlen>
   d5284:	2804      	cmp	r0, #4
   d5286:	d121      	bne.n	d52cc <_ZN8particle7BleUuid9constructEPKc+0x78>
        char buf[2] = {};
   d5288:	f8ad 5004 	strh.w	r5, [sp, #4]
   d528c:	af01      	add	r7, sp, #4
   d528e:	1cb5      	adds	r5, r6, #2
   d5290:	3606      	adds	r6, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d5292:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   d5296:	f7ff feaa 	bl	d4fee <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d529a:	f1b0 0800 	subs.w	r8, r0, #0
   d529e:	db10      	blt.n	d52c2 <_ZN8particle7BleUuid9constructEPKc+0x6e>
            break;
        }
        const int l = hexToNibble(*src++);
   d52a0:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   d52a4:	f7ff fea3 	bl	d4fee <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d52a8:	2800      	cmp	r0, #0
   d52aa:	db0a      	blt.n	d52c2 <_ZN8particle7BleUuid9constructEPKc+0x6e>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d52ac:	3502      	adds	r5, #2
   d52ae:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   d52b2:	42ae      	cmp	r6, r5
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d52b4:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   d52b8:	d1eb      	bne.n	d5292 <_ZN8particle7BleUuid9constructEPKc+0x3e>
            uuid128_[UUID16_LO] = buf[1];
   d52ba:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   d52be:	ba5b      	rev16	r3, r3
   d52c0:	81a3      	strh	r3, [r4, #12]
        type_ = BleUuidType::SHORT;
   d52c2:	2300      	movs	r3, #0
   d52c4:	6123      	str	r3, [r4, #16]
}
   d52c6:	b002      	add	sp, #8
   d52c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   d52cc:	2710      	movs	r7, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d52ce:	2124      	movs	r1, #36	; 0x24
   d52d0:	4630      	mov	r0, r6
   d52d2:	f003 fe8c 	bl	d8fee <strnlen>
   d52d6:	42a8      	cmp	r0, r5
   d52d8:	d806      	bhi.n	d52e8 <_ZN8particle7BleUuid9constructEPKc+0x94>
   d52da:	4427      	add	r7, r4
        uuid128_[len - 1] = 0x00;
   d52dc:	2300      	movs	r3, #0
    while (len > 0) {
   d52de:	42bc      	cmp	r4, r7
   d52e0:	d0f1      	beq.n	d52c6 <_ZN8particle7BleUuid9constructEPKc+0x72>
        uuid128_[len - 1] = 0x00;
   d52e2:	f807 3d01 	strb.w	r3, [r7, #-1]!
    while (len > 0) {
   d52e6:	e7fa      	b.n	d52de <_ZN8particle7BleUuid9constructEPKc+0x8a>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d52e8:	2f00      	cmp	r7, #0
   d52ea:	d0ec      	beq.n	d52c6 <_ZN8particle7BleUuid9constructEPKc+0x72>
        int8_t hi = hexToNibble(uuid[i]);
   d52ec:	5d70      	ldrb	r0, [r6, r5]
   d52ee:	f7ff fe7e 	bl	d4fee <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d52f2:	0603      	lsls	r3, r0, #24
   d52f4:	d415      	bmi.n	d5322 <_ZN8particle7BleUuid9constructEPKc+0xce>
            uuid128_[len - 1] = hi << 4;
   d52f6:	0100      	lsls	r0, r0, #4
   d52f8:	3f01      	subs	r7, #1
   d52fa:	fa5f f880 	uxtb.w	r8, r0
   d52fe:	f804 8007 	strb.w	r8, [r4, r7]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d5302:	2124      	movs	r1, #36	; 0x24
   d5304:	4630      	mov	r0, r6
   d5306:	f003 fe72 	bl	d8fee <strnlen>
   d530a:	3501      	adds	r5, #1
   d530c:	42a8      	cmp	r0, r5
   d530e:	d908      	bls.n	d5322 <_ZN8particle7BleUuid9constructEPKc+0xce>
                int8_t lo = hexToNibble(uuid[i]);
   d5310:	5d70      	ldrb	r0, [r6, r5]
   d5312:	f7ff fe6c 	bl	d4fee <_ZN8particle11hexToNibbleEc>
   d5316:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d5318:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   d531a:	bfa4      	itt	ge
   d531c:	ea40 0008 	orrge.w	r0, r0, r8
   d5320:	55e0      	strbge	r0, [r4, r7]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d5322:	3501      	adds	r5, #1
   d5324:	e7d3      	b.n	d52ce <_ZN8particle7BleUuid9constructEPKc+0x7a>
   d5326:	bf00      	nop
   d5328:	000d9534 	.word	0x000d9534

000d532c <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   d532c:	b513      	push	{r0, r1, r4, lr}
   d532e:	4604      	mov	r4, r0
   d5330:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   d5332:	f7ff fea3 	bl	d507c <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d5336:	4620      	mov	r0, r4
   d5338:	9901      	ldr	r1, [sp, #4]
   d533a:	f7ff ff8b 	bl	d5254 <_ZN8particle7BleUuid9constructEPKc>
}
   d533e:	4620      	mov	r0, r4
   d5340:	b002      	add	sp, #8
   d5342:	bd10      	pop	{r4, pc}

000d5344 <_ZN8particle18BleAdvertisingData3setEPKhj>:
size_t BleAdvertisingData::set(const uint8_t* buf, size_t len) {
   d5344:	b538      	push	{r3, r4, r5, lr}
   d5346:	4605      	mov	r5, r0
    if (buf == nullptr || len == 0) {
   d5348:	b101      	cbz	r1, d534c <_ZN8particle18BleAdvertisingData3setEPKhj+0x8>
   d534a:	b91a      	cbnz	r2, d5354 <_ZN8particle18BleAdvertisingData3setEPKhj+0x10>
        selfLen_ = 0;
   d534c:	2400      	movs	r4, #0
    selfLen_ = len;
   d534e:	622c      	str	r4, [r5, #32]
}
   d5350:	4620      	mov	r0, r4
   d5352:	bd38      	pop	{r3, r4, r5, pc}
    len = std::min(len, (size_t)BLE_MAX_ADV_DATA_LEN);
   d5354:	2a1f      	cmp	r2, #31
   d5356:	bf28      	it	cs
   d5358:	221f      	movcs	r2, #31
   d535a:	4614      	mov	r4, r2
    memcpy(selfData_, buf, len);
   d535c:	f003 fd92 	bl	d8e84 <memcpy>
   d5360:	e7f5      	b.n	d534e <_ZN8particle18BleAdvertisingData3setEPKhj+0xa>

000d5362 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d5362:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5366:	4689      	mov	r9, r1
   d5368:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
   d536c:	6a01      	ldr	r1, [r0, #32]
   d536e:	4604      	mov	r4, r0
   d5370:	461e      	mov	r6, r3
    if (buf == nullptr) {
   d5372:	4690      	mov	r8, r2
   d5374:	b332      	cbz	r2, d53c4 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x62>
    if (offset == nullptr) {
   d5376:	ab01      	add	r3, sp, #4
   d5378:	464a      	mov	r2, r9
   d537a:	f7ff fde7 	bl	d4f4c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (!force && adsLen > 0) {
   d537e:	6a25      	ldr	r5, [r4, #32]
   d5380:	1cb3      	adds	r3, r6, #2
   d5382:	bb1f      	cbnz	r7, d53cc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x6a>
   d5384:	b310      	cbz	r0, d53cc <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x6a>
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d5386:	18ef      	adds	r7, r5, r3
   d5388:	1a3f      	subs	r7, r7, r0
   d538a:	2f1f      	cmp	r7, #31
   d538c:	d819      	bhi.n	d53c2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x60>
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d538e:	f8dd 9004 	ldr.w	r9, [sp, #4]
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d5392:	f109 0a02 	add.w	sl, r9, #2
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d5396:	eba5 0209 	sub.w	r2, r5, r9
   d539a:	1a12      	subs	r2, r2, r0
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d539c:	eb00 0109 	add.w	r1, r0, r9
   d53a0:	eb06 000a 	add.w	r0, r6, sl
   d53a4:	b292      	uxth	r2, r2
   d53a6:	4421      	add	r1, r4
   d53a8:	4420      	add	r0, r4
   d53aa:	f003 fd79 	bl	d8ea0 <memmove>
            selfData_[offset] = len + 1;
   d53ae:	1c73      	adds	r3, r6, #1
   d53b0:	f804 3009 	strb.w	r3, [r4, r9]
            memcpy(&selfData_[offset + 2], buf, len);
   d53b4:	4632      	mov	r2, r6
   d53b6:	4641      	mov	r1, r8
   d53b8:	eb04 000a 	add.w	r0, r4, sl
   d53bc:	f003 fd62 	bl	d8e84 <memcpy>
            selfLen_ = staLen + len + 2;
   d53c0:	6227      	str	r7, [r4, #32]
    return selfLen_;
   d53c2:	6a21      	ldr	r1, [r4, #32]
}
   d53c4:	4608      	mov	r0, r1
   d53c6:	b002      	add	sp, #8
   d53c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d53cc:	442b      	add	r3, r5
   d53ce:	2b1f      	cmp	r3, #31
   d53d0:	d8f7      	bhi.n	d53c2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x60>
        selfData_[selfLen_++] = len + 1;
   d53d2:	1c73      	adds	r3, r6, #1
   d53d4:	5563      	strb	r3, [r4, r5]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d53d6:	1ca8      	adds	r0, r5, #2
   d53d8:	4425      	add	r5, r4
   d53da:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d53dc:	4632      	mov	r2, r6
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d53de:	f885 9001 	strb.w	r9, [r5, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d53e2:	4641      	mov	r1, r8
   d53e4:	4420      	add	r0, r4
   d53e6:	f003 fd4d 	bl	d8e84 <memcpy>
        selfLen_ += len;
   d53ea:	6a23      	ldr	r3, [r4, #32]
   d53ec:	4433      	add	r3, r6
   d53ee:	6223      	str	r3, [r4, #32]
   d53f0:	e7e7      	b.n	d53c2 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x60>

000d53f2 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   d53f2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d53f4:	4604      	mov	r4, r0
          selfLen_(0) {
   d53f6:	4602      	mov	r2, r0
   d53f8:	f100 011f 	add.w	r1, r0, #31
   d53fc:	2300      	movs	r3, #0
   d53fe:	f802 3b01 	strb.w	r3, [r2], #1
   d5402:	4291      	cmp	r1, r2
   d5404:	d1fb      	bne.n	d53fe <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
   d5406:	6223      	str	r3, [r4, #32]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d5408:	9300      	str	r3, [sp, #0]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d540a:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d540c:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d540e:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d5412:	4619      	mov	r1, r3
   d5414:	f10d 020f 	add.w	r2, sp, #15
   d5418:	4620      	mov	r0, r4
   d541a:	f7ff ffa2 	bl	d5362 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d541e:	4620      	mov	r0, r4
   d5420:	b004      	add	sp, #16
   d5422:	bd10      	pop	{r4, pc}

000d5424 <_ZN8particle18BleAdvertisingData15appendLocalNameEPKc>:
size_t BleAdvertisingData::appendLocalName(const char* name) {
   d5424:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d5426:	460a      	mov	r2, r1
   d5428:	4604      	mov	r4, r0
    return append(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, (const uint8_t*)name, strnlen(name, BLE_MAX_DEV_NAME_LEN), false);
   d542a:	2114      	movs	r1, #20
   d542c:	4610      	mov	r0, r2
   d542e:	9203      	str	r2, [sp, #12]
   d5430:	f003 fddd 	bl	d8fee <strnlen>
   d5434:	2100      	movs	r1, #0
   d5436:	4603      	mov	r3, r0
   d5438:	9100      	str	r1, [sp, #0]
   d543a:	9a03      	ldr	r2, [sp, #12]
   d543c:	2109      	movs	r1, #9
   d543e:	4620      	mov	r0, r4
   d5440:	f7ff ff8f 	bl	d5362 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d5444:	b004      	add	sp, #16
   d5446:	bd10      	pop	{r4, pc}

000d5448 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d5448:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (offset == nullptr) {
   d544a:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d544c:	460e      	mov	r6, r1
   d544e:	ab01      	add	r3, sp, #4
   d5450:	6a01      	ldr	r1, [r0, #32]
   d5452:	4604      	mov	r4, r0
   d5454:	f7ff fd7a 	bl	d4f4c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   d5458:	4605      	mov	r5, r0
   d545a:	b178      	cbz	r0, d547c <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d545c:	9801      	ldr	r0, [sp, #4]
   d545e:	6a22      	ldr	r2, [r4, #32]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d5460:	1941      	adds	r1, r0, r5
        size_t moveLen = selfLen_ - offset - len;
   d5462:	1a12      	subs	r2, r2, r0
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d5464:	4421      	add	r1, r4
   d5466:	1b52      	subs	r2, r2, r5
   d5468:	4420      	add	r0, r4
   d546a:	f003 fd0b 	bl	d8e84 <memcpy>
        selfLen_ -= len;
   d546e:	6a20      	ldr	r0, [r4, #32]
   d5470:	1b40      	subs	r0, r0, r5
   d5472:	6220      	str	r0, [r4, #32]
        remove(type);
   d5474:	4631      	mov	r1, r6
   d5476:	4620      	mov	r0, r4
   d5478:	f7ff ffe6 	bl	d5448 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   d547c:	b002      	add	sp, #8
   d547e:	bd70      	pop	{r4, r5, r6, pc}

000d5480 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>:
size_t BleAdvertisingData::get(BleAdvertisingDataType type, uint8_t* buf, size_t len) const {
   d5480:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5482:	4615      	mov	r5, r2
   d5484:	461f      	mov	r7, r3
   d5486:	460a      	mov	r2, r1
   d5488:	ab01      	add	r3, sp, #4
   d548a:	6a01      	ldr	r1, [r0, #32]
   d548c:	4606      	mov	r6, r0
   d548e:	f7ff fd5d 	bl	d4f4c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (adsLen > 0) {
   d5492:	f030 0402 	bics.w	r4, r0, #2
   d5496:	d00b      	beq.n	d54b0 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x30>
            adsLen -= 2;
   d5498:	1e84      	subs	r4, r0, #2
   d549a:	42bc      	cmp	r4, r7
   d549c:	bf28      	it	cs
   d549e:	463c      	movcs	r4, r7
            if (buf != nullptr) {
   d54a0:	b135      	cbz	r5, d54b0 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj+0x30>
                memcpy(buf, &selfData_[offset + 2], len);
   d54a2:	9901      	ldr	r1, [sp, #4]
   d54a4:	3102      	adds	r1, #2
   d54a6:	4622      	mov	r2, r4
   d54a8:	4431      	add	r1, r6
   d54aa:	4628      	mov	r0, r5
   d54ac:	f003 fcea 	bl	d8e84 <memcpy>
}
   d54b0:	4620      	mov	r0, r4
   d54b2:	b003      	add	sp, #12
   d54b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d54b6 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>:
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   d54b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d54b8:	4613      	mov	r3, r2
   d54ba:	460c      	mov	r4, r1
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   d54bc:	9201      	str	r2, [sp, #4]
   d54be:	460a      	mov	r2, r1
   d54c0:	2108      	movs	r1, #8
size_t BleAdvertisingData::deviceName(char* buf, size_t len) const {
   d54c2:	4605      	mov	r5, r0
    size_t nameLen = get(BleAdvertisingDataType::SHORT_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   d54c4:	f7ff ffdc 	bl	d5480 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
    if (nameLen > 0) {
   d54c8:	b940      	cbnz	r0, d54dc <_ZNK8particle18BleAdvertisingData10deviceNameEPcj+0x26>
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   d54ca:	9b01      	ldr	r3, [sp, #4]
   d54cc:	4622      	mov	r2, r4
   d54ce:	2109      	movs	r1, #9
   d54d0:	4628      	mov	r0, r5
}
   d54d2:	b003      	add	sp, #12
   d54d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return get(BleAdvertisingDataType::COMPLETE_LOCAL_NAME, reinterpret_cast<uint8_t*>(buf), len);
   d54d8:	f7ff bfd2 	b.w	d5480 <_ZNK8particle18BleAdvertisingData3getENS_22BleAdvertisingDataTypeEPhj>
}
   d54dc:	b003      	add	sp, #12
   d54de:	bd30      	pop	{r4, r5, pc}

000d54e0 <_ZNK8particle18BleAdvertisingData10deviceNameEv>:
String BleAdvertisingData::deviceName() const {
   d54e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d54e2:	460c      	mov	r4, r1
   d54e4:	b089      	sub	sp, #36	; 0x24
    String name;
   d54e6:	490c      	ldr	r1, [pc, #48]	; (d5518 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x38>)
String BleAdvertisingData::deviceName() const {
   d54e8:	4605      	mov	r5, r0
    String name;
   d54ea:	f003 f8b6 	bl	d865a <_ZN6StringC1EPKc>
    size_t len = deviceName(buf, sizeof(buf));
   d54ee:	221f      	movs	r2, #31
   d54f0:	4669      	mov	r1, sp
   d54f2:	4620      	mov	r0, r4
   d54f4:	f7ff ffdf 	bl	d54b6 <_ZNK8particle18BleAdvertisingData10deviceNameEPcj>
    if (len > 0) {
   d54f8:	4606      	mov	r6, r0
   d54fa:	b150      	cbz	r0, d5512 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
   d54fc:	466c      	mov	r4, sp
        for (size_t i = 0; i < len; i++) {
   d54fe:	2700      	movs	r7, #0
            if (!name.concat(buf[i])) {
   d5500:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5504:	4628      	mov	r0, r5
   d5506:	f003 f927 	bl	d8758 <_ZN6String6concatEc>
   d550a:	b110      	cbz	r0, d5512 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x32>
        for (size_t i = 0; i < len; i++) {
   d550c:	3701      	adds	r7, #1
   d550e:	42be      	cmp	r6, r7
   d5510:	d1f6      	bne.n	d5500 <_ZNK8particle18BleAdvertisingData10deviceNameEv+0x20>
}
   d5512:	4628      	mov	r0, r5
   d5514:	b009      	add	sp, #36	; 0x24
   d5516:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5518:	000d9627 	.word	0x000d9627

000d551c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>:
size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
   d551c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5520:	4699      	mov	r9, r3
   d5522:	b087      	sub	sp, #28
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   d5524:	1e8b      	subs	r3, r1, #2
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d5526:	2500      	movs	r5, #0
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   d5528:	b2db      	uxtb	r3, r3
size_t BleAdvertisingData::serviceUUID(BleAdvertisingDataType type, BleUuid* uuids, size_t count) const {
   d552a:	4607      	mov	r7, r0
   d552c:	4688      	mov	r8, r1
   d552e:	9201      	str	r2, [sp, #4]
    size_t offset, adsLen = 0, found = 0;
   d5530:	462c      	mov	r4, r5
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   d5532:	9302      	str	r3, [sp, #8]
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d5534:	6a39      	ldr	r1, [r7, #32]
   d5536:	42a9      	cmp	r1, r5
   d5538:	d957      	bls.n	d55ea <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0xce>
    if (offset == nullptr) {
   d553a:	ab05      	add	r3, sp, #20
   d553c:	4642      	mov	r2, r8
   d553e:	1b49      	subs	r1, r1, r5
   d5540:	1978      	adds	r0, r7, r5
   d5542:	f7ff fd03 	bl	d4f4c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
        if (adsLen > 0 && found < count) {
   d5546:	4606      	mov	r6, r0
   d5548:	2800      	cmp	r0, #0
   d554a:	d04e      	beq.n	d55ea <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0xce>
   d554c:	454c      	cmp	r4, r9
   d554e:	d24c      	bcs.n	d55ea <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0xce>
            if (type == BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE) {
   d5550:	9b02      	ldr	r3, [sp, #8]
   d5552:	2b01      	cmp	r3, #1
   d5554:	d822      	bhi.n	d559c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x80>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN) && (found < count); array++) {
   d5556:	f1a0 0b02 	sub.w	fp, r0, #2
   d555a:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
   d555e:	eba9 0204 	sub.w	r2, r9, r4
   d5562:	f04f 0a00 	mov.w	sl, #0
                    uuids[found++] = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   d5566:	2314      	movs	r3, #20
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN) && (found < count); array++) {
   d5568:	45d3      	cmp	fp, sl
   d556a:	9805      	ldr	r0, [sp, #20]
   d556c:	d039      	beq.n	d55e2 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0xc6>
   d556e:	4592      	cmp	sl, r2
   d5570:	9203      	str	r2, [sp, #12]
   d5572:	d036      	beq.n	d55e2 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0xc6>
                    uuids[found++] = (uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 2] | ((uint16_t)selfData_[i + offset + array * BLE_SIG_UUID_16BIT_LEN + 3] << 8);
   d5574:	4428      	add	r0, r5
   d5576:	eb00 004a 	add.w	r0, r0, sl, lsl #1
   d557a:	4438      	add	r0, r7
   d557c:	9a01      	ldr	r2, [sp, #4]
   d557e:	f890 c003 	ldrb.w	ip, [r0, #3]
   d5582:	7881      	ldrb	r1, [r0, #2]
   d5584:	fb03 2004 	mla	r0, r3, r4, r2
   d5588:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
   d558c:	f7ff fe3b 	bl	d5206 <_ZN8particle7BleUuidaSEt>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_16BIT_LEN) && (found < count); array++) {
   d5590:	f10a 0a01 	add.w	sl, sl, #1
   d5594:	9a03      	ldr	r2, [sp, #12]
   d5596:	3401      	adds	r4, #1
   d5598:	2314      	movs	r3, #20
   d559a:	e7e5      	b.n	d5568 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x4c>
            } else if (type == BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE || type == BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE) {
   d559c:	f1a8 0306 	sub.w	r3, r8, #6
   d55a0:	2b01      	cmp	r3, #1
   d55a2:	d81e      	bhi.n	d55e2 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0xc6>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN) && (found < count); array++) {
   d55a4:	f1a0 0b02 	sub.w	fp, r0, #2
   d55a8:	ea4f 1b1b 	mov.w	fp, fp, lsr #4
   d55ac:	eba9 0204 	sub.w	r2, r9, r4
   d55b0:	f04f 0a00 	mov.w	sl, #0
                    uuids[found++] = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   d55b4:	2314      	movs	r3, #20
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN) && (found < count); array++) {
   d55b6:	45d3      	cmp	fp, sl
   d55b8:	9905      	ldr	r1, [sp, #20]
   d55ba:	d012      	beq.n	d55e2 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0xc6>
   d55bc:	4592      	cmp	sl, r2
   d55be:	9203      	str	r2, [sp, #12]
   d55c0:	d00f      	beq.n	d55e2 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0xc6>
                    uuids[found++] = &selfData_[i + offset + array * BLE_SIG_UUID_128BIT_LEN + 2];
   d55c2:	3102      	adds	r1, #2
   d55c4:	9a01      	ldr	r2, [sp, #4]
   d55c6:	4429      	add	r1, r5
   d55c8:	eb01 110a 	add.w	r1, r1, sl, lsl #4
   d55cc:	fb03 2004 	mla	r0, r3, r4, r2
   d55d0:	4439      	add	r1, r7
   d55d2:	f7ff fe0b 	bl	d51ec <_ZN8particle7BleUuidaSEPKh>
                for(size_t array = 0; (array < (adsLen - 2) / BLE_SIG_UUID_128BIT_LEN) && (found < count); array++) {
   d55d6:	f10a 0a01 	add.w	sl, sl, #1
   d55da:	9a03      	ldr	r2, [sp, #12]
   d55dc:	3401      	adds	r4, #1
   d55de:	2314      	movs	r3, #20
   d55e0:	e7e9      	b.n	d55b6 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x9a>
    for (size_t i = 0; i < selfLen_; i += (offset + adsLen)) {
   d55e2:	9805      	ldr	r0, [sp, #20]
   d55e4:	4406      	add	r6, r0
   d55e6:	4435      	add	r5, r6
   d55e8:	e7a4      	b.n	d5534 <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj+0x18>
}
   d55ea:	4620      	mov	r0, r4
   d55ec:	b007      	add	sp, #28
   d55ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d55f2 <_ZNK8particle18BleAdvertisingData11serviceUUIDEPNS_7BleUuidEj>:
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d55f2:	e92d 43e0 	stmdb	sp!, {r5, r6, r7, r8, r9, lr}
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d55f6:	4613      	mov	r3, r2
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d55f8:	460e      	mov	r6, r1
   d55fa:	4617      	mov	r7, r2
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d55fc:	460a      	mov	r2, r1
   d55fe:	2102      	movs	r1, #2
size_t BleAdvertisingData::serviceUUID(BleUuid* uuids, size_t count) const {
   d5600:	4680      	mov	r8, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d5602:	f7ff ff8b 	bl	d551c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, &uuids[found], count - found);
   d5606:	f04f 0914 	mov.w	r9, #20
   d560a:	1a3b      	subs	r3, r7, r0
   d560c:	fb09 6200 	mla	r2, r9, r0, r6
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d5610:	4605      	mov	r5, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, &uuids[found], count - found);
   d5612:	2103      	movs	r1, #3
   d5614:	4640      	mov	r0, r8
   d5616:	f7ff ff81 	bl	d551c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
   d561a:	4405      	add	r5, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_MORE_AVAILABLE, &uuids[found], count - found);
   d561c:	1b7b      	subs	r3, r7, r5
   d561e:	fb09 6205 	mla	r2, r9, r5, r6
   d5622:	2106      	movs	r1, #6
   d5624:	4640      	mov	r0, r8
   d5626:	f7ff ff79 	bl	d551c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
   d562a:	4405      	add	r5, r0
    found += serviceUUID(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, &uuids[found], count - found);
   d562c:	1b7b      	subs	r3, r7, r5
   d562e:	fb09 6205 	mla	r2, r9, r5, r6
   d5632:	2107      	movs	r1, #7
   d5634:	4640      	mov	r0, r8
   d5636:	f7ff ff71 	bl	d551c <_ZNK8particle18BleAdvertisingData11serviceUUIDENS_22BleAdvertisingDataTypeEPNS_7BleUuidEj>
}
   d563a:	4428      	add	r0, r5
   d563c:	e8bd 83e0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, pc}

000d5640 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   d5640:	b538      	push	{r3, r4, r5, lr}
              context_(nullptr) {
   d5642:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5646:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   d5648:	4604      	mov	r4, r0
              context_(nullptr) {
   d564a:	8043      	strh	r3, [r0, #2]
   d564c:	220e      	movs	r2, #14
   d564e:	4629      	mov	r1, r5
   d5650:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d5652:	7105      	strb	r5, [r0, #4]
   d5654:	3006      	adds	r0, #6
   d5656:	f003 fc3d 	bl	d8ed4 <memset>
   d565a:	f104 0014 	add.w	r0, r4, #20
   d565e:	f7ff fd0d 	bl	d507c <_ZN8particle7BleUuidC1Ev>
   d5662:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d5666:	f7ff fd09 	bl	d507c <_ZN8particle7BleUuidC1Ev>
   d566a:	4904      	ldr	r1, [pc, #16]	; (d567c <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d566c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d5670:	f002 fff3 	bl	d865a <_ZN6StringC1EPKc>
   d5674:	e9c4 5513 	strd	r5, r5, [r4, #76]	; 0x4c
    }
   d5678:	4620      	mov	r0, r4
   d567a:	bd38      	pop	{r3, r4, r5, pc}
   d567c:	000d9627 	.word	0x000d9627

000d5680 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d5680:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5682:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   d5686:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d568a:	4293      	cmp	r3, r2
   d568c:	4618      	mov	r0, r3
   d568e:	d006      	beq.n	d569e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d5690:	6804      	ldr	r4, [r0, #0]
   d5692:	8824      	ldrh	r4, [r4, #0]
   d5694:	428c      	cmp	r4, r1
   d5696:	f103 0308 	add.w	r3, r3, #8
   d569a:	d1f6      	bne.n	d568a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   d569c:	bd10      	pop	{r4, pc}
        return nullptr;
   d569e:	2000      	movs	r0, #0
   d56a0:	e7fc      	b.n	d569c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000d56a4 <_ZN8particle17BleCharacteristicC1Ev>:

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d56a4:	2300      	movs	r3, #0
BleCharacteristic::BleCharacteristic()
   d56a6:	b570      	push	{r4, r5, r6, lr}
   d56a8:	6003      	str	r3, [r0, #0]
   d56aa:	4605      	mov	r5, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d56ac:	2060      	movs	r0, #96	; 0x60
   d56ae:	f7fe fcf0 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d56b2:	1e04      	subs	r4, r0, #0
   d56b4:	f104 060c 	add.w	r6, r4, #12
   d56b8:	d007      	beq.n	d56ca <_ZN8particle17BleCharacteristicC1Ev+0x26>
      : _M_use_count(1), _M_weak_count(1) { }
   d56ba:	2301      	movs	r3, #1
   d56bc:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   d56c0:	4b04      	ldr	r3, [pc, #16]	; (d56d4 <_ZN8particle17BleCharacteristicC1Ev+0x30>)
   d56c2:	6023      	str	r3, [r4, #0]
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d56c4:	4630      	mov	r0, r6
   d56c6:	f7ff ffbb 	bl	d5640 <_ZN8particle21BleCharacteristicImplC1Ev>
	  __p = __pi->_M_ptr();
   d56ca:	e9c5 6400 	strd	r6, r4, [r5]
}
   d56ce:	4628      	mov	r0, r5
   d56d0:	bd70      	pop	{r4, r5, r6, pc}
   d56d2:	bf00      	nop
   d56d4:	000d94e0 	.word	0x000d94e0

000d56d8 <_ZN8particle17BleCharacteristicaSERKS0_>:
BleCharacteristic& BleCharacteristic::operator=(const BleCharacteristic& characteristic) {
   d56d8:	b510      	push	{r4, lr}
    int subscribe(bool enable) const;

    void onDataReceived(BleOnDataReceivedCallback callback, void* context);

    BleCharacteristicImpl* impl() const {
        return impl_.get();
   d56da:	6802      	ldr	r2, [r0, #0]
   d56dc:	4604      	mov	r4, r0
        if (charImpl.callback_) {
   d56de:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
   d56e0:	b118      	cbz	r0, d56ea <_ZN8particle17BleCharacteristicaSERKS0_+0x12>
   d56e2:	680b      	ldr	r3, [r1, #0]
            callback_ = charImpl.callback_;
   d56e4:	64d8      	str	r0, [r3, #76]	; 0x4c
            context_ = charImpl.context_;
   d56e6:	6d12      	ldr	r2, [r2, #80]	; 0x50
   d56e8:	651a      	str	r2, [r3, #80]	; 0x50
    class __shared_ptr
   d56ea:	4620      	mov	r0, r4
   d56ec:	680b      	ldr	r3, [r1, #0]
   d56ee:	f840 3b04 	str.w	r3, [r0], #4
   d56f2:	6849      	ldr	r1, [r1, #4]
   d56f4:	f7ff fc66 	bl	d4fc4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
}
   d56f8:	4620      	mov	r0, r4
   d56fa:	bd10      	pop	{r4, pc}

000d56fc <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   d56fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d56fe:	4606      	mov	r6, r0
   d5700:	b085      	sub	sp, #20
   d5702:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   d5704:	460d      	mov	r5, r1
   d5706:	2900      	cmp	r1, #0
   d5708:	d050      	beq.n	d57ac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   d570a:	2a00      	cmp	r2, #0
   d570c:	d04e      	beq.n	d57ac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   d570e:	6804      	ldr	r4, [r0, #0]
    if (impl()->local()) {
   d5710:	7823      	ldrb	r3, [r4, #0]
   d5712:	2af4      	cmp	r2, #244	; 0xf4
   d5714:	bf28      	it	cs
   d5716:	22f4      	movcs	r2, #244	; 0xf4
   d5718:	b343      	cbz	r3, d576c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   d571a:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   d571c:	0798      	lsls	r0, r3, #30
   d571e:	d509      	bpl.n	d5734 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   d5720:	89a0      	ldrh	r0, [r4, #12]
   d5722:	9203      	str	r2, [sp, #12]
   d5724:	2300      	movs	r3, #0
   d5726:	f7ff f943 	bl	d49b0 <hal_ble_gatt_server_set_characteristic_value>
   d572a:	2800      	cmp	r0, #0
   d572c:	9a03      	ldr	r2, [sp, #12]
   d572e:	da03      	bge.n	d5738 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
}
   d5730:	b005      	add	sp, #20
   d5732:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   d5734:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d5738:	6834      	ldr	r4, [r6, #0]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   d573a:	7923      	ldrb	r3, [r4, #4]
   d573c:	06d9      	lsls	r1, r3, #27
   d573e:	d509      	bpl.n	d5754 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   d5740:	2f01      	cmp	r7, #1
   d5742:	d007      	beq.n	d5754 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d5744:	89a0      	ldrh	r0, [r4, #12]
   d5746:	2300      	movs	r3, #0
   d5748:	4629      	mov	r1, r5
}
   d574a:	b005      	add	sp, #20
   d574c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d5750:	f7ff b992 	b.w	d4a78 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   d5754:	069b      	lsls	r3, r3, #26
   d5756:	d5eb      	bpl.n	d5730 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   d5758:	2f02      	cmp	r7, #2
   d575a:	d0e9      	beq.n	d5730 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d575c:	89a0      	ldrh	r0, [r4, #12]
   d575e:	2300      	movs	r3, #0
   d5760:	4629      	mov	r1, r5
}
   d5762:	b005      	add	sp, #20
   d5764:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   d5768:	f7ff b990 	b.w	d4a8c <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   d576c:	8860      	ldrh	r0, [r4, #2]
   d576e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d5772:	4288      	cmp	r0, r1
   d5774:	d01c      	beq.n	d57b0 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   d5776:	7921      	ldrb	r1, [r4, #4]
   d5778:	074e      	lsls	r6, r1, #29
   d577a:	d501      	bpl.n	d5780 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   d577c:	2f01      	cmp	r7, #1
   d577e:	d104      	bne.n	d578a <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d5780:	070b      	lsls	r3, r1, #28
   d5782:	d409      	bmi.n	d5798 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   d5784:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d5788:	e7d2      	b.n	d5730 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d578a:	89a1      	ldrh	r1, [r4, #12]
   d578c:	9300      	str	r3, [sp, #0]
   d578e:	4613      	mov	r3, r2
   d5790:	462a      	mov	r2, r5
   d5792:	f7ff f935 	bl	d4a00 <hal_ble_gatt_client_write_without_response>
   d5796:	e7cb      	b.n	d5730 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   d5798:	2f02      	cmp	r7, #2
   d579a:	d0f3      	beq.n	d5784 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   d579c:	2300      	movs	r3, #0
   d579e:	89a1      	ldrh	r1, [r4, #12]
   d57a0:	9300      	str	r3, [sp, #0]
   d57a2:	4613      	mov	r3, r2
   d57a4:	462a      	mov	r2, r5
   d57a6:	f7ff f921 	bl	d49ec <hal_ble_gatt_client_write_with_response>
   d57aa:	e7c1      	b.n	d5730 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d57ac:	4802      	ldr	r0, [pc, #8]	; (d57b8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   d57ae:	e7bf      	b.n	d5730 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   d57b0:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d57b4:	e7bc      	b.n	d5730 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   d57b6:	bf00      	nop
   d57b8:	fffffef2 	.word	0xfffffef2

000d57bc <_ZNK8particle17BleCharacteristic9subscribeEb>:
int BleCharacteristic::subscribe(bool enable) const {
   d57bc:	b510      	push	{r4, lr}
   d57be:	6803      	ldr	r3, [r0, #0]
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
   d57c0:	781a      	ldrb	r2, [r3, #0]
int BleCharacteristic::subscribe(bool enable) const {
   d57c2:	b086      	sub	sp, #24
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
   d57c4:	bb52      	cbnz	r2, d581c <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->connHandle() != BLE_INVALID_CONN_HANDLE, SYSTEM_ERROR_INVALID_STATE);
   d57c6:	885c      	ldrh	r4, [r3, #2]
   d57c8:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d57cc:	4284      	cmp	r4, r0
   d57ce:	d025      	beq.n	d581c <_ZNK8particle17BleCharacteristic9subscribeEb+0x60>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   d57d0:	8a18      	ldrh	r0, [r3, #16]
   d57d2:	b330      	cbz	r0, d5822 <_ZNK8particle17BleCharacteristic9subscribeEb+0x66>
    config.version = BLE_API_VERSION;
   d57d4:	4814      	ldr	r0, [pc, #80]	; (d5828 <_ZNK8particle17BleCharacteristic9subscribeEb+0x6c>)
   d57d6:	9000      	str	r0, [sp, #0]
    config.callback = impl()->onBleCharEvents;
   d57d8:	4814      	ldr	r0, [pc, #80]	; (d582c <_ZNK8particle17BleCharacteristic9subscribeEb+0x70>)
    hal_ble_cccd_config_t config = {};
   d57da:	9205      	str	r2, [sp, #20]
   d57dc:	e9cd 2203 	strd	r2, r2, [sp, #12]
    config.context = impl();
   d57e0:	e9cd 0301 	strd	r0, r3, [sp, #4]
    config.conn_handle = impl()->connHandle();
   d57e4:	8858      	ldrh	r0, [r3, #2]
   d57e6:	f8ad 000c 	strh.w	r0, [sp, #12]
    config.cccd_handle = impl()->attrHandles().cccd_handle;
   d57ea:	8a18      	ldrh	r0, [r3, #16]
   d57ec:	f8ad 000e 	strh.w	r0, [sp, #14]
    config.value_handle = impl()->attrHandles().value_handle;
   d57f0:	8998      	ldrh	r0, [r3, #12]
   d57f2:	f8ad 0010 	strh.w	r0, [sp, #16]
    if (enable) {
   d57f6:	b159      	cbz	r1, d5810 <_ZNK8particle17BleCharacteristic9subscribeEb+0x54>
   d57f8:	791a      	ldrb	r2, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE)) {
   d57fa:	0692      	lsls	r2, r2, #26
            config.cccd_value = BLE_SIG_CCCD_VAL_INDICATION;
   d57fc:	bf44      	itt	mi
   d57fe:	2202      	movmi	r2, #2
   d5800:	9205      	strmi	r2, [sp, #20]
   d5802:	791b      	ldrb	r3, [r3, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY)) {
   d5804:	06db      	lsls	r3, r3, #27
            config.cccd_value = (ble_sig_cccd_value_t)(config.cccd_value | BLE_SIG_CCCD_VAL_NOTIFICATION);
   d5806:	bf42      	ittt	mi
   d5808:	9b05      	ldrmi	r3, [sp, #20]
   d580a:	f043 0301 	orrmi.w	r3, r3, #1
   d580e:	9305      	strmi	r3, [sp, #20]
    return hal_ble_gatt_client_configure_cccd(&config, nullptr);
   d5810:	2100      	movs	r1, #0
   d5812:	4668      	mov	r0, sp
   d5814:	f7ff f926 	bl	d4a64 <hal_ble_gatt_client_configure_cccd>
}
   d5818:	b006      	add	sp, #24
   d581a:	bd10      	pop	{r4, pc}
    CHECK_FALSE(impl()->local(), SYSTEM_ERROR_INVALID_STATE);
   d581c:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   d5820:	e7fa      	b.n	d5818 <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
    CHECK_TRUE(impl()->attrHandles().cccd_handle != BLE_INVALID_ATTR_HANDLE, SYSTEM_ERROR_NOT_SUPPORTED);
   d5822:	f06f 0077 	mvn.w	r0, #119	; 0x77
   d5826:	e7f7      	b.n	d5818 <_ZNK8particle17BleCharacteristic9subscribeEb+0x5c>
   d5828:	00180001 	.word	0x00180001
   d582c:	000d5b2d 	.word	0x000d5b2d

000d5830 <_ZN8particle17BleCharacteristic14onDataReceivedEPFvPKhjRKNS_13BlePeerDeviceEPvES6_>:
   d5830:	6803      	ldr	r3, [r0, #0]
        context_ = context;
   d5832:	e9c3 1213 	strd	r1, r2, [r3, #76]	; 0x4c
}
   d5836:	4770      	bx	lr

000d5838 <_ZN8particle10BleServiceC1Ev>:
BleService::BleService()
   d5838:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d583a:	2600      	movs	r6, #0
   d583c:	6006      	str	r6, [r0, #0]
   d583e:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d5840:	2024      	movs	r0, #36	; 0x24
   d5842:	f7fe fc26 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d5846:	1e03      	subs	r3, r0, #0
   d5848:	f103 050c 	add.w	r5, r3, #12
   d584c:	d008      	beq.n	d5860 <_ZN8particle10BleServiceC1Ev+0x28>
      : _M_use_count(1), _M_weak_count(1) { }
   d584e:	2201      	movs	r2, #1
   d5850:	e9c3 2201 	strd	r2, r2, [r3, #4]
	: _M_impl(__a)
   d5854:	4a04      	ldr	r2, [pc, #16]	; (d5868 <_ZN8particle10BleServiceC1Ev+0x30>)
   d5856:	601a      	str	r2, [r3, #0]
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d5858:	4628      	mov	r0, r5
   d585a:	f7ff fc0f 	bl	d507c <_ZN8particle7BleUuidC1Ev>
   d585e:	621e      	str	r6, [r3, #32]
	  __p = __pi->_M_ptr();
   d5860:	e9c4 5300 	strd	r5, r3, [r4]
}
   d5864:	4620      	mov	r0, r4
   d5866:	bd70      	pop	{r4, r5, r6, pc}
   d5868:	000d94fc 	.word	0x000d94fc

000d586c <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
BleService::BleService(const BleUuid& uuid)
   d586c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d5870:	f04f 0800 	mov.w	r8, #0
   d5874:	f8c0 8000 	str.w	r8, [r0]
   d5878:	4605      	mov	r5, r0
   d587a:	2024      	movs	r0, #36	; 0x24
   d587c:	460f      	mov	r7, r1
   d587e:	f7fe fc08 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d5882:	1e04      	subs	r4, r0, #0
   d5884:	f104 060c 	add.w	r6, r4, #12
   d5888:	d00d      	beq.n	d58a6 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   d588a:	2301      	movs	r3, #1
   d588c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	: _M_impl(__a)
   d5890:	4b07      	ldr	r3, [pc, #28]	; (d58b0 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   d5892:	6023      	str	r3, [r4, #0]
              endHandle_(BLE_INVALID_ATTR_HANDLE) {
   d5894:	4630      	mov	r0, r6
   d5896:	f7ff fbf1 	bl	d507c <_ZN8particle7BleUuidC1Ev>
   d589a:	f8c4 8020 	str.w	r8, [r4, #32]
        uuid_ = svcUuid;
   d589e:	4639      	mov	r1, r7
   d58a0:	4630      	mov	r0, r6
   d58a2:	f7ff fc96 	bl	d51d2 <_ZN8particle7BleUuidaSERKS0_>
	  __p = __pi->_M_ptr();
   d58a6:	e9c5 6400 	strd	r6, r4, [r5]
}
   d58aa:	4628      	mov	r0, r5
   d58ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d58b0:	000d94fc 	.word	0x000d94fc

000d58b4 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE>:

    int discoverAllCharacteristics(BlePeerDevice& peer) {
   d58b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        LOG(TRACE, "Start discovering characteristics.");
   d58b8:	2320      	movs	r3, #32
    int discoverAllCharacteristics(BlePeerDevice& peer) {
   d58ba:	b08b      	sub	sp, #44	; 0x2c
        LOG(TRACE, "Start discovering characteristics.");
   d58bc:	2600      	movs	r6, #0
   d58be:	e9cd 3602 	strd	r3, r6, [sp, #8]
    int discoverAllCharacteristics(BlePeerDevice& peer) {
   d58c2:	460d      	mov	r5, r1
        LOG(TRACE, "Start discovering characteristics.");
   d58c4:	4b2e      	ldr	r3, [pc, #184]	; (d5980 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xcc>)
   d58c6:	9300      	str	r3, [sp, #0]
   d58c8:	492e      	ldr	r1, [pc, #184]	; (d5984 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xd0>)
        for (auto& service : peer.impl()->services()) {
            hal_ble_svc_t halService;
            halService.size = sizeof(hal_ble_svc_t);
            halService.start_handle = service.impl()->startHandle();
            halService.end_handle = service.impl()->endHandle();
            CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, &peer, nullptr));
   d58ca:	f8df 90bc 	ldr.w	r9, [pc, #188]	; d5988 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xd4>
        LOG(TRACE, "Start discovering characteristics.");
   d58ce:	4633      	mov	r3, r6
   d58d0:	aa02      	add	r2, sp, #8
   d58d2:	2001      	movs	r0, #1
   d58d4:	f7ff f9c4 	bl	d4c60 <log_message>
    bool operator==(const BlePeerDevice& device) const;

    BlePeerDevice& operator=(const BlePeerDevice& peer);

    BlePeerDeviceImpl* impl() const {
        return impl_.get();
   d58d8:	682b      	ldr	r3, [r5, #0]
   d58da:	e9d3 4703 	ldrd	r4, r7, [r3, #12]
            halService.size = sizeof(hal_ble_svc_t);
   d58de:	f04f 081c 	mov.w	r8, #28
   d58e2:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
   d58e6:	3408      	adds	r4, #8
        for (auto& service : peer.impl()->services()) {
   d58e8:	f1a4 0308 	sub.w	r3, r4, #8
   d58ec:	429f      	cmp	r7, r3
   d58ee:	6829      	ldr	r1, [r5, #0]
   d58f0:	d019      	beq.n	d5926 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0x72>
            halService.size = sizeof(hal_ble_svc_t);
   d58f2:	f8ad 800a 	strh.w	r8, [sp, #10]
            halService.start_handle = service.impl()->startHandle();
   d58f6:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d58fa:	8a9b      	ldrh	r3, [r3, #20]
   d58fc:	f8ad 3020 	strh.w	r3, [sp, #32]
            halService.end_handle = service.impl()->endHandle();
   d5900:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d5904:	8adb      	ldrh	r3, [r3, #22]
   d5906:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
            CHECK(hal_ble_gatt_client_discover_characteristics(peer.impl()->connHandle(), &halService, onCharacteristicsDiscovered, &peer, nullptr));
   d590a:	8808      	ldrh	r0, [r1, #0]
   d590c:	9600      	str	r6, [sp, #0]
   d590e:	462b      	mov	r3, r5
   d5910:	464a      	mov	r2, r9
   d5912:	a902      	add	r1, sp, #8
   d5914:	f7ff f860 	bl	d49d8 <hal_ble_gatt_client_discover_characteristics>
   d5918:	2800      	cmp	r0, #0
   d591a:	f104 0408 	add.w	r4, r4, #8
   d591e:	dae3      	bge.n	d58e8 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0x34>
                    LOG_DEBUG(TRACE, "User description: %s.", desc);
                }
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   d5920:	b00b      	add	sp, #44	; 0x2c
   d5922:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5926:	e9d1 4606 	ldrd	r4, r6, [r1, #24]
                char desc[BLE_MAX_DESC_LEN] = {};
   d592a:	2700      	movs	r7, #0
   d592c:	eb04 06c6 	add.w	r6, r4, r6, lsl #3
   d5930:	3408      	adds	r4, #8
        for (auto& characteristic : peer.impl()->characteristics()) {
   d5932:	f1a4 0308 	sub.w	r3, r4, #8
   d5936:	429e      	cmp	r6, r3
   d5938:	d020      	beq.n	d597c <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xc8>
            if (characteristic.impl()->attrHandles().user_desc_handle != BLE_INVALID_ATTR_HANDLE) {
   d593a:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d593e:	89db      	ldrh	r3, [r3, #14]
   d5940:	b1d3      	cbz	r3, d5978 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xc4>
                char desc[BLE_MAX_DESC_LEN] = {};
   d5942:	2210      	movs	r2, #16
   d5944:	2100      	movs	r1, #0
   d5946:	a803      	add	r0, sp, #12
   d5948:	9702      	str	r7, [sp, #8]
   d594a:	f003 fac3 	bl	d8ed4 <memset>
                size_t len = hal_ble_gatt_client_read(peer.impl()->connHandle(), characteristic.impl()->attrHandles().user_desc_handle, (uint8_t*)desc, sizeof(desc) - 1, nullptr);
   d594e:	f854 3c08 	ldr.w	r3, [r4, #-8]
   d5952:	89d9      	ldrh	r1, [r3, #14]
   d5954:	682b      	ldr	r3, [r5, #0]
   d5956:	aa02      	add	r2, sp, #8
   d5958:	8818      	ldrh	r0, [r3, #0]
   d595a:	9700      	str	r7, [sp, #0]
   d595c:	2313      	movs	r3, #19
   d595e:	f7ff f859 	bl	d4a14 <hal_ble_gatt_client_read>
                if (len > 0) {
   d5962:	b148      	cbz	r0, d5978 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0xc4>
                    desc[len] = '\0';
   d5964:	ab0a      	add	r3, sp, #40	; 0x28
   d5966:	4418      	add	r0, r3
                    characteristic.impl()->description() = desc;
   d5968:	a902      	add	r1, sp, #8
                    desc[len] = '\0';
   d596a:	f800 7c20 	strb.w	r7, [r0, #-32]
        return description_;
   d596e:	f854 0c08 	ldr.w	r0, [r4, #-8]
                    characteristic.impl()->description() = desc;
   d5972:	303c      	adds	r0, #60	; 0x3c
   d5974:	f002 fec7 	bl	d8706 <_ZN6StringaSEPKc>
        for (auto& characteristic : peer.impl()->characteristics()) {
   d5978:	3408      	adds	r4, #8
   d597a:	e7da      	b.n	d5932 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0x7e>
   d597c:	2000      	movs	r0, #0
   d597e:	e7cf      	b.n	d5920 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE+0x6c>
   d5980:	000d935f 	.word	0x000d935f
   d5984:	000d9338 	.word	0x000d9338
   d5988:	000d65fd 	.word	0x000d65fd

000d598c <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d598c:	b538      	push	{r3, r4, r5, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d598e:	2400      	movs	r4, #0
   d5990:	6004      	str	r4, [r0, #0]
   d5992:	4605      	mov	r5, r0
   d5994:	2030      	movs	r0, #48	; 0x30
   d5996:	f7fe fb7c 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d599a:	4603      	mov	r3, r0
   d599c:	b188      	cbz	r0, d59c2 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   d599e:	2201      	movs	r2, #1
   d59a0:	e9c0 2201 	strd	r2, r2, [r0, #4]
	: _M_impl(__a)
   d59a4:	4a09      	ldr	r2, [pc, #36]	; (d59cc <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   d59a6:	6002      	str	r2, [r0, #0]
              characteristicsDiscovered_(false) {
   d59a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d59ac:	8182      	strh	r2, [r0, #12]
   d59ae:	300e      	adds	r0, #14
   d59b0:	f7ff fb4c 	bl	d504c <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   d59b4:	e9c3 4406 	strd	r4, r4, [r3, #24]
   d59b8:	e9c3 4408 	strd	r4, r4, [r3, #32]
   d59bc:	e9c3 440a 	strd	r4, r4, [r3, #40]	; 0x28
   d59c0:	82dc      	strh	r4, [r3, #22]
	  _M_pi = __pi;
   d59c2:	606b      	str	r3, [r5, #4]
   d59c4:	330c      	adds	r3, #12
	  __p = __pi->_M_ptr();
   d59c6:	602b      	str	r3, [r5, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   d59c8:	4628      	mov	r0, r5
   d59ca:	bd38      	pop	{r3, r4, r5, pc}
   d59cc:	000d9518 	.word	0x000d9518

000d59d0 <_ZN8particle13BlePeerDeviceaSERKS0_>:

BlePeerDevice::~BlePeerDevice() {
    DEBUG("~BlePeerDevice(), 0x%08X -> 0x%08X, count: %d", this, impl(), impl_.use_count() - 1);
}

BlePeerDevice& BlePeerDevice::operator=(const BlePeerDevice& peer) {
   d59d0:	b510      	push	{r4, lr}
    class __shared_ptr
   d59d2:	680b      	ldr	r3, [r1, #0]
   d59d4:	4604      	mov	r4, r0
   d59d6:	f840 3b04 	str.w	r3, [r0], #4
   d59da:	6849      	ldr	r1, [r1, #4]
   d59dc:	f7ff faf2 	bl	d4fc4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_.isra.0>
    impl_ = peer.impl_;
    return *this;
}
   d59e0:	4620      	mov	r0, r4
   d59e2:	bd10      	pop	{r4, pc}

000d59e4 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE>:

bool BlePeerDevice::getCharacteristicByDescription(BleCharacteristic& characteristic, const String& desc) const {
    return getCharacteristicByDescription(characteristic, desc.c_str());
}

bool BlePeerDevice::getCharacteristicByUUID(BleCharacteristic& characteristic, const BleUuid& uuid) const {
   d59e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d59e8:	6803      	ldr	r3, [r0, #0]
    return data_ + size_;
   d59ea:	e9d3 4306 	ldrd	r4, r3, [r3, #24]
   d59ee:	b087      	sub	sp, #28
   d59f0:	460e      	mov	r6, r1
   d59f2:	4617      	mov	r7, r2
   d59f4:	eb04 08c3 	add.w	r8, r4, r3, lsl #3
    for (auto& existChar : impl()->characteristics()) {
   d59f8:	4544      	cmp	r4, r8
   d59fa:	46a1      	mov	r9, r4
   d59fc:	d014      	beq.n	d5a28 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x44>
        return charUuid_;
   d59fe:	f854 1b08 	ldr.w	r1, [r4], #8
    return impl()->charUUID();
   d5a02:	a801      	add	r0, sp, #4
   d5a04:	3114      	adds	r1, #20
   d5a06:	f7ff fb6f 	bl	d50e8 <_ZN8particle7BleUuidC1ERKS0_>
        if (existChar.UUID() == uuid) {
   d5a0a:	4639      	mov	r1, r7
   d5a0c:	a801      	add	r0, sp, #4
   d5a0e:	f7ff fc12 	bl	d5236 <_ZNK8particle7BleUuideqERKS0_>
   d5a12:	4605      	mov	r5, r0
   d5a14:	2800      	cmp	r0, #0
   d5a16:	d0ef      	beq.n	d59f8 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x14>
            characteristic = existChar;
   d5a18:	4649      	mov	r1, r9
   d5a1a:	4630      	mov	r0, r6
   d5a1c:	f7ff fe5c 	bl	d56d8 <_ZN8particle17BleCharacteristicaSERKS0_>
            return true;
        }
    }
    return false;
}
   d5a20:	4628      	mov	r0, r5
   d5a22:	b007      	add	sp, #28
   d5a24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return false;
   d5a28:	2500      	movs	r5, #0
   d5a2a:	e7f9      	b.n	d5a20 <_ZNK8particle13BlePeerDevice23getCharacteristicByUUIDERNS_17BleCharacteristicERKNS_7BleUuidE+0x3c>

000d5a2c <_ZNK8particle13BlePeerDevice9connectedEv>:
    impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
    return SYSTEM_ERROR_NONE;
}

bool BlePeerDevice::connected() const {
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
   d5a2c:	6803      	ldr	r3, [r0, #0]
   d5a2e:	8818      	ldrh	r0, [r3, #0]
}
   d5a30:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5a34:	1ac0      	subs	r0, r0, r3
   d5a36:	bf18      	it	ne
   d5a38:	2001      	movne	r0, #1
   d5a3a:	4770      	bx	lr

000d5a3c <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>:
   d5a3c:	6802      	ldr	r2, [r0, #0]

void BlePeerDevice::bind(const BleAddress& address) const {
    impl()->address() = address;
   d5a3e:	680b      	ldr	r3, [r1, #0]
   d5a40:	f8c2 3002 	str.w	r3, [r2, #2]
   d5a44:	684b      	ldr	r3, [r1, #4]
   d5a46:	f8c2 3006 	str.w	r3, [r2, #6]
}
   d5a4a:	4770      	bx	lr

000d5a4c <_ZNK8particle13BlePeerDevice7addressEv>:

BleAddress BlePeerDevice::address() const {
    return impl()->address();
   d5a4c:	6809      	ldr	r1, [r1, #0]
   d5a4e:	f851 2f02 	ldr.w	r2, [r1, #2]!
   d5a52:	6002      	str	r2, [r0, #0]
   d5a54:	684a      	ldr	r2, [r1, #4]
   d5a56:	6042      	str	r2, [r0, #4]
}
   d5a58:	4770      	bx	lr

000d5a5a <_ZNK8particle13BlePeerDeviceeqERKS0_>:

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d5a5a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d5a5c:	460b      	mov	r3, r1
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d5a5e:	6801      	ldr	r1, [r0, #0]
   d5a60:	681a      	ldr	r2, [r3, #0]
   d5a62:	8809      	ldrh	r1, [r1, #0]
   d5a64:	8812      	ldrh	r2, [r2, #0]
   d5a66:	4291      	cmp	r1, r2
   d5a68:	d10c      	bne.n	d5a84 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2a>
   d5a6a:	4601      	mov	r1, r0
   d5a6c:	4668      	mov	r0, sp
   d5a6e:	f7ff ffed 	bl	d5a4c <_ZNK8particle13BlePeerDevice7addressEv>
   d5a72:	a802      	add	r0, sp, #8
   d5a74:	4619      	mov	r1, r3
   d5a76:	f7ff ffe9 	bl	d5a4c <_ZNK8particle13BlePeerDevice7addressEv>
   d5a7a:	a902      	add	r1, sp, #8
   d5a7c:	4668      	mov	r0, sp
   d5a7e:	f7ff faef 	bl	d5060 <_ZNK8particle10BleAddresseqERKS0_>
   d5a82:	b900      	cbnz	r0, d5a86 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x2c>
        return true;
    }
    return false;
   d5a84:	2000      	movs	r0, #0
}
   d5a86:	b005      	add	sp, #20
   d5a88:	f85d fb04 	ldr.w	pc, [sp], #4

000d5a8c <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d5a8c:	b510      	push	{r4, lr}
   d5a8e:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d5a90:	2034      	movs	r0, #52	; 0x34
   d5a92:	f7fe fafe 	bl	d4092 <_Znwj>
   d5a96:	4601      	mov	r1, r0
   d5a98:	b168      	cbz	r0, d5ab6 <_ZN8particle14BleLocalDeviceC1Ev+0x2a>
        capacity_(0) {
   d5a9a:	2300      	movs	r3, #0
   d5a9c:	e9c0 3300 	strd	r3, r3, [r0]
   d5aa0:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d5aa4:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d5aa8:	e9c0 3306 	strd	r3, r3, [r0, #24]
              disconnectedContext_(nullptr) {
   d5aac:	e9c0 3308 	strd	r3, r3, [r0, #32]
   d5ab0:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
   d5ab4:	6303      	str	r3, [r0, #48]	; 0x30
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d5ab6:	6021      	str	r1, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d5ab8:	b919      	cbnz	r1, d5ac2 <_ZN8particle14BleLocalDeviceC1Ev+0x36>
        SPARK_ASSERT(false);
   d5aba:	4a0a      	ldr	r2, [pc, #40]	; (d5ae4 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d5abc:	200a      	movs	r0, #10
   d5abe:	f7ff f8c7 	bl	d4c50 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d5ac2:	2000      	movs	r0, #0
   d5ac4:	f7fe ff2e 	bl	d4924 <hal_ble_stack_init>
   d5ac8:	b120      	cbz	r0, d5ad4 <_ZN8particle14BleLocalDeviceC1Ev+0x48>
   d5aca:	4a06      	ldr	r2, [pc, #24]	; (d5ae4 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d5acc:	2100      	movs	r1, #0
   d5ace:	200a      	movs	r0, #10
   d5ad0:	f7ff f8be 	bl	d4c50 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d5ad4:	6821      	ldr	r1, [r4, #0]
   d5ad6:	4804      	ldr	r0, [pc, #16]	; (d5ae8 <_ZN8particle14BleLocalDeviceC1Ev+0x5c>)
   d5ad8:	2200      	movs	r2, #0
   d5ada:	f7fe ffb9 	bl	d4a50 <hal_ble_set_callback_on_periph_link_events>
}
   d5ade:	4620      	mov	r0, r4
   d5ae0:	bd10      	pop	{r4, pc}
   d5ae2:	bf00      	nop
   d5ae4:	000d4af1 	.word	0x000d4af1
   d5ae8:	000d5f4d 	.word	0x000d5f4d

000d5aec <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d5aec:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d5aee:	4c0b      	ldr	r4, [pc, #44]	; (d5b1c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d5af0:	7823      	ldrb	r3, [r4, #0]
   d5af2:	f3bf 8f5b 	dmb	ish
   d5af6:	07db      	lsls	r3, r3, #31
   d5af8:	d40e      	bmi.n	d5b18 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   d5afa:	4620      	mov	r0, r4
   d5afc:	f7fe fad8 	bl	d40b0 <__cxa_guard_acquire>
   d5b00:	b150      	cbz	r0, d5b18 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   d5b02:	4807      	ldr	r0, [pc, #28]	; (d5b20 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d5b04:	f7ff ffc2 	bl	d5a8c <_ZN8particle14BleLocalDeviceC1Ev>
   d5b08:	4620      	mov	r0, r4
   d5b0a:	f7fe fad6 	bl	d40ba <__cxa_guard_release>
   d5b0e:	4a05      	ldr	r2, [pc, #20]	; (d5b24 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d5b10:	4905      	ldr	r1, [pc, #20]	; (d5b28 <_ZN8particle14BleLocalDevice11getInstanceEv+0x3c>)
   d5b12:	4803      	ldr	r0, [pc, #12]	; (d5b20 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d5b14:	f003 f87c 	bl	d8c10 <__aeabi_atexit>
    return instance;
}
   d5b18:	4801      	ldr	r0, [pc, #4]	; (d5b20 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d5b1a:	bd10      	pop	{r4, pc}
   d5b1c:	2003e628 	.word	0x2003e628
   d5b20:	2003e634 	.word	0x2003e634
   d5b24:	2003dee8 	.word	0x2003dee8
   d5b28:	000d5d3d 	.word	0x000d5d3d

000d5b2c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d5b2c:	b570      	push	{r4, r5, r6, lr}
    switch (event->type) {
   d5b2e:	6803      	ldr	r3, [r0, #0]
   d5b30:	3b09      	subs	r3, #9
   d5b32:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d5b34:	b08a      	sub	sp, #40	; 0x28
   d5b36:	4604      	mov	r4, r0
   d5b38:	460d      	mov	r5, r1
    switch (event->type) {
   d5b3a:	d812      	bhi.n	d5b62 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x36>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d5b3c:	f7ff ffd6 	bl	d5aec <_ZN8particle14BleLocalDevice11getInstanceEv>
   d5b40:	88a1      	ldrh	r1, [r4, #4]
   d5b42:	6800      	ldr	r0, [r0, #0]
   d5b44:	f7ff fd9c 	bl	d5680 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d5b48:	4602      	mov	r2, r0
   d5b4a:	b960      	cbnz	r0, d5b66 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x3a>
                LOG(ERROR, "Peer device is missing!");
   d5b4c:	2320      	movs	r3, #32
   d5b4e:	e9cd 3002 	strd	r3, r0, [sp, #8]
   d5b52:	4b09      	ldr	r3, [pc, #36]	; (d5b78 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x4c>)
   d5b54:	9300      	str	r3, [sp, #0]
   d5b56:	4909      	ldr	r1, [pc, #36]	; (d5b7c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x50>)
   d5b58:	4603      	mov	r3, r0
   d5b5a:	aa02      	add	r2, sp, #8
   d5b5c:	2032      	movs	r0, #50	; 0x32
   d5b5e:	f7ff f87f 	bl	d4c60 <log_message>
}
   d5b62:	b00a      	add	sp, #40	; 0x28
   d5b64:	bd70      	pop	{r4, r5, r6, pc}
            if (impl->callback_) {
   d5b66:	6cee      	ldr	r6, [r5, #76]	; 0x4c
   d5b68:	2e00      	cmp	r6, #0
   d5b6a:	d0fa      	beq.n	d5b62 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x36>
                impl->callback_(event->params.data_written.data, event->params.data_written.len, *peer, impl->context_);
   d5b6c:	e9d4 1003 	ldrd	r1, r0, [r4, #12]
   d5b70:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   d5b72:	47b0      	blx	r6
}
   d5b74:	e7f5      	b.n	d5b62 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x36>
   d5b76:	bf00      	nop
   d5b78:	000d9382 	.word	0x000d9382
   d5b7c:	000d9338 	.word	0x000d9338

000d5b80 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   d5b80:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d5b82:	a801      	add	r0, sp, #4
   d5b84:	f7ff fa48 	bl	d5018 <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(hal_ble_stack_init(nullptr));
   d5b88:	2000      	movs	r0, #0
   d5b8a:	f7fe fecb 	bl	d4924 <hal_ble_stack_init>
   d5b8e:	4604      	mov	r4, r0
    WiringBleLock lk;
   d5b90:	a801      	add	r0, sp, #4
   d5b92:	f7ff fa4f 	bl	d5034 <_ZN8particle3ble13WiringBleLockD1Ev>
    return SYSTEM_ERROR_NONE;
}
   d5b96:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   d5b9a:	b002      	add	sp, #8
   d5b9c:	bd10      	pop	{r4, pc}

000d5b9e <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams* params) const {
    return hal_ble_gap_get_advertising_parameters(params, nullptr);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d5b9e:	4608      	mov	r0, r1
   d5ba0:	b911      	cbnz	r1, d5ba8 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d5ba2:	460a      	mov	r2, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d5ba4:	f7fe bec6 	b.w	d4934 <hal_ble_gap_set_advertising_data>
   d5ba8:	6a09      	ldr	r1, [r1, #32]
   d5baa:	2200      	movs	r2, #0
   d5bac:	e7fa      	b.n	d5ba4 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000d5bae <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:
    }
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d5bae:	b507      	push	{r0, r1, r2, lr}
    if (scanResponse == nullptr) {
   d5bb0:	4608      	mov	r0, r1
   d5bb2:	b929      	cbnz	r1, d5bc0 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d5bb4:	460a      	mov	r2, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   d5bb6:	b003      	add	sp, #12
   d5bb8:	f85d eb04 	ldr.w	lr, [sp], #4
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d5bbc:	f7fe bec2 	b.w	d4944 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d5bc0:	2101      	movs	r1, #1
   d5bc2:	9001      	str	r0, [sp, #4]
   d5bc4:	f7ff fc40 	bl	d5448 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d5bc8:	9801      	ldr	r0, [sp, #4]
   d5bca:	2200      	movs	r2, #0
   d5bcc:	6a01      	ldr	r1, [r0, #32]
   d5bce:	e7f2      	b.n	d5bb6 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x8>

000d5bd0 <_ZNK8particle14BleLocalDevice9advertiseEv>:
    size_t len = CHECK(hal_ble_gap_get_scan_response_data(scanResponse->data(), BLE_MAX_ADV_DATA_LEN, nullptr));
    scanResponse->resize(len);
    return len;
}

int BleLocalDevice::advertise() const {
   d5bd0:	b513      	push	{r0, r1, r4, lr}
    WiringBleLock lk;
   d5bd2:	a801      	add	r0, sp, #4
   d5bd4:	f7ff fa20 	bl	d5018 <_ZN8particle3ble13WiringBleLockC1Ev>
    return hal_ble_gap_start_advertising(nullptr);
   d5bd8:	2000      	movs	r0, #0
   d5bda:	f7fe febb 	bl	d4954 <hal_ble_gap_start_advertising>
   d5bde:	4604      	mov	r4, r0
    WiringBleLock lk;
   d5be0:	a801      	add	r0, sp, #4
   d5be2:	f7ff fa27 	bl	d5034 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   d5be6:	4620      	mov	r0, r4
   d5be8:	b002      	add	sp, #8
   d5bea:	bd10      	pop	{r4, pc}

000d5bec <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d5bec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d5bee:	4605      	mov	r5, r0
    WiringBleLock lk;
   d5bf0:	a803      	add	r0, sp, #12
int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d5bf2:	9101      	str	r1, [sp, #4]
   d5bf4:	4616      	mov	r6, r2
    WiringBleLock lk;
   d5bf6:	f7ff fa0f 	bl	d5018 <_ZN8particle3ble13WiringBleLockC1Ev>
    CHECK(setAdvertisingData(advertisingData));
   d5bfa:	9901      	ldr	r1, [sp, #4]
   d5bfc:	4628      	mov	r0, r5
   d5bfe:	f7ff ffce 	bl	d5b9e <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d5c02:	1e04      	subs	r4, r0, #0
   d5c04:	db09      	blt.n	d5c1a <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2e>
    CHECK(setScanResponseData(scanResponse));
   d5c06:	4631      	mov	r1, r6
   d5c08:	4628      	mov	r0, r5
   d5c0a:	f7ff ffd0 	bl	d5bae <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d5c0e:	1e04      	subs	r4, r0, #0
   d5c10:	db03      	blt.n	d5c1a <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x2e>
    return advertise();
   d5c12:	4628      	mov	r0, r5
   d5c14:	f7ff ffdc 	bl	d5bd0 <_ZNK8particle14BleLocalDevice9advertiseEv>
   d5c18:	4604      	mov	r4, r0
    WiringBleLock lk;
   d5c1a:	a803      	add	r0, sp, #12
   d5c1c:	f7ff fa0a 	bl	d5034 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   d5c20:	4620      	mov	r0, r4
   d5c22:	b004      	add	sp, #16
   d5c24:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5c28 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj>:
    WiringBleLock lk;
    BleScanDelegator scanner;
    return scanner.start(callback, context);
}

int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   d5c28:	b530      	push	{r4, r5, lr}
   d5c2a:	b08b      	sub	sp, #44	; 0x2c
   d5c2c:	460d      	mov	r5, r1
    WiringBleLock lk;
   d5c2e:	a801      	add	r0, sp, #4
int BleLocalDevice::scan(BleScanResult* results, size_t resultCount) const {
   d5c30:	4614      	mov	r4, r2
    WiringBleLock lk;
   d5c32:	f7ff f9f1 	bl	d5018 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (results == nullptr || resultCount == 0) {
   d5c36:	b1cd      	cbz	r5, d5c6c <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x44>
   d5c38:	b1c4      	cbz	r4, d5c6c <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x44>
   d5c3a:	2200      	movs	r2, #0
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   d5c3c:	480c      	ldr	r0, [pc, #48]	; (d5c70 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x48>)
   d5c3e:	9204      	str	r2, [sp, #16]
   d5c40:	a902      	add	r1, sp, #8
        targetCount_ = resultCount;
   d5c42:	e9cd 5405 	strd	r5, r4, [sp, #20]
   d5c46:	e9cd 2202 	strd	r2, r2, [sp, #8]
              context_(nullptr) {
   d5c4a:	e9cd 2207 	strd	r2, r2, [sp, #28]
   d5c4e:	9209      	str	r2, [sp, #36]	; 0x24
        CHECK(hal_ble_gap_start_scan(onScanResultCallback, this, nullptr));
   d5c50:	f7fe fe88 	bl	d4964 <hal_ble_gap_start_scan>
   d5c54:	1e04      	subs	r4, r0, #0
    ::free(ptr);
   d5c56:	9802      	ldr	r0, [sp, #8]
        return foundCount_;
   d5c58:	bfa8      	it	ge
   d5c5a:	9c07      	ldrge	r4, [sp, #28]
   d5c5c:	f7ff f8c4 	bl	d4de8 <free>
    WiringBleLock lk;
   d5c60:	a801      	add	r0, sp, #4
   d5c62:	f7ff f9e7 	bl	d5034 <_ZN8particle3ble13WiringBleLockD1Ev>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    BleScanDelegator scanner;
    return scanner.start(results, resultCount);
}
   d5c66:	4620      	mov	r0, r4
   d5c68:	b00b      	add	sp, #44	; 0x2c
   d5c6a:	bd30      	pop	{r4, r5, pc}
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   d5c6c:	4c01      	ldr	r4, [pc, #4]	; (d5c74 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x4c>)
   d5c6e:	e7f7      	b.n	d5c60 <_ZNK8particle14BleLocalDevice4scanEPNS_13BleScanResultEj+0x38>
   d5c70:	000d60b9 	.word	0x000d60b9
   d5c74:	fffffef2 	.word	0xfffffef2

000d5c78 <_ZNK8particle14BleLocalDevice9connectedEv>:
    ppcp.conn_sup_timeout = timeout;
    return hal_ble_gap_set_ppcp(&ppcp, nullptr);
}

bool BleLocalDevice::connected() const {
    return (impl()->peers().size() > 0);
   d5c78:	6803      	ldr	r3, [r0, #0]
   d5c7a:	69d8      	ldr	r0, [r3, #28]
}
   d5c7c:	2800      	cmp	r0, #0
   d5c7e:	bfd4      	ite	le
   d5c80:	2000      	movle	r0, #0
   d5c82:	2001      	movgt	r0, #1
   d5c84:	4770      	bx	lr

000d5c86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d5c86:	680b      	ldr	r3, [r1, #0]
   d5c88:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d5c8a:	b113      	cbz	r3, d5c92 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d5c8c:	685a      	ldr	r2, [r3, #4]
   d5c8e:	3201      	adds	r2, #1
   d5c90:	605a      	str	r2, [r3, #4]
      }
   d5c92:	4770      	bx	lr

000d5c94 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d5c94:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5c96:	f851 3b04 	ldr.w	r3, [r1], #4
   d5c9a:	4604      	mov	r4, r0
   d5c9c:	f840 3b04 	str.w	r3, [r0], #4
   d5ca0:	f7ff fff1 	bl	d5c86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   d5ca4:	6823      	ldr	r3, [r4, #0]
   d5ca6:	b90b      	cbnz	r3, d5cac <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d5ca8:	f7ff f984 	bl	d4fb4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   d5cac:	4620      	mov	r0, r4
   d5cae:	bd10      	pop	{r4, pc}

000d5cb0 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d5cb0:	b510      	push	{r4, lr}
   d5cb2:	f851 3b04 	ldr.w	r3, [r1], #4
   d5cb6:	4604      	mov	r4, r0
   d5cb8:	f840 3b04 	str.w	r3, [r0], #4
   d5cbc:	f7ff ffe3 	bl	d5c86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d5cc0:	4620      	mov	r0, r4
   d5cc2:	bd10      	pop	{r4, pc}

000d5cc4 <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   d5cc4:	b510      	push	{r4, lr}
   d5cc6:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   d5cc8:	3004      	adds	r0, #4
   d5cca:	f7fe fa56 	bl	d417a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5cce:	4620      	mov	r0, r4
   d5cd0:	bd10      	pop	{r4, pc}

000d5cd2 <_ZN8particle13BlePeerDeviceD1Ev>:
BlePeerDevice::~BlePeerDevice() {
   d5cd2:	b510      	push	{r4, lr}
   d5cd4:	4604      	mov	r4, r0
   d5cd6:	3004      	adds	r0, #4
   d5cd8:	f7fe fa4f 	bl	d417a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5cdc:	4620      	mov	r0, r4
   d5cde:	bd10      	pop	{r4, pc}

000d5ce0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5ce0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5ce2:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5ce6:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d5ce8:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d5cec:	42ae      	cmp	r6, r5
   d5cee:	d004      	beq.n	d5cfa <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d5cf0:	1d28      	adds	r0, r5, #4
   d5cf2:	f7fe fa42 	bl	d417a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5cf6:	3508      	adds	r5, #8
   d5cf8:	e7f8      	b.n	d5cec <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d5cfa:	6820      	ldr	r0, [r4, #0]
   d5cfc:	f7ff f874 	bl	d4de8 <free>
}
   d5d00:	4620      	mov	r0, r4
   d5d02:	bd70      	pop	{r4, r5, r6, pc}

000d5d04 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5d04:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5d06:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5d0a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d5d0c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d5d10:	42ae      	cmp	r6, r5
   d5d12:	d004      	beq.n	d5d1e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d5d14:	1d28      	adds	r0, r5, #4
   d5d16:	f7fe fa30 	bl	d417a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5d1a:	3508      	adds	r5, #8
   d5d1c:	e7f8      	b.n	d5d10 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d5d1e:	6820      	ldr	r0, [r4, #0]
   d5d20:	f7ff f862 	bl	d4de8 <free>
}
   d5d24:	4620      	mov	r0, r4
   d5d26:	bd70      	pop	{r4, r5, r6, pc}

000d5d28 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d5d28:	b510      	push	{r4, lr}
   d5d2a:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   d5d2c:	3024      	adds	r0, #36	; 0x24
   d5d2e:	f7ff ffe9 	bl	d5d04 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d5d32:	f104 0018 	add.w	r0, r4, #24
   d5d36:	f7ff ffd3 	bl	d5ce0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   d5d3a:	bd10      	pop	{r4, pc}

000d5d3c <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d5d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__ptr != nullptr)
   d5d3e:	6804      	ldr	r4, [r0, #0]
   d5d40:	4606      	mov	r6, r0
   d5d42:	b1c4      	cbz	r4, d5d76 <_ZN8particle14BleLocalDeviceD1Ev+0x3a>
    destruct(data_, data_ + size_);
   d5d44:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   d5d48:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (; p != end; ++p) {
   d5d4c:	42af      	cmp	r7, r5
   d5d4e:	d004      	beq.n	d5d5a <_ZN8particle14BleLocalDeviceD1Ev+0x1e>
      ~__shared_ptr() = default;
   d5d50:	1d28      	adds	r0, r5, #4
   d5d52:	f7fe fa12 	bl	d417a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5d56:	3508      	adds	r5, #8
   d5d58:	e7f8      	b.n	d5d4c <_ZN8particle14BleLocalDeviceD1Ev+0x10>
    ::free(ptr);
   d5d5a:	69a0      	ldr	r0, [r4, #24]
   d5d5c:	f7ff f844 	bl	d4de8 <free>
    ~BleLocalDeviceImpl() = default;
   d5d60:	f104 000c 	add.w	r0, r4, #12
   d5d64:	f7ff ffce 	bl	d5d04 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d5d68:	4620      	mov	r0, r4
   d5d6a:	f7ff ffb9 	bl	d5ce0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   d5d6e:	2134      	movs	r1, #52	; 0x34
   d5d70:	4620      	mov	r0, r4
   d5d72:	f002 ff52 	bl	d8c1a <_ZdlPvj>
   d5d76:	4630      	mov	r0, r6
   d5d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

000d5d7c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   d5d7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5d80:	b085      	sub	sp, #20
   d5d82:	4680      	mov	r8, r0
   d5d84:	4699      	mov	r9, r3
   d5d86:	2060      	movs	r0, #96	; 0x60
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d5d88:	2300      	movs	r3, #0
   d5d8a:	460d      	mov	r5, r1
   d5d8c:	4616      	mov	r6, r2
   d5d8e:	9300      	str	r3, [sp, #0]
   d5d90:	f7fe f97f 	bl	d4092 <_Znwj>
	  auto __pi = ::new (__mem)
   d5d94:	1e04      	subs	r4, r0, #0
   d5d96:	f104 070c 	add.w	r7, r4, #12
   d5d9a:	d01c      	beq.n	d5dd6 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5a>
	: _M_impl(__a)
   d5d9c:	4b1c      	ldr	r3, [pc, #112]	; (d5e10 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   d5d9e:	6023      	str	r3, [r4, #0]
      : _M_use_count(1), _M_weak_count(1) { }
   d5da0:	2201      	movs	r2, #1
   d5da2:	e9c4 2201 	strd	r2, r2, [r4, #4]
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
   d5da6:	7836      	ldrb	r6, [r6, #0]
            : BleCharacteristicImpl() {
   d5da8:	4638      	mov	r0, r7
   d5daa:	f7ff fc49 	bl	d5640 <_ZN8particle21BleCharacteristicImplC1Ev>
        description_ = desc;
   d5dae:	4629      	mov	r1, r5
        properties_ = properties;
   d5db0:	7426      	strb	r6, [r4, #16]
        description_ = desc;
   d5db2:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d5db6:	f002 fca6 	bl	d8706 <_ZN6StringaSEPKc>
        callback_ = callback;
   d5dba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d5dbc:	65a3      	str	r3, [r4, #88]	; 0x58
        context_ = context;
   d5dbe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d5dc0:	65e3      	str	r3, [r4, #92]	; 0x5c
        charUuid_ = charUuid;
   d5dc2:	4649      	mov	r1, r9
   d5dc4:	f104 0020 	add.w	r0, r4, #32
   d5dc8:	f7ff fa03 	bl	d51d2 <_ZN8particle7BleUuidaSERKS0_>
        svcUuid_ = svcUuid;
   d5dcc:	990c      	ldr	r1, [sp, #48]	; 0x30
   d5dce:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d5dd2:	f7ff f9fe 	bl	d51d2 <_ZN8particle7BleUuidaSERKS0_>
	__r._M_pi = _M_pi;
   d5dd6:	2300      	movs	r3, #0
	__r._M_ptr = 0;
   d5dd8:	e9cd 3300 	strd	r3, r3, [sp]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5ddc:	f8d8 3000 	ldr.w	r3, [r8]
   d5de0:	9302      	str	r3, [sp, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5de2:	f8c8 7000 	str.w	r7, [r8]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5de6:	f8d8 3004 	ldr.w	r3, [r8, #4]
	__r._M_pi = _M_pi;
   d5dea:	f8c8 4004 	str.w	r4, [r8, #4]
      ~__shared_ptr() = default;
   d5dee:	a803      	add	r0, sp, #12
	_M_pi = __tmp;
   d5df0:	9303      	str	r3, [sp, #12]
      ~__shared_ptr() = default;
   d5df2:	f7fe f9c2 	bl	d417a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5df6:	a801      	add	r0, sp, #4
   d5df8:	f7fe f9bf 	bl	d417a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   d5dfc:	f8d8 1000 	ldr.w	r1, [r8]
   d5e00:	b919      	cbnz	r1, d5e0a <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8e>
        SPARK_ASSERT(false);
   d5e02:	4a04      	ldr	r2, [pc, #16]	; (d5e14 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x98>)
   d5e04:	200a      	movs	r0, #10
   d5e06:	f7fe ff23 	bl	d4c50 <panic_>
}
   d5e0a:	b005      	add	sp, #20
   d5e0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5e10:	000d94e0 	.word	0x000d94e0
   d5e14:	000d4af1 	.word	0x000d4af1

000d5e18 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d5e18:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d5e1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5e1c:	4606      	mov	r6, r0
   d5e1e:	460c      	mov	r4, r1
   d5e20:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d5e22:	d918      	bls.n	d5e56 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x3e>
   d5e24:	4290      	cmp	r0, r2
   d5e26:	d217      	bcs.n	d5e58 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
            --end;
   d5e28:	f1a2 0508 	sub.w	r5, r2, #8
            dest += end - p - 1;
   d5e2c:	f1a1 0708 	sub.w	r7, r1, #8
   d5e30:	1a69      	subs	r1, r5, r1
   d5e32:	1844      	adds	r4, r0, r1
            for (; end != p; --end, --dest) {
   d5e34:	42af      	cmp	r7, r5
   d5e36:	d020      	beq.n	d5e7a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x62>
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
   d5e38:	1d2e      	adds	r6, r5, #4
                new(dest) T(std::move(*end));
   d5e3a:	b134      	cbz	r4, d5e4a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x32>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5e3c:	4620      	mov	r0, r4
   d5e3e:	682b      	ldr	r3, [r5, #0]
   d5e40:	f840 3b04 	str.w	r3, [r0], #4
   d5e44:	4631      	mov	r1, r6
   d5e46:	f7ff ff1e 	bl	d5c86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      ~__shared_ptr() = default;
   d5e4a:	4630      	mov	r0, r6
   d5e4c:	f7fe f995 	bl	d417a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d5e50:	3d08      	subs	r5, #8
   d5e52:	3c08      	subs	r4, #8
   d5e54:	e7ee      	b.n	d5e34 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d5e56:	d010      	beq.n	d5e7a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x62>
            for (; p != end; ++p, ++dest) {
   d5e58:	42ac      	cmp	r4, r5
   d5e5a:	d00e      	beq.n	d5e7a <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x62>
   d5e5c:	1d27      	adds	r7, r4, #4
                new(dest) T(std::move(*p));
   d5e5e:	b136      	cbz	r6, d5e6e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x56>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5e60:	4630      	mov	r0, r6
   d5e62:	6823      	ldr	r3, [r4, #0]
   d5e64:	f840 3b04 	str.w	r3, [r0], #4
   d5e68:	4639      	mov	r1, r7
   d5e6a:	f7ff ff0c 	bl	d5c86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      ~__shared_ptr() = default;
   d5e6e:	4638      	mov	r0, r7
   d5e70:	f7fe f983 	bl	d417a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d5e74:	3408      	adds	r4, #8
   d5e76:	3608      	adds	r6, #8
   d5e78:	e7ee      	b.n	d5e58 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x40>
    }
   d5e7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5e7c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d5e80:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d5e84:	4605      	mov	r5, r0
   d5e86:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d5e88:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
        for (; p != end; ++p) {
   d5e8c:	42a7      	cmp	r7, r4
   d5e8e:	d01a      	beq.n	d5ec6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4a>
            if (*p == value) {
   d5e90:	4641      	mov	r1, r8
   d5e92:	4620      	mov	r0, r4
   d5e94:	f7ff fde1 	bl	d5a5a <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d5e98:	4606      	mov	r6, r0
   d5e9a:	b908      	cbnz	r0, d5ea0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>
        for (; p != end; ++p) {
   d5e9c:	3408      	adds	r4, #8
   d5e9e:	e7f5      	b.n	d5e8c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
    if (!p) {
   d5ea0:	b19c      	cbz	r4, d5eca <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x4e>
   d5ea2:	1d20      	adds	r0, r4, #4
   d5ea4:	f7fe f969 	bl	d417a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   d5ea8:	e9d5 3200 	ldrd	r3, r2, [r5]
   d5eac:	f104 0108 	add.w	r1, r4, #8
   d5eb0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d5eb4:	4620      	mov	r0, r4
   d5eb6:	f7ff ffaf 	bl	d5e18 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d5eba:	686b      	ldr	r3, [r5, #4]
   d5ebc:	3b01      	subs	r3, #1
   d5ebe:	606b      	str	r3, [r5, #4]
}
   d5ec0:	4630      	mov	r0, r6
   d5ec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return false;
   d5ec6:	2600      	movs	r6, #0
   d5ec8:	e7fa      	b.n	d5ec0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x44>
   d5eca:	4626      	mov	r6, r4
   d5ecc:	e7f8      	b.n	d5ec0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x44>

000d5ece <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d5ece:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5ed0:	4604      	mov	r4, r0
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5ed2:	f851 3b04 	ldr.w	r3, [r1], #4
    return insert(size_, std::move(value));
   d5ed6:	6847      	ldr	r7, [r0, #4]
   d5ed8:	9300      	str	r3, [sp, #0]
   d5eda:	a801      	add	r0, sp, #4
   d5edc:	f7ff fed3 	bl	d5c86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d5ee0:	e9d4 6301 	ldrd	r6, r3, [r4, #4]
   d5ee4:	429e      	cmp	r6, r3
   d5ee6:	db12      	blt.n	d5f0e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x40>
   d5ee8:	3601      	adds	r6, #1
        if (n > 0) {
   d5eea:	2e00      	cmp	r6, #0
   d5eec:	dd2c      	ble.n	d5f48 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x7a>
    return ::malloc(size);
   d5eee:	00f0      	lsls	r0, r6, #3
   d5ef0:	f7fe ff72 	bl	d4dd8 <malloc>
            if (!d) {
   d5ef4:	4605      	mov	r5, r0
   d5ef6:	b308      	cbz	r0, d5f3c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
            move(d, data_, data_ + size_);
   d5ef8:	e9d4 1200 	ldrd	r1, r2, [r4]
   d5efc:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d5f00:	f7ff ff8a 	bl	d5e18 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d5f04:	6820      	ldr	r0, [r4, #0]
   d5f06:	f7fe ff6f 	bl	d4de8 <free>
        data_ = d;
   d5f0a:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d5f0c:	60a6      	str	r6, [r4, #8]
    T* const p = data_ + i;
   d5f0e:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d5f10:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d5f12:	eb06 05c7 	add.w	r5, r6, r7, lsl #3
    move(p + 1, p, data_ + size_);
   d5f16:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
   d5f1a:	4629      	mov	r1, r5
   d5f1c:	f105 0008 	add.w	r0, r5, #8
   d5f20:	f7ff ff7a 	bl	d5e18 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d5f24:	b135      	cbz	r5, d5f34 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x66>
   d5f26:	9b00      	ldr	r3, [sp, #0]
   d5f28:	f846 3037 	str.w	r3, [r6, r7, lsl #3]
   d5f2c:	a901      	add	r1, sp, #4
   d5f2e:	1d28      	adds	r0, r5, #4
   d5f30:	f7ff fea9 	bl	d5c86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    ++size_;
   d5f34:	6863      	ldr	r3, [r4, #4]
   d5f36:	3301      	adds	r3, #1
   d5f38:	6063      	str	r3, [r4, #4]
    return true;
   d5f3a:	2501      	movs	r5, #1
      ~__shared_ptr() = default;
   d5f3c:	a801      	add	r0, sp, #4
   d5f3e:	f7fe f91c 	bl	d417a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5f42:	4628      	mov	r0, r5
   d5f44:	b003      	add	sp, #12
   d5f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   d5f48:	2500      	movs	r5, #0
   d5f4a:	e7db      	b.n	d5f04 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x36>

000d5f4c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d5f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5f50:	4604      	mov	r4, r0
   d5f52:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   d5f54:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d5f56:	460d      	mov	r5, r1
        WiringBleLock lk;
   d5f58:	f7ff f85e 	bl	d5018 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d5f5c:	6823      	ldr	r3, [r4, #0]
   d5f5e:	2b03      	cmp	r3, #3
   d5f60:	d007      	beq.n	d5f72 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x26>
   d5f62:	2b04      	cmp	r3, #4
   d5f64:	d048      	beq.n	d5ff8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xac>
        WiringBleLock lk;
   d5f66:	a803      	add	r0, sp, #12
   d5f68:	f7ff f864 	bl	d5034 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   d5f6c:	b00e      	add	sp, #56	; 0x38
   d5f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                BlePeerDevice peer;
   d5f72:	a804      	add	r0, sp, #16
   d5f74:	f7ff fd0a 	bl	d598c <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d5f78:	9b04      	ldr	r3, [sp, #16]
   d5f7a:	8922      	ldrh	r2, [r4, #8]
   d5f7c:	801a      	strh	r2, [r3, #0]
    address_ = addr;
   d5f7e:	6862      	ldr	r2, [r4, #4]
        return impl_.get();
   d5f80:	9904      	ldr	r1, [sp, #16]
   d5f82:	f852 3f08 	ldr.w	r3, [r2, #8]!
   d5f86:	f8c1 3002 	str.w	r3, [r1, #2]
   d5f8a:	6853      	ldr	r3, [r2, #4]
   d5f8c:	f8c1 3006 	str.w	r3, [r1, #6]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5f90:	a807      	add	r0, sp, #28
   d5f92:	9b04      	ldr	r3, [sp, #16]
   d5f94:	9306      	str	r3, [sp, #24]
   d5f96:	a905      	add	r1, sp, #20
   d5f98:	f7ff fe75 	bl	d5c86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
                if (!impl->peers_.append(peer)) {
   d5f9c:	a906      	add	r1, sp, #24
   d5f9e:	f105 0018 	add.w	r0, r5, #24
   d5fa2:	f7ff ff94 	bl	d5ece <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d5fa6:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   d5fa8:	a807      	add	r0, sp, #28
   d5faa:	f7fe f8e6 	bl	d417a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5fae:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d5fb0:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   d5fb2:	b98c      	cbnz	r4, d5fd8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x8c>
                    LOG(ERROR, "Failed to append peer Central device.");
   d5fb4:	4b33      	ldr	r3, [pc, #204]	; (d6084 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x138>)
   d5fb6:	4934      	ldr	r1, [pc, #208]	; (d6088 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5fb8:	9300      	str	r3, [sp, #0]
   d5fba:	2032      	movs	r0, #50	; 0x32
   d5fbc:	4623      	mov	r3, r4
   d5fbe:	aa06      	add	r2, sp, #24
   d5fc0:	9407      	str	r4, [sp, #28]
   d5fc2:	f7fe fe4d 	bl	d4c60 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d5fc6:	9b04      	ldr	r3, [sp, #16]
   d5fc8:	4621      	mov	r1, r4
   d5fca:	8818      	ldrh	r0, [r3, #0]
   d5fcc:	f7fe fcdc 	bl	d4988 <hal_ble_gap_disconnect>
   d5fd0:	a805      	add	r0, sp, #20
   d5fd2:	f7fe f8d2 	bl	d417a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5fd6:	e7c6      	b.n	d5f66 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a>
                LOG(TRACE, "Connected by Central device.");
   d5fd8:	4a2c      	ldr	r2, [pc, #176]	; (d608c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x140>)
   d5fda:	9200      	str	r2, [sp, #0]
   d5fdc:	2300      	movs	r3, #0
   d5fde:	492a      	ldr	r1, [pc, #168]	; (d6088 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d5fe0:	9307      	str	r3, [sp, #28]
   d5fe2:	aa06      	add	r2, sp, #24
   d5fe4:	2001      	movs	r0, #1
   d5fe6:	f7fe fe3b 	bl	d4c60 <log_message>
                if (impl->connectedCb_) {
   d5fea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d5fec:	2b00      	cmp	r3, #0
   d5fee:	d0ef      	beq.n	d5fd0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x84>
                    impl->connectedCb_(peer, impl->connectedContext_);
   d5ff0:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   d5ff2:	a804      	add	r0, sp, #16
   d5ff4:	4798      	blx	r3
   d5ff6:	e7eb      	b.n	d5fd0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x84>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d5ff8:	8921      	ldrh	r1, [r4, #8]
   d5ffa:	4628      	mov	r0, r5
   d5ffc:	f7ff fb40 	bl	d5680 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d6000:	4606      	mov	r6, r0
   d6002:	2800      	cmp	r0, #0
   d6004:	d0af      	beq.n	d5f66 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a>
   d6006:	6804      	ldr	r4, [r0, #0]
    return data_ + size_;
   d6008:	e9d4 3106 	ldrd	r3, r1, [r4, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d600c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d6010:	8022      	strh	r2, [r4, #0]
   d6012:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics_) {
   d6016:	4299      	cmp	r1, r3
   d6018:	d003      	beq.n	d6022 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xd6>
        return impl_.get();
   d601a:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d601e:	8042      	strh	r2, [r0, #2]
        for (auto& characteristic : characteristics_) {
   d6020:	e7f9      	b.n	d6016 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
    destruct(data_, data_ + size_);
   d6022:	e9d4 7303 	ldrd	r7, r3, [r4, #12]
   d6026:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   d602a:	45b8      	cmp	r8, r7
   d602c:	d004      	beq.n	d6038 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xec>
   d602e:	1d38      	adds	r0, r7, #4
   d6030:	f7fe f8a3 	bl	d417a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6034:	3708      	adds	r7, #8
   d6036:	e7f8      	b.n	d602a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xde>
    size_ = 0;
   d6038:	2300      	movs	r3, #0
   d603a:	6123      	str	r3, [r4, #16]
    destruct(data_, data_ + size_);
   d603c:	e9d4 7306 	ldrd	r7, r3, [r4, #24]
   d6040:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   d6044:	45b8      	cmp	r8, r7
   d6046:	d004      	beq.n	d6052 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x106>
   d6048:	1d38      	adds	r0, r7, #4
   d604a:	f7fe f896 	bl	d417a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d604e:	3708      	adds	r7, #8
   d6050:	e7f8      	b.n	d6044 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf8>
    size_ = 0;
   d6052:	2300      	movs	r3, #0
   d6054:	61e3      	str	r3, [r4, #28]
        servicesDiscovered_ = false;
   d6056:	8163      	strh	r3, [r4, #10]
                    if (impl->disconnectedCb_) {
   d6058:	6aab      	ldr	r3, [r5, #40]	; 0x28
   d605a:	b113      	cbz	r3, d6062 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x116>
                        impl->disconnectedCb_(*peer, impl->disconnectedContext_);
   d605c:	6b29      	ldr	r1, [r5, #48]	; 0x30
   d605e:	4630      	mov	r0, r6
   d6060:	4798      	blx	r3
                    LOG(TRACE, "Disconnected by remote device.");
   d6062:	2300      	movs	r3, #0
   d6064:	2220      	movs	r2, #32
   d6066:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d606a:	4a09      	ldr	r2, [pc, #36]	; (d6090 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x144>)
   d606c:	9200      	str	r2, [sp, #0]
   d606e:	4906      	ldr	r1, [pc, #24]	; (d6088 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13c>)
   d6070:	aa06      	add	r2, sp, #24
   d6072:	2001      	movs	r0, #1
   d6074:	f7fe fdf4 	bl	d4c60 <log_message>
                    impl->peers_.removeOne(*peer);
   d6078:	4631      	mov	r1, r6
   d607a:	f105 0018 	add.w	r0, r5, #24
   d607e:	f7ff fefd 	bl	d5e7c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
   d6082:	e770      	b.n	d5f66 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a>
   d6084:	000d939a 	.word	0x000d939a
   d6088:	000d9338 	.word	0x000d9338
   d608c:	000d93c0 	.word	0x000d93c0
   d6090:	000d93dd 	.word	0x000d93dd

000d6094 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   d6094:	b538      	push	{r3, r4, r5, lr}
        if (n > 0) {
   d6096:	1e0d      	subs	r5, r1, #0
    bool realloc(int n) {
   d6098:	4604      	mov	r4, r0
   d609a:	6800      	ldr	r0, [r0, #0]
        if (n > 0) {
   d609c:	dd05      	ble.n	d60aa <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x16>
    return ::realloc(ptr, size);
   d609e:	2154      	movs	r1, #84	; 0x54
   d60a0:	4369      	muls	r1, r5
   d60a2:	f7fe fea9 	bl	d4df8 <realloc>
            if (!d) {
   d60a6:	b918      	cbnz	r0, d60b0 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1c>
    }
   d60a8:	bd38      	pop	{r3, r4, r5, pc}
    ::free(ptr);
   d60aa:	f7fe fe9d 	bl	d4de8 <free>
        T* d = nullptr;
   d60ae:	2000      	movs	r0, #0
        data_ = d;
   d60b0:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d60b2:	60a5      	str	r5, [r4, #8]
        return true;
   d60b4:	2001      	movs	r0, #1
   d60b6:	e7f7      	b.n	d60a8 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x14>

000d60b8 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv>:
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d60b8:	b5f0      	push	{r4, r5, r6, r7, lr}
        BleScanResult result = {};
   d60ba:	2654      	movs	r6, #84	; 0x54
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d60bc:	b0c1      	sub	sp, #260	; 0x104
   d60be:	4605      	mov	r5, r0
        BleScanResult result = {};
   d60c0:	4632      	mov	r2, r6
    static void onScanResultCallback(const hal_ble_scan_result_evt_t* event, void* context) {
   d60c2:	460c      	mov	r4, r1
        BleScanResult result = {};
   d60c4:	a801      	add	r0, sp, #4
   d60c6:	2100      	movs	r1, #0
   d60c8:	f002 ff04 	bl	d8ed4 <memset>
   d60cc:	a801      	add	r0, sp, #4
   d60ce:	f7fe ffbd 	bl	d504c <_ZN8particle10BleAddressC1Ev>
   d60d2:	a803      	add	r0, sp, #12
   d60d4:	f7ff f98d 	bl	d53f2 <_ZN8particle18BleAdvertisingDataC1Ev>
   d60d8:	a80c      	add	r0, sp, #48	; 0x30
   d60da:	f7ff f98a 	bl	d53f2 <_ZN8particle18BleAdvertisingDataC1Ev>
    address_ = addr;
   d60de:	462a      	mov	r2, r5
   d60e0:	ab01      	add	r3, sp, #4
   d60e2:	f852 0f10 	ldr.w	r0, [r2, #16]!
   d60e6:	6851      	ldr	r1, [r2, #4]
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d60e8:	89ea      	ldrh	r2, [r5, #14]
    address_ = addr;
   d60ea:	c303      	stmia	r3!, {r0, r1}
        result.rssi = event->rssi;
   d60ec:	782b      	ldrb	r3, [r5, #0]
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d60ee:	68a9      	ldr	r1, [r5, #8]
        result.rssi = event->rssi;
   d60f0:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
        result.scanResponse.set(event->sr_data, event->sr_data_len);
   d60f4:	a80c      	add	r0, sp, #48	; 0x30
   d60f6:	f7ff f925 	bl	d5344 <_ZN8particle18BleAdvertisingData3setEPKhj>
        result.advertisingData.set(event->adv_data, event->adv_data_len);
   d60fa:	89aa      	ldrh	r2, [r5, #12]
   d60fc:	6869      	ldr	r1, [r5, #4]
   d60fe:	a803      	add	r0, sp, #12
   d6100:	f7ff f920 	bl	d5344 <_ZN8particle18BleAdvertisingData3setEPKhj>
        if (delegator->callback_) {
   d6104:	69a5      	ldr	r5, [r4, #24]
   d6106:	b135      	cbz	r5, d6116 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x5e>
            delegator->callback_(&result, delegator->context_);
   d6108:	69e1      	ldr	r1, [r4, #28]
   d610a:	a801      	add	r0, sp, #4
   d610c:	47a8      	blx	r5
            delegator->foundCount_++;
   d610e:	6963      	ldr	r3, [r4, #20]
   d6110:	3301      	adds	r3, #1
   d6112:	6163      	str	r3, [r4, #20]
   d6114:	e014      	b.n	d6140 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x88>
        if (delegator->resultsPtr_) {
   d6116:	68e0      	ldr	r0, [r4, #12]
   d6118:	b1a0      	cbz	r0, d6144 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x8c>
            if (delegator->foundCount_ < delegator->targetCount_) {
   d611a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   d611e:	4293      	cmp	r3, r2
   d6120:	d20e      	bcs.n	d6140 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x88>
                delegator->resultsPtr_[delegator->foundCount_++] = result;
   d6122:	1c5a      	adds	r2, r3, #1
   d6124:	6162      	str	r2, [r4, #20]
   d6126:	fb06 0003 	mla	r0, r6, r3, r0
   d612a:	2251      	movs	r2, #81	; 0x51
   d612c:	a901      	add	r1, sp, #4
   d612e:	f002 fea9 	bl	d8e84 <memcpy>
                if (delegator->foundCount_ >= delegator->targetCount_) {
   d6132:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
   d6136:	429a      	cmp	r2, r3
   d6138:	d302      	bcc.n	d6140 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x88>
                    hal_ble_gap_stop_scan(nullptr);
   d613a:	4628      	mov	r0, r5
   d613c:	f7fe fc1a 	bl	d4974 <hal_ble_gap_stop_scan>
    }
   d6140:	b041      	add	sp, #260	; 0x104
   d6142:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (delegator->resultsVector_.append(result)) {
   d6144:	4632      	mov	r2, r6
   d6146:	a901      	add	r1, sp, #4
   d6148:	a816      	add	r0, sp, #88	; 0x58
   d614a:	f002 fe9b 	bl	d8e84 <memcpy>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d614e:	4632      	mov	r2, r6
   d6150:	a916      	add	r1, sp, #88	; 0x58
   d6152:	a82b      	add	r0, sp, #172	; 0xac
    return insert(size_, std::move(value));
   d6154:	6865      	ldr	r5, [r4, #4]
   d6156:	f002 fe95 	bl	d8e84 <memcpy>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d615a:	68a3      	ldr	r3, [r4, #8]
   d615c:	429d      	cmp	r5, r3
   d615e:	db05      	blt.n	d616c <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0xb4>
   d6160:	1c69      	adds	r1, r5, #1
   d6162:	4620      	mov	r0, r4
   d6164:	f7ff ff96 	bl	d6094 <_ZN5spark6VectorIN8particle13BleScanResultENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d6168:	2800      	cmp	r0, #0
   d616a:	d0e9      	beq.n	d6140 <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x88>
    T* const p = data_ + i;
   d616c:	2754      	movs	r7, #84	; 0x54
   d616e:	6826      	ldr	r6, [r4, #0]
    move(p + 1, p, data_ + size_);
   d6170:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d6172:	437d      	muls	r5, r7
   d6174:	442e      	add	r6, r5
    move(p + 1, p, data_ + size_);
   d6176:	437a      	muls	r2, r7
        ::memmove(dest, p, (end - p) * sizeof(T));
   d6178:	1b52      	subs	r2, r2, r5
   d617a:	4631      	mov	r1, r6
   d617c:	19f0      	adds	r0, r6, r7
   d617e:	f002 fe8f 	bl	d8ea0 <memmove>
    new(p) T(std::move(value));
   d6182:	463a      	mov	r2, r7
   d6184:	a92b      	add	r1, sp, #172	; 0xac
   d6186:	4630      	mov	r0, r6
   d6188:	f002 fe7c 	bl	d8e84 <memcpy>
    ++size_;
   d618c:	6863      	ldr	r3, [r4, #4]
   d618e:	3301      	adds	r3, #1
   d6190:	6063      	str	r3, [r4, #4]
   d6192:	e7bc      	b.n	d610e <_ZN8particle16BleScanDelegator20onScanResultCallbackEPK25hal_ble_scan_result_evt_tPv+0x56>

000d6194 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d6194:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d6196:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6198:	4604      	mov	r4, r0
   d619a:	460d      	mov	r5, r1
   d619c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d619e:	d914      	bls.n	d61ca <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d61a0:	4290      	cmp	r0, r2
   d61a2:	d213      	bcs.n	d61cc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d61a4:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d61a8:	1a75      	subs	r5, r6, r1
   d61aa:	f1a1 0708 	sub.w	r7, r1, #8
   d61ae:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d61b0:	42b7      	cmp	r7, r6
   d61b2:	d018      	beq.n	d61e6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d61b4:	b11c      	cbz	r4, d61be <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d61b6:	4631      	mov	r1, r6
   d61b8:	4620      	mov	r0, r4
   d61ba:	f7ff fd79 	bl	d5cb0 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d61be:	1d30      	adds	r0, r6, #4
   d61c0:	f7fd ffdb 	bl	d417a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d61c4:	3e08      	subs	r6, #8
   d61c6:	3c08      	subs	r4, #8
   d61c8:	e7f2      	b.n	d61b0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d61ca:	d00c      	beq.n	d61e6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d61cc:	42b5      	cmp	r5, r6
   d61ce:	d00a      	beq.n	d61e6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d61d0:	b11c      	cbz	r4, d61da <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d61d2:	4629      	mov	r1, r5
   d61d4:	4620      	mov	r0, r4
   d61d6:	f7ff fd6b 	bl	d5cb0 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d61da:	1d28      	adds	r0, r5, #4
   d61dc:	f7fd ffcd 	bl	d417a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d61e0:	3508      	adds	r5, #8
   d61e2:	3408      	adds	r4, #8
   d61e4:	e7f2      	b.n	d61cc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d61e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d61e8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   d61e8:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d61ea:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d61ec:	4605      	mov	r5, r0
        if (n > 0) {
   d61ee:	dd11      	ble.n	d6214 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   d61f0:	00f0      	lsls	r0, r6, #3
   d61f2:	f7fe fdf1 	bl	d4dd8 <malloc>
            if (!d) {
   d61f6:	4604      	mov	r4, r0
   d61f8:	b158      	cbz	r0, d6212 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d61fa:	e9d5 1200 	ldrd	r1, r2, [r5]
   d61fe:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d6202:	f7ff ffc7 	bl	d6194 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d6206:	6828      	ldr	r0, [r5, #0]
   d6208:	f7fe fdee 	bl	d4de8 <free>
        data_ = d;
   d620c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d620e:	60ae      	str	r6, [r5, #8]
        return true;
   d6210:	2001      	movs	r0, #1
    }
   d6212:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d6214:	2400      	movs	r4, #0
   d6216:	e7f6      	b.n	d6206 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000d6218 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d6218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d621c:	2300      	movs	r3, #0
   d621e:	e9c0 3300 	strd	r3, r3, [r0]
   d6222:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d6224:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d6226:	6849      	ldr	r1, [r1, #4]
   d6228:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d622a:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d622c:	dd13      	ble.n	d6256 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   d622e:	f7ff ffdb 	bl	d61e8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d6232:	b180      	cbz	r0, d6256 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d6234:	e9d5 6300 	ldrd	r6, r3, [r5]
   d6238:	6827      	ldr	r7, [r4, #0]
   d623a:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   d623e:	45b0      	cmp	r8, r6
   d6240:	d007      	beq.n	d6252 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   d6242:	b11f      	cbz	r7, d624c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   d6244:	4631      	mov	r1, r6
   d6246:	4638      	mov	r0, r7
   d6248:	f7ff fd32 	bl	d5cb0 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        for (; it != end; ++it, ++dest) {
   d624c:	3608      	adds	r6, #8
   d624e:	3708      	adds	r7, #8
   d6250:	e7f5      	b.n	d623e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   d6252:	686b      	ldr	r3, [r5, #4]
   d6254:	6063      	str	r3, [r4, #4]
}
   d6256:	4620      	mov	r0, r4
   d6258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d625c <_ZN8particle13BlePeerDevice19discoverAllServicesEv>:
Vector<BleService> BlePeerDevice::discoverAllServices() {
   d625c:	b538      	push	{r3, r4, r5, lr}
    if (!impl()->servicesDiscovered()) {
   d625e:	680b      	ldr	r3, [r1, #0]
   d6260:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleService> BlePeerDevice::discoverAllServices() {
   d6262:	4605      	mov	r5, r0
   d6264:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   d6266:	b933      	cbnz	r3, d6276 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
        if (discovery.discoverAllServices(*this) == SYSTEM_ERROR_NONE) {
   d6268:	4608      	mov	r0, r1
   d626a:	f7fe fe85 	bl	d4f78 <_ZN8particle21BleDiscoveryDelegator19discoverAllServicesERNS_13BlePeerDeviceE.isra.0>
   d626e:	b910      	cbnz	r0, d6276 <_ZN8particle13BlePeerDevice19discoverAllServicesEv+0x1a>
        return impl_.get();
   d6270:	6823      	ldr	r3, [r4, #0]
            impl()->servicesDiscovered() = true;
   d6272:	2201      	movs	r2, #1
   d6274:	729a      	strb	r2, [r3, #10]
        return services_;
   d6276:	6821      	ldr	r1, [r4, #0]
    return impl()->services();
   d6278:	4628      	mov	r0, r5
   d627a:	310c      	adds	r1, #12
   d627c:	f7ff ffcc 	bl	d6218 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEEC1ERKS4_>
}
   d6280:	4628      	mov	r0, r5
   d6282:	bd38      	pop	{r3, r4, r5, pc}

000d6284 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d6284:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6286:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d6288:	6845      	ldr	r5, [r0, #4]
   d628a:	4668      	mov	r0, sp
   d628c:	f7ff fd10 	bl	d5cb0 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6290:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   d6294:	4299      	cmp	r1, r3
   d6296:	da10      	bge.n	d62ba <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   d6298:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d629a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d629c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d62a0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d62a4:	4629      	mov	r1, r5
   d62a6:	f105 0008 	add.w	r0, r5, #8
   d62aa:	f7ff ff73 	bl	d6194 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d62ae:	b98d      	cbnz	r5, d62d4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   d62b0:	6863      	ldr	r3, [r4, #4]
   d62b2:	3301      	adds	r3, #1
   d62b4:	6063      	str	r3, [r4, #4]
    return true;
   d62b6:	2601      	movs	r6, #1
   d62b8:	e006      	b.n	d62c8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d62ba:	3101      	adds	r1, #1
   d62bc:	4620      	mov	r0, r4
   d62be:	f7ff ff93 	bl	d61e8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d62c2:	4606      	mov	r6, r0
   d62c4:	2800      	cmp	r0, #0
   d62c6:	d1e7      	bne.n	d6298 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   d62c8:	a801      	add	r0, sp, #4
   d62ca:	f7fd ff56 	bl	d417a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d62ce:	4630      	mov	r0, r6
   d62d0:	b002      	add	sp, #8
   d62d2:	bd70      	pop	{r4, r5, r6, pc}
   d62d4:	4669      	mov	r1, sp
   d62d6:	4628      	mov	r0, r5
   d62d8:	f7ff fcea 	bl	d5cb0 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d62dc:	e7e8      	b.n	d62b0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>
	...

000d62e0 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv>:
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   d62e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
                LOG(ERROR, "Failed to append discovered service.");
   d62e4:	f8df 8080 	ldr.w	r8, [pc, #128]	; d6368 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x88>
   d62e8:	f8df 9080 	ldr.w	r9, [pc, #128]	; d636c <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x8c>
    static void onServicesDiscovered(const hal_ble_svc_discovered_evt_t* event, void* context) {
   d62ec:	b08d      	sub	sp, #52	; 0x34
   d62ee:	4604      	mov	r4, r0
   d62f0:	460f      	mov	r7, r1
        for (size_t i = 0; i < event->count; i++) {
   d62f2:	2600      	movs	r6, #0
   d62f4:	6823      	ldr	r3, [r4, #0]
   d62f6:	42b3      	cmp	r3, r6
   d62f8:	d933      	bls.n	d6362 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x82>
            BleService service;
   d62fa:	a802      	add	r0, sp, #8
   d62fc:	f7ff fa9c 	bl	d5838 <_ZN8particle10BleServiceC1Ev>
        return uuid_;
   d6300:	251c      	movs	r5, #28
            service.impl()->UUID() = event->services[i].uuid;
   d6302:	6861      	ldr	r1, [r4, #4]
   d6304:	9802      	ldr	r0, [sp, #8]
   d6306:	4375      	muls	r5, r6
   d6308:	4429      	add	r1, r5
   d630a:	3104      	adds	r1, #4
   d630c:	f7fe ff87 	bl	d521e <_ZN8particle7BleUuidaSERK14hal_ble_uuid_t>
            service.impl()->startHandle() = event->services[i].start_handle;
   d6310:	6863      	ldr	r3, [r4, #4]
        return impl_.get();
   d6312:	9a02      	ldr	r2, [sp, #8]
   d6314:	442b      	add	r3, r5
   d6316:	a902      	add	r1, sp, #8
   d6318:	8b1b      	ldrh	r3, [r3, #24]
   d631a:	8293      	strh	r3, [r2, #20]
            service.impl()->endHandle() = event->services[i].end_handle;
   d631c:	6863      	ldr	r3, [r4, #4]
   d631e:	441d      	add	r5, r3
   d6320:	8b6b      	ldrh	r3, [r5, #26]
   d6322:	82d3      	strh	r3, [r2, #22]
        return services_;
   d6324:	6838      	ldr	r0, [r7, #0]
   d6326:	f100 050c 	add.w	r5, r0, #12
   d632a:	a804      	add	r0, sp, #16
   d632c:	f7ff fcc0 	bl	d5cb0 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
            if (!peer->impl()->services().append(service)) {
   d6330:	4628      	mov	r0, r5
   d6332:	a904      	add	r1, sp, #16
   d6334:	f7ff ffa6 	bl	d6284 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d6338:	4605      	mov	r5, r0
   d633a:	a805      	add	r0, sp, #20
   d633c:	f7fd ff1d 	bl	d417a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6340:	b955      	cbnz	r5, d6358 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x78>
                LOG(ERROR, "Failed to append discovered service.");
   d6342:	2320      	movs	r3, #32
   d6344:	e9cd 3504 	strd	r3, r5, [sp, #16]
   d6348:	f8cd 8000 	str.w	r8, [sp]
   d634c:	462b      	mov	r3, r5
   d634e:	aa04      	add	r2, sp, #16
   d6350:	4649      	mov	r1, r9
   d6352:	2032      	movs	r0, #50	; 0x32
   d6354:	f7fe fc84 	bl	d4c60 <log_message>
   d6358:	a803      	add	r0, sp, #12
   d635a:	f7fd ff0e 	bl	d417a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   d635e:	3601      	adds	r6, #1
   d6360:	e7c8      	b.n	d62f4 <_ZN8particle21BleDiscoveryDelegator20onServicesDiscoveredEPK28hal_ble_svc_discovered_evt_tPv+0x14>
    }
   d6362:	b00d      	add	sp, #52	; 0x34
   d6364:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6368:	000d93fc 	.word	0x000d93fc
   d636c:	000d9338 	.word	0x000d9338

000d6370 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d6370:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d6372:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6374:	4604      	mov	r4, r0
   d6376:	460d      	mov	r5, r1
   d6378:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d637a:	d914      	bls.n	d63a6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d637c:	4290      	cmp	r0, r2
   d637e:	d213      	bcs.n	d63a8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d6380:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d6384:	1a75      	subs	r5, r6, r1
   d6386:	f1a1 0708 	sub.w	r7, r1, #8
   d638a:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d638c:	42b7      	cmp	r7, r6
   d638e:	d018      	beq.n	d63c2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d6390:	b11c      	cbz	r4, d639a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d6392:	4631      	mov	r1, r6
   d6394:	4620      	mov	r0, r4
   d6396:	f7ff fc7d 	bl	d5c94 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d639a:	1d30      	adds	r0, r6, #4
   d639c:	f7fd feed 	bl	d417a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d63a0:	3e08      	subs	r6, #8
   d63a2:	3c08      	subs	r4, #8
   d63a4:	e7f2      	b.n	d638c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d63a6:	d00c      	beq.n	d63c2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d63a8:	42b5      	cmp	r5, r6
   d63aa:	d00a      	beq.n	d63c2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d63ac:	b11c      	cbz	r4, d63b6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d63ae:	4629      	mov	r1, r5
   d63b0:	4620      	mov	r0, r4
   d63b2:	f7ff fc6f 	bl	d5c94 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d63b6:	1d28      	adds	r0, r5, #4
   d63b8:	f7fd fedf 	bl	d417a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d63bc:	3508      	adds	r5, #8
   d63be:	3408      	adds	r4, #8
   d63c0:	e7f2      	b.n	d63a8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d63c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d63c4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   d63c4:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d63c6:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d63c8:	4605      	mov	r5, r0
        if (n > 0) {
   d63ca:	dd11      	ble.n	d63f0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   d63cc:	00f0      	lsls	r0, r6, #3
   d63ce:	f7fe fd03 	bl	d4dd8 <malloc>
            if (!d) {
   d63d2:	4604      	mov	r4, r0
   d63d4:	b158      	cbz	r0, d63ee <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d63d6:	e9d5 1200 	ldrd	r1, r2, [r5]
   d63da:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d63de:	f7ff ffc7 	bl	d6370 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d63e2:	6828      	ldr	r0, [r5, #0]
   d63e4:	f7fe fd00 	bl	d4de8 <free>
        data_ = d;
   d63e8:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d63ea:	60ae      	str	r6, [r5, #8]
        return true;
   d63ec:	2001      	movs	r0, #1
    }
   d63ee:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d63f0:	2400      	movs	r4, #0
   d63f2:	e7f6      	b.n	d63e2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000d63f4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d63f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d63f8:	2300      	movs	r3, #0
   d63fa:	e9c0 3300 	strd	r3, r3, [r0]
   d63fe:	6083      	str	r3, [r0, #8]
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d6400:	460d      	mov	r5, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d6402:	6849      	ldr	r1, [r1, #4]
   d6404:	4299      	cmp	r1, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d6406:	4604      	mov	r4, r0
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d6408:	dd13      	ble.n	d6432 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
   d640a:	f7ff ffdb 	bl	d63c4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d640e:	b180      	cbz	r0, d6432 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3e>
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d6410:	e9d5 6300 	ldrd	r6, r3, [r5]
   d6414:	6827      	ldr	r7, [r4, #0]
   d6416:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
        for (; it != end; ++it, ++dest) {
   d641a:	45b0      	cmp	r8, r6
   d641c:	d007      	beq.n	d642e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x3a>
            new(dest) T(*it);
   d641e:	b11f      	cbz	r7, d6428 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x34>
   d6420:	4631      	mov	r1, r6
   d6422:	4638      	mov	r0, r7
   d6424:	f7ff fc36 	bl	d5c94 <_ZN8particle17BleCharacteristicC1ERKS0_>
        for (; it != end; ++it, ++dest) {
   d6428:	3608      	adds	r6, #8
   d642a:	3708      	adds	r7, #8
   d642c:	e7f5      	b.n	d641a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_+0x26>
        size_ = vector.size_;
   d642e:	686b      	ldr	r3, [r5, #4]
   d6430:	6063      	str	r3, [r4, #4]
}
   d6432:	4620      	mov	r0, r4
   d6434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d6438 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>:
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   d6438:	b530      	push	{r4, r5, lr}
    if (!impl()->servicesDiscovered()) {
   d643a:	680b      	ldr	r3, [r1, #0]
   d643c:	7a9b      	ldrb	r3, [r3, #10]
Vector<BleCharacteristic> BlePeerDevice::discoverAllCharacteristics() {
   d643e:	b085      	sub	sp, #20
   d6440:	4605      	mov	r5, r0
   d6442:	460c      	mov	r4, r1
    if (!impl()->servicesDiscovered()) {
   d6444:	b92b      	cbnz	r3, d6452 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x1a>
        discoverAllServices();
   d6446:	a801      	add	r0, sp, #4
   d6448:	f7ff ff08 	bl	d625c <_ZN8particle13BlePeerDevice19discoverAllServicesEv>
   d644c:	a801      	add	r0, sp, #4
   d644e:	f7ff fc47 	bl	d5ce0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
    if (!impl()->characteristicsDiscovered()) {
   d6452:	6823      	ldr	r3, [r4, #0]
   d6454:	7adb      	ldrb	r3, [r3, #11]
   d6456:	b93b      	cbnz	r3, d6468 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x30>
        if (discovery.discoverAllCharacteristics(*this) == SYSTEM_ERROR_NONE) {
   d6458:	4621      	mov	r1, r4
   d645a:	a801      	add	r0, sp, #4
   d645c:	f7ff fa2a 	bl	d58b4 <_ZN8particle21BleDiscoveryDelegator26discoverAllCharacteristicsERNS_13BlePeerDeviceE>
   d6460:	b910      	cbnz	r0, d6468 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv+0x30>
        return impl_.get();
   d6462:	6823      	ldr	r3, [r4, #0]
            impl()->characteristicsDiscovered() = true;
   d6464:	2201      	movs	r2, #1
   d6466:	72da      	strb	r2, [r3, #11]
        return characteristics_;
   d6468:	6821      	ldr	r1, [r4, #0]
    return impl()->characteristics();
   d646a:	4628      	mov	r0, r5
   d646c:	3118      	adds	r1, #24
   d646e:	f7ff ffc1 	bl	d63f4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEEC1ERKS4_>
}
   d6472:	4628      	mov	r0, r5
   d6474:	b005      	add	sp, #20
   d6476:	bd30      	pop	{r4, r5, pc}

000d6478 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>:
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   d6478:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d647c:	b091      	sub	sp, #68	; 0x44
   d647e:	4605      	mov	r5, r0
   d6480:	460f      	mov	r7, r1
    return address_;
   d6482:	6808      	ldr	r0, [r1, #0]
   d6484:	6849      	ldr	r1, [r1, #4]
    connCfg.conn_params = params;
   d6486:	9205      	str	r2, [sp, #20]
int BlePeerDevice::connect(const BleAddress& addr, const BleConnectionParams* params, bool automatic) {
   d6488:	4698      	mov	r8, r3
    connCfg.version = BLE_API_VERSION;
   d648a:	4b38      	ldr	r3, [pc, #224]	; (d656c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xf4>)
   d648c:	9302      	str	r3, [sp, #8]
    hal_ble_conn_cfg_t connCfg = {};
   d648e:	f04f 0900 	mov.w	r9, #0
    connCfg.address = addr.halAddress();
   d6492:	ab03      	add	r3, sp, #12
    return address_;
   d6494:	ac08      	add	r4, sp, #32
   d6496:	c403      	stmia	r4!, {r0, r1}
    connCfg.address = addr.halAddress();
   d6498:	e883 0003 	stmia.w	r3, {r0, r1}
    hal_ble_conn_cfg_t connCfg = {};
   d649c:	e9cd 9906 	strd	r9, r9, [sp, #24]
    connCfg.callback = BleLocalDevice::getInstance().impl()->onBleLinkEvents;
   d64a0:	f7ff fb24 	bl	d5aec <_ZN8particle14BleLocalDevice11getInstanceEv>
   d64a4:	4b32      	ldr	r3, [pc, #200]	; (d6570 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xf8>)
   d64a6:	9306      	str	r3, [sp, #24]
    connCfg.context = BleLocalDevice::getInstance().impl();
   d64a8:	f7ff fb20 	bl	d5aec <_ZN8particle14BleLocalDevice11getInstanceEv>
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   d64ac:	6829      	ldr	r1, [r5, #0]
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d64ae:	6803      	ldr	r3, [r0, #0]
    connCfg.context = BleLocalDevice::getInstance().impl();
   d64b0:	9307      	str	r3, [sp, #28]
    int ret = hal_ble_gap_connect(&connCfg, &impl()->connHandle(), nullptr);
   d64b2:	464a      	mov	r2, r9
   d64b4:	a802      	add	r0, sp, #8
   d64b6:	f7fe fab7 	bl	d4a28 <hal_ble_gap_connect>
    connCfg.address = addr.halAddress();
   d64ba:	ae08      	add	r6, sp, #32
    if (ret != SYSTEM_ERROR_NONE) {
   d64bc:	4604      	mov	r4, r0
   d64be:	b138      	cbz	r0, d64d0 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x58>
   d64c0:	682b      	ldr	r3, [r5, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d64c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d64c6:	801a      	strh	r2, [r3, #0]
}
   d64c8:	4620      	mov	r0, r4
   d64ca:	b011      	add	sp, #68	; 0x44
   d64cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    bind(addr);
   d64d0:	4639      	mov	r1, r7
   d64d2:	4628      	mov	r0, r5
   d64d4:	f7ff fab2 	bl	d5a3c <_ZNK8particle13BlePeerDevice4bindERKNS_10BleAddressE>
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   d64d8:	f7ff fb08 	bl	d5aec <_ZN8particle14BleLocalDevice11getInstanceEv>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d64dc:	4629      	mov	r1, r5
        return peers_;
   d64de:	6807      	ldr	r7, [r0, #0]
   d64e0:	f851 3b04 	ldr.w	r3, [r1], #4
   d64e4:	9308      	str	r3, [sp, #32]
   d64e6:	3718      	adds	r7, #24
   d64e8:	a809      	add	r0, sp, #36	; 0x24
   d64ea:	f7ff fbcc 	bl	d5c86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   d64ee:	4631      	mov	r1, r6
   d64f0:	4638      	mov	r0, r7
   d64f2:	f7ff fcec 	bl	d5ece <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d64f6:	4607      	mov	r7, r0
      ~__shared_ptr() = default;
   d64f8:	a809      	add	r0, sp, #36	; 0x24
   d64fa:	f7fd fe3e 	bl	d417a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d64fe:	2320      	movs	r3, #32
        LOG(ERROR, "Cannot add new peer device.");
   d6500:	e9cd 3408 	strd	r3, r4, [sp, #32]
    if (!BleLocalDevice::getInstance().impl()->peers().append(*this)) {
   d6504:	b997      	cbnz	r7, d652c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xb4>
        LOG(ERROR, "Cannot add new peer device.");
   d6506:	4b1b      	ldr	r3, [pc, #108]	; (d6574 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xfc>)
   d6508:	491b      	ldr	r1, [pc, #108]	; (d6578 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x100>)
   d650a:	9300      	str	r3, [sp, #0]
   d650c:	4632      	mov	r2, r6
   d650e:	4623      	mov	r3, r4
   d6510:	2032      	movs	r0, #50	; 0x32
   d6512:	f7fe fba5 	bl	d4c60 <log_message>
        hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   d6516:	682b      	ldr	r3, [r5, #0]
   d6518:	4621      	mov	r1, r4
   d651a:	8818      	ldrh	r0, [r3, #0]
        return SYSTEM_ERROR_NO_MEMORY;
   d651c:	4c17      	ldr	r4, [pc, #92]	; (d657c <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x104>)
        hal_ble_gap_disconnect(impl()->connHandle(), nullptr);
   d651e:	f7fe fa33 	bl	d4988 <hal_ble_gap_disconnect>
   d6522:	682b      	ldr	r3, [r5, #0]
        impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d6524:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d6528:	801a      	strh	r2, [r3, #0]
        return SYSTEM_ERROR_NO_MEMORY;
   d652a:	e7cd      	b.n	d64c8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
    LOG(TRACE, "New peripheral is connected.");
   d652c:	4b14      	ldr	r3, [pc, #80]	; (d6580 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x108>)
   d652e:	9300      	str	r3, [sp, #0]
   d6530:	4911      	ldr	r1, [pc, #68]	; (d6578 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x100>)
   d6532:	4623      	mov	r3, r4
   d6534:	4632      	mov	r2, r6
   d6536:	2001      	movs	r0, #1
   d6538:	f7fe fb92 	bl	d4c60 <log_message>
    if (automatic) {
   d653c:	f1b8 0f00 	cmp.w	r8, #0
   d6540:	d0c2      	beq.n	d64c8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   d6542:	4629      	mov	r1, r5
   d6544:	4630      	mov	r0, r6
   d6546:	f7ff ff77 	bl	d6438 <_ZN8particle13BlePeerDevice26discoverAllCharacteristicsEv>
    return data_ + size_;
   d654a:	e9dd 5308 	ldrd	r5, r3, [sp, #32]
   d654e:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (auto& characteristic : characteristics) {
   d6552:	42af      	cmp	r7, r5
   d6554:	d005      	beq.n	d6562 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xea>
            characteristic.subscribe(true);
   d6556:	4628      	mov	r0, r5
   d6558:	2101      	movs	r1, #1
   d655a:	f7ff f92f 	bl	d57bc <_ZNK8particle17BleCharacteristic9subscribeEb>
        for (auto& characteristic : characteristics) {
   d655e:	3508      	adds	r5, #8
   d6560:	e7f7      	b.n	d6552 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0xda>
        Vector<BleCharacteristic> characteristics = discoverAllCharacteristics();
   d6562:	4630      	mov	r0, r6
   d6564:	f7ff fbce 	bl	d5d04 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d6568:	e7ae      	b.n	d64c8 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb+0x50>
   d656a:	bf00      	nop
   d656c:	00180001 	.word	0x00180001
   d6570:	000d5f4d 	.word	0x000d5f4d
   d6574:	000d9421 	.word	0x000d9421
   d6578:	000d9338 	.word	0x000d9338
   d657c:	fffffefc 	.word	0xfffffefc
   d6580:	000d943d 	.word	0x000d943d

000d6584 <_ZNK8particle14BleLocalDevice7connectERKNS_10BleAddressEb>:
    BlePeerDevice peer;
    peer.connect(addr, interval, latency, timeout, automatic);
    return peer;
}

BlePeerDevice BleLocalDevice::connect(const BleAddress& addr, bool automatic) const {
   d6584:	b513      	push	{r0, r1, r4, lr}
   d6586:	4604      	mov	r4, r0
   d6588:	e9cd 3200 	strd	r3, r2, [sp]
    BlePeerDevice peer;
   d658c:	f7ff f9fe 	bl	d598c <_ZN8particle13BlePeerDeviceC1Ev>
    peer.connect(addr, params, automatic);
   d6590:	9b00      	ldr	r3, [sp, #0]
   d6592:	9901      	ldr	r1, [sp, #4]
   d6594:	2200      	movs	r2, #0
   d6596:	4620      	mov	r0, r4
   d6598:	f7ff ff6e 	bl	d6478 <_ZN8particle13BlePeerDevice7connectERKNS_10BleAddressEPKNS_19BleConnectionParamsEb>
    // Do not lock here. This thread is guarded by BLE HAL lock. But it allows the BLE thread to access the wiring data.
    return connect(addr, nullptr, automatic);
}
   d659c:	4620      	mov	r0, r4
   d659e:	b002      	add	sp, #8
   d65a0:	bd10      	pop	{r4, pc}

000d65a2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d65a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d65a4:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d65a6:	6845      	ldr	r5, [r0, #4]
   d65a8:	4668      	mov	r0, sp
   d65aa:	f7ff fb73 	bl	d5c94 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d65ae:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   d65b2:	4299      	cmp	r1, r3
   d65b4:	da10      	bge.n	d65d8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   d65b6:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d65b8:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d65ba:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d65be:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d65c2:	4629      	mov	r1, r5
   d65c4:	f105 0008 	add.w	r0, r5, #8
   d65c8:	f7ff fed2 	bl	d6370 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d65cc:	b98d      	cbnz	r5, d65f2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   d65ce:	6863      	ldr	r3, [r4, #4]
   d65d0:	3301      	adds	r3, #1
   d65d2:	6063      	str	r3, [r4, #4]
    return true;
   d65d4:	2601      	movs	r6, #1
   d65d6:	e006      	b.n	d65e6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d65d8:	3101      	adds	r1, #1
   d65da:	4620      	mov	r0, r4
   d65dc:	f7ff fef2 	bl	d63c4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d65e0:	4606      	mov	r6, r0
   d65e2:	2800      	cmp	r0, #0
   d65e4:	d1e7      	bne.n	d65b6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   d65e6:	a801      	add	r0, sp, #4
   d65e8:	f7fd fdc7 	bl	d417a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d65ec:	4630      	mov	r0, r6
   d65ee:	b002      	add	sp, #8
   d65f0:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   d65f2:	4669      	mov	r1, sp
   d65f4:	4628      	mov	r0, r5
   d65f6:	f7ff fb4d 	bl	d5c94 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d65fa:	e7e8      	b.n	d65ce <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000d65fc <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv>:
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   d65fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
                LOG(ERROR, "Failed to append discovered characteristic.");
   d6600:	f8df 8104 	ldr.w	r8, [pc, #260]	; d6708 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x10c>
   d6604:	f8df 9104 	ldr.w	r9, [pc, #260]	; d670c <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x110>
    static void onCharacteristicsDiscovered(const hal_ble_char_discovered_evt_t* event, void* context) {
   d6608:	b08d      	sub	sp, #52	; 0x34
   d660a:	4604      	mov	r4, r0
   d660c:	460f      	mov	r7, r1
        for (size_t i = 0; i < event->count; i++) {
   d660e:	2600      	movs	r6, #0
   d6610:	6823      	ldr	r3, [r4, #0]
   d6612:	42b3      	cmp	r3, r6
   d6614:	d975      	bls.n	d6702 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x106>
            BleCharacteristic characteristic;
   d6616:	a802      	add	r0, sp, #8
   d6618:	f7ff f844 	bl	d56a4 <_ZN8particle17BleCharacteristicC1Ev>
            characteristic.impl()->connHandle() = event->conn_handle;
   d661c:	9b02      	ldr	r3, [sp, #8]
   d661e:	8922      	ldrh	r2, [r4, #8]
   d6620:	805a      	strh	r2, [r3, #2]
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   d6622:	6863      	ldr	r3, [r4, #4]
   d6624:	9802      	ldr	r0, [sp, #8]
inline particle::EnumFlags<T> particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::operator|(const EnumFlags<T>& flags) const {
    return EnumFlags<T>(value_ | flags.value_);
}

template<typename T>
inline particle::EnumFlags<T>& particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::operator|=(const EnumFlags<T>& flags) {
   d6626:	252a      	movs	r5, #42	; 0x2a
   d6628:	4375      	muls	r5, r6
   d662a:	442b      	add	r3, r5
            characteristic.impl()->charUUID() = event->characteristics[i].uuid;
   d662c:	3014      	adds	r0, #20
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_READ) {
   d662e:	7e5b      	ldrb	r3, [r3, #25]
   d6630:	f013 0f02 	tst.w	r3, #2
    value_ |= flags.value_;
   d6634:	bf1e      	ittt	ne
   d6636:	f810 3c10 	ldrbne.w	r3, [r0, #-16]
   d663a:	f043 0302 	orrne.w	r3, r3, #2
   d663e:	f800 3c10 	strbne.w	r3, [r0, #-16]
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE_WO_RESP) {
   d6642:	6863      	ldr	r3, [r4, #4]
   d6644:	442b      	add	r3, r5
   d6646:	7e5b      	ldrb	r3, [r3, #25]
   d6648:	075b      	lsls	r3, r3, #29
   d664a:	bf42      	ittt	mi
   d664c:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d6650:	f043 0304 	orrmi.w	r3, r3, #4
   d6654:	f800 3c10 	strbmi.w	r3, [r0, #-16]
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_WRITE) {
   d6658:	6863      	ldr	r3, [r4, #4]
   d665a:	442b      	add	r3, r5
   d665c:	7e5b      	ldrb	r3, [r3, #25]
   d665e:	0719      	lsls	r1, r3, #28
   d6660:	bf42      	ittt	mi
   d6662:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d6666:	f043 0308 	orrmi.w	r3, r3, #8
   d666a:	f800 3c10 	strbmi.w	r3, [r0, #-16]
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_NOTIFY) {
   d666e:	6863      	ldr	r3, [r4, #4]
   d6670:	442b      	add	r3, r5
   d6672:	7e5b      	ldrb	r3, [r3, #25]
   d6674:	06da      	lsls	r2, r3, #27
   d6676:	bf42      	ittt	mi
   d6678:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d667c:	f043 0310 	orrmi.w	r3, r3, #16
   d6680:	f800 3c10 	strbmi.w	r3, [r0, #-16]
            if (event->characteristics[i].properties & BLE_SIG_CHAR_PROP_INDICATE) {
   d6684:	6863      	ldr	r3, [r4, #4]
   d6686:	442b      	add	r3, r5
   d6688:	7e5b      	ldrb	r3, [r3, #25]
   d668a:	069b      	lsls	r3, r3, #26
   d668c:	bf42      	ittt	mi
   d668e:	f810 3c10 	ldrbmi.w	r3, [r0, #-16]
   d6692:	f043 0320 	orrmi.w	r3, r3, #32
   d6696:	f800 3c10 	strbmi.w	r3, [r0, #-16]
            characteristic.impl()->charUUID() = event->characteristics[i].uuid;
   d669a:	6861      	ldr	r1, [r4, #4]
   d669c:	4429      	add	r1, r5
   d669e:	3104      	adds	r1, #4
   d66a0:	f7fe fdbd 	bl	d521e <_ZN8particle7BleUuidaSERK14hal_ble_uuid_t>
            characteristic.impl()->attrHandles() = event->characteristics[i].charHandles;
   d66a4:	6863      	ldr	r3, [r4, #4]
        return impl_.get();
   d66a6:	9a02      	ldr	r2, [sp, #8]
   d66a8:	441d      	add	r5, r3
            if (!peer->impl()->characteristics().append(characteristic)) {
   d66aa:	a902      	add	r1, sp, #8
        this->size = halHandles.size;
   d66ac:	8beb      	ldrh	r3, [r5, #30]
   d66ae:	8113      	strh	r3, [r2, #8]
        this->decl_handle = halHandles.decl_handle;
   d66b0:	8c2b      	ldrh	r3, [r5, #32]
   d66b2:	8153      	strh	r3, [r2, #10]
        this->value_handle = halHandles.value_handle;
   d66b4:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   d66b6:	8193      	strh	r3, [r2, #12]
        this->user_desc_handle = halHandles.user_desc_handle;
   d66b8:	8cab      	ldrh	r3, [r5, #36]	; 0x24
   d66ba:	81d3      	strh	r3, [r2, #14]
        this->cccd_handle = halHandles.cccd_handle;
   d66bc:	8ceb      	ldrh	r3, [r5, #38]	; 0x26
   d66be:	8213      	strh	r3, [r2, #16]
        this->sccd_handle = halHandles.sccd_handle;
   d66c0:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
   d66c2:	8253      	strh	r3, [r2, #18]
        return characteristics_;
   d66c4:	6838      	ldr	r0, [r7, #0]
   d66c6:	f100 0518 	add.w	r5, r0, #24
            if (!peer->impl()->characteristics().append(characteristic)) {
   d66ca:	a804      	add	r0, sp, #16
   d66cc:	f7ff fae2 	bl	d5c94 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d66d0:	4628      	mov	r0, r5
   d66d2:	a904      	add	r1, sp, #16
   d66d4:	f7ff ff65 	bl	d65a2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d66d8:	4605      	mov	r5, r0
   d66da:	a805      	add	r0, sp, #20
   d66dc:	f7fd fd4d 	bl	d417a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d66e0:	b955      	cbnz	r5, d66f8 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0xfc>
                LOG(ERROR, "Failed to append discovered characteristic.");
   d66e2:	2320      	movs	r3, #32
   d66e4:	e9cd 3504 	strd	r3, r5, [sp, #16]
   d66e8:	f8cd 8000 	str.w	r8, [sp]
   d66ec:	462b      	mov	r3, r5
   d66ee:	aa04      	add	r2, sp, #16
   d66f0:	4649      	mov	r1, r9
   d66f2:	2032      	movs	r0, #50	; 0x32
   d66f4:	f7fe fab4 	bl	d4c60 <log_message>
   d66f8:	a803      	add	r0, sp, #12
   d66fa:	f7fd fd3e 	bl	d417a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        for (size_t i = 0; i < event->count; i++) {
   d66fe:	3601      	adds	r6, #1
   d6700:	e786      	b.n	d6610 <_ZN8particle21BleDiscoveryDelegator27onCharacteristicsDiscoveredEPK29hal_ble_char_discovered_evt_tPv+0x14>
    }
   d6702:	b00d      	add	sp, #52	; 0x34
   d6704:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d6708:	000d945a 	.word	0x000d945a
   d670c:	000d9338 	.word	0x000d9338

000d6710 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        p.disconnect();
    }
    return SYSTEM_ERROR_NONE;
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d6710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6714:	4616      	mov	r6, r2
   d6716:	b0a1      	sub	sp, #132	; 0x84
   d6718:	4680      	mov	r8, r0
    WiringBleLock lk;
   d671a:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d671c:	460d      	mov	r5, r1
    WiringBleLock lk;
   d671e:	f7fe fc7b 	bl	d5018 <_ZN8particle3ble13WiringBleLockC1Ev>
        return impl_.get();
   d6722:	6834      	ldr	r4, [r6, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   d6724:	7923      	ldrb	r3, [r4, #4]
   d6726:	b953      	cbnz	r3, d673e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   d6728:	4631      	mov	r1, r6
   d672a:	4640      	mov	r0, r8
   d672c:	f7ff fab2 	bl	d5c94 <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   d6730:	a80a      	add	r0, sp, #40	; 0x28
   d6732:	f7fe fc7f 	bl	d5034 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   d6736:	4640      	mov	r0, r8
   d6738:	b021      	add	sp, #132	; 0x84
   d673a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d673e:	682b      	ldr	r3, [r5, #0]
    return data_ + size_;
   d6740:	e9d3 7303 	ldrd	r7, r3, [r3, #12]
   d6744:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
   d6748:	9303      	str	r3, [sp, #12]
   d674a:	f104 0928 	add.w	r9, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   d674e:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   d6752:	9b03      	ldr	r3, [sp, #12]
   d6754:	429f      	cmp	r7, r3
   d6756:	d021      	beq.n	d679c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   d6758:	f8d7 a000 	ldr.w	sl, [r7]
        if (charUuid_ == impl.charUuid_ &&
   d675c:	4658      	mov	r0, fp
   d675e:	f10a 0114 	add.w	r1, sl, #20
   d6762:	f7fe fd68 	bl	d5236 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   d6766:	b1b8      	cbz	r0, d6798 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   d6768:	f10a 0128 	add.w	r1, sl, #40	; 0x28
   d676c:	4648      	mov	r0, r9
   d676e:	f7fe fd62 	bl	d5236 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   d6772:	b188      	cbz	r0, d6798 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   d6774:	6823      	ldr	r3, [r4, #0]
   d6776:	f8da 2000 	ldr.w	r2, [sl]
   d677a:	4053      	eors	r3, r2
   d677c:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   d6780:	d10a      	bne.n	d6798 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d6782:	2220      	movs	r2, #32
   d6784:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   d6788:	4a58      	ldr	r2, [pc, #352]	; (d68ec <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1dc>)
   d678a:	9200      	str	r2, [sp, #0]
   d678c:	aa15      	add	r2, sp, #84	; 0x54
   d678e:	4958      	ldr	r1, [pc, #352]	; (d68f0 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e0>)
   d6790:	2032      	movs	r0, #50	; 0x32
   d6792:	f7fe fa65 	bl	d4c60 <log_message>
   d6796:	e7c7      	b.n	d6728 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   d6798:	3708      	adds	r7, #8
   d679a:	e7da      	b.n	d6752 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   d679c:	4648      	mov	r0, r9
   d679e:	f7fe fce3 	bl	d5168 <_ZNK8particle7BleUuid7isValidEv>
   d67a2:	b918      	cbnz	r0, d67ac <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x9c>
        charImpl->svcUUID() = PARTICLE_DEFAULT_BLE_SVC_UUID;
   d67a4:	4953      	ldr	r1, [pc, #332]	; (d68f4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e4>)
   d67a6:	4648      	mov	r0, r9
   d67a8:	f7fe fd20 	bl	d51ec <_ZN8particle7BleUuidaSEPKh>
   d67ac:	682b      	ldr	r3, [r5, #0]
   d67ae:	e9d3 7300 	ldrd	r7, r3, [r3]
   d67b2:	eb07 0bc3 	add.w	fp, r7, r3, lsl #3
    for (auto& svc : impl()->services()) {
   d67b6:	455f      	cmp	r7, fp
   d67b8:	46ba      	mov	sl, r7
        BleService svc(charImpl->svcUUID());
   d67ba:	4649      	mov	r1, r9
    for (auto& svc : impl()->services()) {
   d67bc:	d06a      	beq.n	d6894 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x184>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   d67be:	f857 0b08 	ldr.w	r0, [r7], #8
   d67c2:	f7fe fd38 	bl	d5236 <_ZNK8particle7BleUuideqERKS0_>
   d67c6:	2800      	cmp	r0, #0
   d67c8:	d0f5      	beq.n	d67b6 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xa6>
        if (!charUuid_.isValid()) {
   d67ca:	f104 0714 	add.w	r7, r4, #20
   d67ce:	4638      	mov	r0, r7
   d67d0:	f7fe fcca 	bl	d5168 <_ZNK8particle7BleUuid7isValidEv>
   d67d4:	b968      	cbnz	r0, d67f2 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xe2>
            defaultUuidCharCount_++;
   d67d6:	4b48      	ldr	r3, [pc, #288]	; (d68f8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e8>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d67d8:	4946      	ldr	r1, [pc, #280]	; (d68f4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1e4>)
            defaultUuidCharCount_++;
   d67da:	881a      	ldrh	r2, [r3, #0]
   d67dc:	3201      	adds	r2, #1
   d67de:	b292      	uxth	r2, r2
   d67e0:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d67e2:	a815      	add	r0, sp, #84	; 0x54
   d67e4:	2301      	movs	r3, #1
   d67e6:	f7fe fcb5 	bl	d5154 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   d67ea:	a915      	add	r1, sp, #84	; 0x54
   d67ec:	4638      	mov	r0, r7
   d67ee:	f7fe fcf0 	bl	d51d2 <_ZN8particle7BleUuidaSERKS0_>
    hal_ble_char_init_t charInit = {};
   d67f2:	2228      	movs	r2, #40	; 0x28
   d67f4:	2100      	movs	r1, #0
   d67f6:	a816      	add	r0, sp, #88	; 0x58
   d67f8:	f002 fb6c 	bl	d8ed4 <memset>
    charInit.version = BLE_API_VERSION;
   d67fc:	4b3f      	ldr	r3, [pc, #252]	; (d68fc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1ec>)
   d67fe:	9315      	str	r3, [sp, #84]	; 0x54
    charInit.uuid = charImpl->charUUID().halUUID();
   d6800:	4639      	mov	r1, r7
   d6802:	a804      	add	r0, sp, #16
   d6804:	f7fe fcc2 	bl	d518c <_ZN8particle7BleUuid7halUUIDEv>
   d6808:	ab04      	add	r3, sp, #16
   d680a:	aa18      	add	r2, sp, #96	; 0x60
   d680c:	f10d 0c20 	add.w	ip, sp, #32
   d6810:	6818      	ldr	r0, [r3, #0]
   d6812:	6859      	ldr	r1, [r3, #4]
   d6814:	4617      	mov	r7, r2
   d6816:	c703      	stmia	r7!, {r0, r1}
   d6818:	3308      	adds	r3, #8
   d681a:	4563      	cmp	r3, ip
   d681c:	463a      	mov	r2, r7
   d681e:	d1f7      	bne.n	d6810 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x100>
   d6820:	6818      	ldr	r0, [r3, #0]
   d6822:	6038      	str	r0, [r7, #0]
    charInit.properties = charImpl->properties().value();
   d6824:	7923      	ldrb	r3, [r4, #4]
   d6826:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   d682a:	f8da 3000 	ldr.w	r3, [sl]
   d682e:	8a9b      	ldrh	r3, [r3, #20]
   d6830:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   d6834:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d6836:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   d6838:	4b31      	ldr	r3, [pc, #196]	; (d6900 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f0>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d683a:	2200      	movs	r2, #0
   d683c:	1da1      	adds	r1, r4, #6
   d683e:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   d6840:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d6844:	f7fe f8fa 	bl	d4a3c <hal_ble_gatt_server_add_characteristic>
   d6848:	2800      	cmp	r0, #0
   d684a:	f47f af6d 	bne.w	d6728 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    charImpl->local() = true;
   d684e:	2301      	movs	r3, #1
   d6850:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   d6852:	682c      	ldr	r4, [r5, #0]
    if(!impl()->characteristics().append(characteristic)) {
   d6854:	4631      	mov	r1, r6
        return characteristics_;
   d6856:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   d6858:	a80d      	add	r0, sp, #52	; 0x34
   d685a:	f7ff fa1b 	bl	d5c94 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d685e:	4620      	mov	r0, r4
   d6860:	a90d      	add	r1, sp, #52	; 0x34
   d6862:	f7ff fe9e 	bl	d65a2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d6866:	4604      	mov	r4, r0
   d6868:	a80e      	add	r0, sp, #56	; 0x38
   d686a:	f7fd fc86 	bl	d417a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d686e:	2c00      	cmp	r4, #0
   d6870:	f47f af5a 	bne.w	d6728 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   d6874:	2320      	movs	r3, #32
   d6876:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   d687a:	4b22      	ldr	r3, [pc, #136]	; (d6904 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   d687c:	9300      	str	r3, [sp, #0]
   d687e:	aa0d      	add	r2, sp, #52	; 0x34
   d6880:	4623      	mov	r3, r4
   d6882:	e784      	b.n	d678e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   d6884:	4631      	mov	r1, r6
   d6886:	4640      	mov	r0, r8
   d6888:	f7ff fa04 	bl	d5c94 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d688c:	a80c      	add	r0, sp, #48	; 0x30
   d688e:	f7fd fc74 	bl	d417a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6892:	e74d      	b.n	d6730 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   d6894:	a80b      	add	r0, sp, #44	; 0x2c
   d6896:	f7fe ffe9 	bl	d586c <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   d689a:	4649      	mov	r1, r9
   d689c:	a815      	add	r0, sp, #84	; 0x54
   d689e:	f7fe fc75 	bl	d518c <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   d68a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d68a4:	2300      	movs	r3, #0
   d68a6:	3214      	adds	r2, #20
   d68a8:	a915      	add	r1, sp, #84	; 0x54
   d68aa:	2001      	movs	r0, #1
   d68ac:	f7fe f876 	bl	d499c <hal_ble_gatt_server_add_service>
   d68b0:	2800      	cmp	r0, #0
   d68b2:	d1e7      	bne.n	d6884 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x174>
        return services_;
   d68b4:	682f      	ldr	r7, [r5, #0]
   d68b6:	a90b      	add	r1, sp, #44	; 0x2c
   d68b8:	a80d      	add	r0, sp, #52	; 0x34
   d68ba:	f7ff f9f9 	bl	d5cb0 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   d68be:	4638      	mov	r0, r7
   d68c0:	a90d      	add	r1, sp, #52	; 0x34
   d68c2:	f7ff fcdf 	bl	d6284 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d68c6:	4607      	mov	r7, r0
   d68c8:	a80e      	add	r0, sp, #56	; 0x38
   d68ca:	f7fd fc56 	bl	d417a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d68ce:	2f00      	cmp	r7, #0
   d68d0:	d0d8      	beq.n	d6884 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x174>
   d68d2:	682a      	ldr	r2, [r5, #0]
    return data_[size_ - 1];
   d68d4:	6853      	ldr	r3, [r2, #4]
   d68d6:	6812      	ldr	r2, [r2, #0]
   d68d8:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   d68dc:	3b01      	subs	r3, #1
   d68de:	a80c      	add	r0, sp, #48	; 0x30
   d68e0:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
   d68e4:	f7fd fc49 	bl	d417a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d68e8:	e76f      	b.n	d67ca <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xba>
   d68ea:	bf00      	nop
   d68ec:	000d9486 	.word	0x000d9486
   d68f0:	000d9338 	.word	0x000d9338
   d68f4:	000d9544 	.word	0x000d9544
   d68f8:	2003e62c 	.word	0x2003e62c
   d68fc:	002c0001 	.word	0x002c0001
   d6900:	000d5b2d 	.word	0x000d5b2d
   d6904:	000d94b1 	.word	0x000d94b1

000d6908 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6908:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d690a:	4c06      	ldr	r4, [pc, #24]	; (d6924 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d690c:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d690e:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d6910:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d6912:	f7fe f8c5 	bl	d4aa0 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d6916:	4620      	mov	r0, r4
   d6918:	4a03      	ldr	r2, [pc, #12]	; (d6928 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d691a:	4904      	ldr	r1, [pc, #16]	; (d692c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d691c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d6920:	f002 b976 	b.w	d8c10 <__aeabi_atexit>
   d6924:	2003e630 	.word	0x2003e630
   d6928:	2003dee8 	.word	0x2003dee8
   d692c:	000d4f3d 	.word	0x000d4f3d

000d6930 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d6930:	4770      	bx	lr

000d6932 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d6932:	2000      	movs	r0, #0
   d6934:	4770      	bx	lr

000d6936 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d6936:	b510      	push	{r4, lr}
   d6938:	2110      	movs	r1, #16
   d693a:	4604      	mov	r4, r0
   d693c:	f002 f96d 	bl	d8c1a <_ZdlPvj>
   d6940:	4620      	mov	r0, r4
   d6942:	bd10      	pop	{r4, pc}

000d6944 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d6944:	b508      	push	{r3, lr}
      { delete this; }
   d6946:	f7ff fff6 	bl	d6936 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d694a:	bd08      	pop	{r3, pc}

000d694c <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d694c:	b510      	push	{r4, lr}
      if (_M_manager)
   d694e:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d6950:	4604      	mov	r4, r0
      if (_M_manager)
   d6952:	b113      	cbz	r3, d695a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6954:	2203      	movs	r2, #3
   d6956:	4601      	mov	r1, r0
   d6958:	4798      	blx	r3
    }
   d695a:	4620      	mov	r0, r4
   d695c:	bd10      	pop	{r4, pc}

000d695e <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d695e:	b530      	push	{r4, r5, lr}
        type_(type) {
   d6960:	2200      	movs	r2, #0
   d6962:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d6966:	6002      	str	r2, [r0, #0]
   d6968:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d696a:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d696c:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d696e:	680c      	ldr	r4, [r1, #0]
   d6970:	8085      	strh	r5, [r0, #4]
   d6972:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6974:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d6976:	bd30      	pop	{r4, r5, pc}

000d6978 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d6978:	b510      	push	{r4, lr}
   d697a:	4604      	mov	r4, r0
    free((void*)msg_);
   d697c:	6800      	ldr	r0, [r0, #0]
   d697e:	f7fe fa33 	bl	d4de8 <free>
}
   d6982:	4620      	mov	r0, r4
   d6984:	bd10      	pop	{r4, pc}

000d6986 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d6986:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d6988:	68c4      	ldr	r4, [r0, #12]
   d698a:	b1f4      	cbz	r4, d69ca <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d698c:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d698e:	2b02      	cmp	r3, #2
   d6990:	d103      	bne.n	d699a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d6992:	f104 000c 	add.w	r0, r4, #12
   d6996:	f7ff ffef 	bl	d6978 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d699a:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d699c:	b135      	cbz	r5, d69ac <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d699e:	4628      	mov	r0, r5
   d69a0:	f7ff ffd4 	bl	d694c <_ZNSt14_Function_baseD1Ev>
   d69a4:	2110      	movs	r1, #16
   d69a6:	4628      	mov	r0, r5
   d69a8:	f002 f937 	bl	d8c1a <_ZdlPvj>
   d69ac:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d69ae:	b135      	cbz	r5, d69be <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d69b0:	4628      	mov	r0, r5
   d69b2:	f7ff ffcb 	bl	d694c <_ZNSt14_Function_baseD1Ev>
   d69b6:	2110      	movs	r1, #16
   d69b8:	4628      	mov	r0, r5
   d69ba:	f002 f92e 	bl	d8c1a <_ZdlPvj>
   d69be:	4620      	mov	r0, r4
   d69c0:	2114      	movs	r1, #20
   d69c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d69c6:	f002 b928 	b.w	d8c1a <_ZdlPvj>
   d69ca:	bd38      	pop	{r3, r4, r5, pc}

000d69cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d69cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d69ce:	460e      	mov	r6, r1
   d69d0:	4604      	mov	r4, r0
   d69d2:	f856 3b04 	ldr.w	r3, [r6], #4
   d69d6:	9300      	str	r3, [sp, #0]
   d69d8:	460d      	mov	r5, r1
   d69da:	a801      	add	r0, sp, #4
   d69dc:	4631      	mov	r1, r6
   d69de:	f7ff f952 	bl	d5c86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d69e2:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d69e4:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d69e6:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d69e8:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d69ea:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d69ec:	2300      	movs	r3, #0
   d69ee:	9301      	str	r3, [sp, #4]
	__r._M_ptr = 0;
   d69f0:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d69f2:	f7fd fbc2 	bl	d417a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d69f6:	4630      	mov	r0, r6
   d69f8:	f7fd fbbf 	bl	d417a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d69fc:	4628      	mov	r0, r5
   d69fe:	2108      	movs	r1, #8
   d6a00:	f002 f90b 	bl	d8c1a <_ZdlPvj>
        return p;
    }
   d6a04:	4620      	mov	r0, r4
   d6a06:	b002      	add	sp, #8
   d6a08:	bd70      	pop	{r4, r5, r6, pc}

000d6a0a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d6a0a:	b513      	push	{r0, r1, r4, lr}
   d6a0c:	460b      	mov	r3, r1
   d6a0e:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6a10:	e9d0 0100 	ldrd	r0, r1, [r0]
   d6a14:	466c      	mov	r4, sp
   d6a16:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6a1a:	e893 0003 	ldmia.w	r3, {r0, r1}
   d6a1e:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d6a22:	e894 0003 	ldmia.w	r4, {r0, r1}
   d6a26:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d6a2a:	b002      	add	sp, #8
   d6a2c:	bd10      	pop	{r4, pc}

000d6a2e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d6a2e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d6a30:	b510      	push	{r4, lr}
      if (_M_empty())
   d6a32:	b90a      	cbnz	r2, d6a38 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d6a34:	f002 f8f5 	bl	d8c22 <_ZSt25__throw_bad_function_callv>
    }
   d6a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6a3c:	68c3      	ldr	r3, [r0, #12]
   d6a3e:	4718      	bx	r3

000d6a40 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6a40:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d6a42:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d6a44:	f100 0110 	add.w	r1, r0, #16
   d6a48:	f7ff fff1 	bl	d6a2e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d6a4c:	bd08      	pop	{r3, pc}

000d6a4e <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d6a4e:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d6a50:	b510      	push	{r4, lr}
      if (_M_empty())
   d6a52:	b90a      	cbnz	r2, d6a58 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d6a54:	f002 f8e5 	bl	d8c22 <_ZSt25__throw_bad_function_callv>
    }
   d6a58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6a5c:	68c3      	ldr	r3, [r0, #12]
   d6a5e:	4718      	bx	r3

000d6a60 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6a60:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d6a62:	6800      	ldr	r0, [r0, #0]
   d6a64:	f100 0110 	add.w	r1, r0, #16
   d6a68:	f7ff fff1 	bl	d6a4e <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d6a6c:	bd08      	pop	{r3, pc}
	...

000d6a70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d6a70:	b538      	push	{r3, r4, r5, lr}
   d6a72:	2300      	movs	r3, #0
   d6a74:	4604      	mov	r4, r0
   d6a76:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6a78:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d6a7a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6a7c:	f7fd fb09 	bl	d4092 <_Znwj>
   d6a80:	b128      	cbz	r0, d6a8e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d6a82:	2301      	movs	r3, #1
   d6a84:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d6a88:	4b02      	ldr	r3, [pc, #8]	; (d6a94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d6a8a:	6003      	str	r3, [r0, #0]
   d6a8c:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6a8e:	6020      	str	r0, [r4, #0]
	}
   d6a90:	4620      	mov	r0, r4
   d6a92:	bd38      	pop	{r3, r4, r5, pc}
   d6a94:	000d956c 	.word	0x000d956c

000d6a98 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d6a98:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d6a9a:	2300      	movs	r3, #0
   d6a9c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d6a9e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d6aa0:	4604      	mov	r4, r0
   d6aa2:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d6aa4:	b12b      	cbz	r3, d6ab2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6aa6:	2202      	movs	r2, #2
   d6aa8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6aaa:	68eb      	ldr	r3, [r5, #12]
   d6aac:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6aae:	68ab      	ldr	r3, [r5, #8]
   d6ab0:	60a3      	str	r3, [r4, #8]
    }
   d6ab2:	4620      	mov	r0, r4
   d6ab4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6ab8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d6ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6aba:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6abc:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d6abe:	4668      	mov	r0, sp
   d6ac0:	f7ff ff4d 	bl	d695e <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d6ac4:	f04f 0302 	mov.w	r3, #2
   d6ac8:	e8d4 2f4f 	ldrexb	r2, [r4]
   d6acc:	2a00      	cmp	r2, #0
   d6ace:	d103      	bne.n	d6ad8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d6ad0:	e8c4 3f41 	strexb	r1, r3, [r4]
   d6ad4:	2900      	cmp	r1, #0
   d6ad6:	d1f7      	bne.n	d6ac8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d6ad8:	d125      	bne.n	d6b26 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d6ada:	f104 050c 	add.w	r5, r4, #12
   d6ade:	4669      	mov	r1, sp
   d6ae0:	4628      	mov	r0, r5
   d6ae2:	f7ff ff3c 	bl	d695e <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d6ae6:	f3bf 8f5b 	dmb	ish
   d6aea:	2301      	movs	r3, #1
   d6aec:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d6aee:	2000      	movs	r0, #0
   d6af0:	f104 0308 	add.w	r3, r4, #8
   d6af4:	f3bf 8f5b 	dmb	ish
   d6af8:	e853 6f00 	ldrex	r6, [r3]
   d6afc:	e843 0200 	strex	r2, r0, [r3]
   d6b00:	2a00      	cmp	r2, #0
   d6b02:	d1f9      	bne.n	d6af8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d6b04:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d6b08:	b16e      	cbz	r6, d6b26 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d6b0a:	f7fe f8d9 	bl	d4cc0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d6b0e:	b178      	cbz	r0, d6b30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6b10:	4629      	mov	r1, r5
   d6b12:	4630      	mov	r0, r6
   d6b14:	f7ff ff8b 	bl	d6a2e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d6b18:	4630      	mov	r0, r6
   d6b1a:	f7ff ff17 	bl	d694c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d6b1e:	2110      	movs	r1, #16
   d6b20:	4630      	mov	r0, r6
   d6b22:	f002 f87a 	bl	d8c1a <_ZdlPvj>
        p_->setError(std::move(error));
   d6b26:	4668      	mov	r0, sp
   d6b28:	f7ff ff26 	bl	d6978 <_ZN8particle5ErrorD1Ev>
    }
   d6b2c:	b009      	add	sp, #36	; 0x24
   d6b2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6b30:	4631      	mov	r1, r6
   d6b32:	a802      	add	r0, sp, #8
   d6b34:	f7ff ffb0 	bl	d6a98 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d6b38:	68e0      	ldr	r0, [r4, #12]
   d6b3a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6b3e:	b108      	cbz	r0, d6b44 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d6b40:	f002 fa1e 	bl	d8f80 <strdup>
        type_(type) {
   d6b44:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6b46:	2010      	movs	r0, #16
   d6b48:	f8ad 501c 	strh.w	r5, [sp, #28]
   d6b4c:	f7fd faa1 	bl	d4092 <_Znwj>
   d6b50:	4605      	mov	r5, r0
   d6b52:	b1e8      	cbz	r0, d6b90 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d6b54:	2700      	movs	r7, #0
   d6b56:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6b58:	2018      	movs	r0, #24
   d6b5a:	f7fd fa9a 	bl	d4092 <_Znwj>
   d6b5e:	4604      	mov	r4, r0
   d6b60:	b188      	cbz	r0, d6b86 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d6b62:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d6b64:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d6b66:	a802      	add	r0, sp, #8
   d6b68:	f7ff ff4f 	bl	d6a0a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6b6c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6b6e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6b70:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6b72:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6b74:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6b76:	a906      	add	r1, sp, #24
   d6b78:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6b7a:	60e3      	str	r3, [r4, #12]
   d6b7c:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d6b80:	9205      	str	r2, [sp, #20]
   d6b82:	f7ff feec 	bl	d695e <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d6b86:	4b08      	ldr	r3, [pc, #32]	; (d6ba8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d6b88:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6b8a:	4b08      	ldr	r3, [pc, #32]	; (d6bac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6b8c:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d6b8e:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d6b90:	a806      	add	r0, sp, #24
   d6b92:	f7ff fef1 	bl	d6978 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d6b96:	a802      	add	r0, sp, #8
   d6b98:	f7ff fed8 	bl	d694c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6b9c:	2200      	movs	r2, #0
   d6b9e:	4629      	mov	r1, r5
   d6ba0:	4803      	ldr	r0, [pc, #12]	; (d6bb0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d6ba2:	f7fe f895 	bl	d4cd0 <application_thread_invoke>
   d6ba6:	e7b7      	b.n	d6b18 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d6ba8:	000d6a41 	.word	0x000d6a41
   d6bac:	000d6cd9 	.word	0x000d6cd9
   d6bb0:	000d4e4f 	.word	0x000d4e4f

000d6bb4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d6bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6bb8:	b08a      	sub	sp, #40	; 0x28
   d6bba:	4605      	mov	r5, r0
   d6bbc:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d6bc0:	460c      	mov	r4, r1
   d6bc2:	4617      	mov	r7, r2
   d6bc4:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6bc6:	f7fe f89f 	bl	d4d08 <spark_cloud_flag_connected>
   d6bca:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d6bcc:	4682      	mov	sl, r0
   d6bce:	bb38      	cbnz	r0, d6c20 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d6bd0:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d6bd4:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6bd6:	a905      	add	r1, sp, #20
   d6bd8:	4630      	mov	r0, r6
   d6bda:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6bde:	f7ff febe 	bl	d695e <_ZN8particle5ErrorC1EOS0_>
   d6be2:	2014      	movs	r0, #20
   d6be4:	f7fd fa55 	bl	d4092 <_Znwj>
   d6be8:	4604      	mov	r4, r0
   d6bea:	b148      	cbz	r0, d6c00 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d6bec:	2302      	movs	r3, #2
   d6bee:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6bf0:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6bf2:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6bf6:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d6bf8:	4631      	mov	r1, r6
   d6bfa:	300c      	adds	r0, #12
   d6bfc:	f7ff feaf 	bl	d695e <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6c00:	4628      	mov	r0, r5
	: __shared_count(__p)
   d6c02:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6c04:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d6c08:	f7ff ff32 	bl	d6a70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d6c0c:	4630      	mov	r0, r6
   d6c0e:	f7ff feb3 	bl	d6978 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d6c12:	a805      	add	r0, sp, #20
   d6c14:	f7ff feb0 	bl	d6978 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d6c18:	4628      	mov	r0, r5
   d6c1a:	b00a      	add	sp, #40	; 0x28
   d6c1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d6c20:	230c      	movs	r3, #12
   d6c22:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d6c26:	2014      	movs	r0, #20
   d6c28:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d6c2c:	9307      	str	r3, [sp, #28]
   d6c2e:	f7fd fa30 	bl	d4092 <_Znwj>
   d6c32:	4601      	mov	r1, r0
   d6c34:	b128      	cbz	r0, d6c42 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6c36:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d6c3a:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6c3e:	f880 a001 	strb.w	sl, [r0, #1]
   d6c42:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6c44:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d6c46:	f7ff ff13 	bl	d6a70 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d6c4a:	4b22      	ldr	r3, [pc, #136]	; (d6cd4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d6c4c:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d6c4e:	2008      	movs	r0, #8
   d6c50:	f7fd fa1f 	bl	d4092 <_Znwj>
   d6c54:	4682      	mov	sl, r0
   d6c56:	b128      	cbz	r0, d6c64 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6c58:	9b03      	ldr	r3, [sp, #12]
   d6c5a:	f840 3b04 	str.w	r3, [r0], #4
   d6c5e:	a904      	add	r1, sp, #16
   d6c60:	f7ff f811 	bl	d5c86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6c64:	9600      	str	r6, [sp, #0]
   d6c66:	fa5f f389 	uxtb.w	r3, r9
   d6c6a:	4642      	mov	r2, r8
   d6c6c:	4639      	mov	r1, r7
   d6c6e:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d6c70:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6c74:	f7fe f850 	bl	d4d18 <spark_send_event>
   d6c78:	b9b8      	cbnz	r0, d6caa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d6c7a:	9b03      	ldr	r3, [sp, #12]
   d6c7c:	785b      	ldrb	r3, [r3, #1]
   d6c7e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d6c82:	b993      	cbnz	r3, d6caa <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d6c84:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d6c88:	a905      	add	r1, sp, #20
   d6c8a:	a803      	add	r0, sp, #12
   d6c8c:	9205      	str	r2, [sp, #20]
   d6c8e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6c92:	f7ff ff11 	bl	d6ab8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6c96:	a805      	add	r0, sp, #20
   d6c98:	f7ff fe6e 	bl	d6978 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d6c9c:	a805      	add	r0, sp, #20
   d6c9e:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6ca0:	f7ff fe94 	bl	d69cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d6ca4:	a806      	add	r0, sp, #24
   d6ca6:	f7fd fa68 	bl	d417a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6caa:	9b03      	ldr	r3, [sp, #12]
   d6cac:	9305      	str	r3, [sp, #20]
   d6cae:	a904      	add	r1, sp, #16
   d6cb0:	a806      	add	r0, sp, #24
   d6cb2:	f7fe ffe8 	bl	d5c86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6cb6:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6cb8:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d6cba:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d6cbc:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d6cbe:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d6cc0:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d6cc2:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d6cc4:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d6cc6:	f7fd fa58 	bl	d417a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6cca:	a804      	add	r0, sp, #16
   d6ccc:	f7fd fa55 	bl	d417a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d6cd0:	e7a2      	b.n	d6c18 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d6cd2:	bf00      	nop
   d6cd4:	000d6d9d 	.word	0x000d6d9d

000d6cd8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d6cd8:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6cda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6cdc:	4605      	mov	r5, r0
	  switch (__op)
   d6cde:	d007      	beq.n	d6cf0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d6ce0:	2a03      	cmp	r2, #3
   d6ce2:	d018      	beq.n	d6d16 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d6ce4:	2a01      	cmp	r2, #1
   d6ce6:	d101      	bne.n	d6cec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d6ce8:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6cea:	6003      	str	r3, [r0, #0]
	}
   d6cec:	2000      	movs	r0, #0
   d6cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6cf0:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d6cf2:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d6cf4:	f7fd f9cd 	bl	d4092 <_Znwj>
   d6cf8:	4604      	mov	r4, r0
   d6cfa:	b150      	cbz	r0, d6d12 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6cfc:	4631      	mov	r1, r6
   d6cfe:	f7ff fecb 	bl	d6a98 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d6d02:	6930      	ldr	r0, [r6, #16]
   d6d04:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6d08:	b108      	cbz	r0, d6d0e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d6d0a:	f002 f939 	bl	d8f80 <strdup>
        type_(type) {
   d6d0e:	6120      	str	r0, [r4, #16]
   d6d10:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d6d12:	602c      	str	r4, [r5, #0]
	}
   d6d14:	e7ea      	b.n	d6cec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d6d16:	6804      	ldr	r4, [r0, #0]
   d6d18:	2c00      	cmp	r4, #0
   d6d1a:	d0e7      	beq.n	d6cec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d6d1c:	f104 0010 	add.w	r0, r4, #16
   d6d20:	f7ff fe2a 	bl	d6978 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d6d24:	4620      	mov	r0, r4
   d6d26:	f7ff fe11 	bl	d694c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d6d2a:	2118      	movs	r1, #24
   d6d2c:	4620      	mov	r0, r4
   d6d2e:	f001 ff74 	bl	d8c1a <_ZdlPvj>
   d6d32:	e7db      	b.n	d6cec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d6d34 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d6d34:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d6d36:	2300      	movs	r3, #0
   d6d38:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d6d3a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d6d3c:	4604      	mov	r4, r0
   d6d3e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d6d40:	b12b      	cbz	r3, d6d4e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6d42:	2202      	movs	r2, #2
   d6d44:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6d46:	68eb      	ldr	r3, [r5, #12]
   d6d48:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6d4a:	68ab      	ldr	r3, [r5, #8]
   d6d4c:	60a3      	str	r3, [r4, #8]
    }
   d6d4e:	4620      	mov	r0, r4
   d6d50:	bd38      	pop	{r3, r4, r5, pc}

000d6d52 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d6d52:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6d54:	b570      	push	{r4, r5, r6, lr}
   d6d56:	4604      	mov	r4, r0
	  switch (__op)
   d6d58:	d007      	beq.n	d6d6a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d6d5a:	2a03      	cmp	r2, #3
   d6d5c:	d012      	beq.n	d6d84 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d6d5e:	2a01      	cmp	r2, #1
   d6d60:	d101      	bne.n	d6d66 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d6d62:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6d64:	6003      	str	r3, [r0, #0]
	}
   d6d66:	2000      	movs	r0, #0
   d6d68:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6d6a:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d6d6c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d6d6e:	f7fd f990 	bl	d4092 <_Znwj>
   d6d72:	4605      	mov	r5, r0
   d6d74:	b120      	cbz	r0, d6d80 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d6d76:	4631      	mov	r1, r6
   d6d78:	f7ff ffdc 	bl	d6d34 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d6d7c:	7c33      	ldrb	r3, [r6, #16]
   d6d7e:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d6d80:	6025      	str	r5, [r4, #0]
	}
   d6d82:	e7f0      	b.n	d6d66 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d6d84:	6804      	ldr	r4, [r0, #0]
   d6d86:	2c00      	cmp	r4, #0
   d6d88:	d0ed      	beq.n	d6d66 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d6d8a:	4620      	mov	r0, r4
   d6d8c:	f7ff fdde 	bl	d694c <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d6d90:	2114      	movs	r1, #20
   d6d92:	4620      	mov	r0, r4
   d6d94:	f001 ff41 	bl	d8c1a <_ZdlPvj>
   d6d98:	e7e5      	b.n	d6d66 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d6d9c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d6d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6d9e:	b089      	sub	sp, #36	; 0x24
   d6da0:	4604      	mov	r4, r0
   d6da2:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d6da4:	a801      	add	r0, sp, #4
   d6da6:	4611      	mov	r1, r2
   d6da8:	f7ff fe10 	bl	d69cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d6dac:	b1a4      	cbz	r4, d6dd8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d6dae:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d6db0:	b11d      	cbz	r5, d6dba <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d6db2:	4628      	mov	r0, r5
   d6db4:	f002 f8e4 	bl	d8f80 <strdup>
   d6db8:	4605      	mov	r5, r0
   d6dba:	a801      	add	r0, sp, #4
   d6dbc:	a903      	add	r1, sp, #12
        type_(type) {
   d6dbe:	9503      	str	r5, [sp, #12]
   d6dc0:	f8ad 4010 	strh.w	r4, [sp, #16]
   d6dc4:	f7ff fe78 	bl	d6ab8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6dc8:	a803      	add	r0, sp, #12
   d6dca:	f7ff fdd5 	bl	d6978 <_ZN8particle5ErrorD1Ev>
   d6dce:	a802      	add	r0, sp, #8
   d6dd0:	f7fd f9d3 	bl	d417a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6dd4:	b009      	add	sp, #36	; 0x24
   d6dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d6dd8:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d6dda:	2301      	movs	r3, #1
   d6ddc:	e8d5 2f4f 	ldrexb	r2, [r5]
   d6de0:	2a00      	cmp	r2, #0
   d6de2:	d103      	bne.n	d6dec <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d6de4:	e8c5 3f41 	strexb	r1, r3, [r5]
   d6de8:	2900      	cmp	r1, #0
   d6dea:	d1f7      	bne.n	d6ddc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d6dec:	d1ef      	bne.n	d6dce <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d6dee:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d6df0:	f3bf 8f5b 	dmb	ish
   d6df4:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d6df6:	1d2b      	adds	r3, r5, #4
   d6df8:	f3bf 8f5b 	dmb	ish
   d6dfc:	e853 6f00 	ldrex	r6, [r3]
   d6e00:	e843 4200 	strex	r2, r4, [r3]
   d6e04:	2a00      	cmp	r2, #0
   d6e06:	d1f9      	bne.n	d6dfc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d6e08:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d6e0c:	2e00      	cmp	r6, #0
   d6e0e:	d0de      	beq.n	d6dce <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d6e10:	4620      	mov	r0, r4
   d6e12:	f7fd ff55 	bl	d4cc0 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d6e16:	4607      	mov	r7, r0
   d6e18:	b160      	cbz	r0, d6e34 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6e1a:	f105 010c 	add.w	r1, r5, #12
   d6e1e:	4630      	mov	r0, r6
   d6e20:	f7ff fe15 	bl	d6a4e <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d6e24:	4630      	mov	r0, r6
   d6e26:	f7ff fd91 	bl	d694c <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d6e2a:	2110      	movs	r1, #16
   d6e2c:	4630      	mov	r0, r6
   d6e2e:	f001 fef4 	bl	d8c1a <_ZdlPvj>
   d6e32:	e7cc      	b.n	d6dce <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6e34:	4631      	mov	r1, r6
   d6e36:	a803      	add	r0, sp, #12
   d6e38:	f7ff ff7c 	bl	d6d34 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6e3c:	7b2b      	ldrb	r3, [r5, #12]
   d6e3e:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6e42:	2010      	movs	r0, #16
   d6e44:	f7fd f925 	bl	d4092 <_Znwj>
   d6e48:	4605      	mov	r5, r0
   d6e4a:	b1d0      	cbz	r0, d6e82 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d6e4c:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6e4e:	2014      	movs	r0, #20
   d6e50:	f7fd f91f 	bl	d4092 <_Znwj>
   d6e54:	4604      	mov	r4, r0
   d6e56:	b178      	cbz	r0, d6e78 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d6e58:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d6e5a:	4601      	mov	r1, r0
   d6e5c:	a803      	add	r0, sp, #12
   d6e5e:	f7ff fdd4 	bl	d6a0a <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6e62:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6e64:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6e66:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6e68:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d6e6a:	9205      	str	r2, [sp, #20]
   d6e6c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6e6e:	60e3      	str	r3, [r4, #12]
   d6e70:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d6e74:	9206      	str	r2, [sp, #24]
   d6e76:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d6e78:	4b06      	ldr	r3, [pc, #24]	; (d6e94 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d6e7a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6e7c:	4b06      	ldr	r3, [pc, #24]	; (d6e98 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6e7e:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d6e80:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d6e82:	a803      	add	r0, sp, #12
   d6e84:	f7ff fd62 	bl	d694c <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6e88:	2200      	movs	r2, #0
   d6e8a:	4629      	mov	r1, r5
   d6e8c:	4803      	ldr	r0, [pc, #12]	; (d6e9c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d6e8e:	f7fd ff1f 	bl	d4cd0 <application_thread_invoke>
   d6e92:	e7c7      	b.n	d6e24 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d6e94:	000d6a61 	.word	0x000d6a61
   d6e98:	000d6d53 	.word	0x000d6d53
   d6e9c:	000d4e4f 	.word	0x000d4e4f

000d6ea0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6ea0:	2200      	movs	r2, #0
   d6ea2:	6840      	ldr	r0, [r0, #4]
   d6ea4:	4611      	mov	r1, r2
   d6ea6:	f7fd bf7f 	b.w	d4da8 <network_listening>

000d6eaa <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6eaa:	2200      	movs	r2, #0
   d6eac:	6840      	ldr	r0, [r0, #4]
   d6eae:	4611      	mov	r1, r2
   d6eb0:	f7fd bf8a 	b.w	d4dc8 <network_get_listen_timeout>

000d6eb4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d6eb4:	6840      	ldr	r0, [r0, #4]
   d6eb6:	2200      	movs	r2, #0
   d6eb8:	f7fd bf7e 	b.w	d4db8 <network_set_listen_timeout>

000d6ebc <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6ebc:	6840      	ldr	r0, [r0, #4]
   d6ebe:	2200      	movs	r2, #0
   d6ec0:	f081 0101 	eor.w	r1, r1, #1
   d6ec4:	f7fd bf68 	b.w	d4d98 <network_listen>

000d6ec8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d6ec8:	2300      	movs	r3, #0
   d6eca:	6840      	ldr	r0, [r0, #4]
   d6ecc:	461a      	mov	r2, r3
   d6ece:	4619      	mov	r1, r3
   d6ed0:	f7fd bf5a 	b.w	d4d88 <network_off>

000d6ed4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d6ed4:	2300      	movs	r3, #0
   d6ed6:	6840      	ldr	r0, [r0, #4]
   d6ed8:	461a      	mov	r2, r3
   d6eda:	4619      	mov	r1, r3
   d6edc:	f7fd bf4c 	b.w	d4d78 <network_on>

000d6ee0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6ee0:	2200      	movs	r2, #0
   d6ee2:	6840      	ldr	r0, [r0, #4]
   d6ee4:	4611      	mov	r1, r2
   d6ee6:	f7fd bf3f 	b.w	d4d68 <network_ready>

000d6eea <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d6eea:	2200      	movs	r2, #0
   d6eec:	6840      	ldr	r0, [r0, #4]
   d6eee:	4611      	mov	r1, r2
   d6ef0:	f7fd bf2a 	b.w	d4d48 <network_connecting>

000d6ef4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6ef4:	6840      	ldr	r0, [r0, #4]
   d6ef6:	2200      	movs	r2, #0
   d6ef8:	2102      	movs	r1, #2
   d6efa:	f7fd bf2d 	b.w	d4d58 <network_disconnect>

000d6efe <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6efe:	2300      	movs	r3, #0
   d6f00:	6840      	ldr	r0, [r0, #4]
   d6f02:	461a      	mov	r2, r3
   d6f04:	f7fd bf18 	b.w	d4d38 <network_connect>

000d6f08 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6f08:	4b02      	ldr	r3, [pc, #8]	; (d6f14 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d6f0a:	2203      	movs	r2, #3
   d6f0c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d6f0e:	4a02      	ldr	r2, [pc, #8]	; (d6f18 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6f10:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d6f12:	4770      	bx	lr
   d6f14:	2003e638 	.word	0x2003e638
   d6f18:	000d9588 	.word	0x000d9588

000d6f1c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6f1c:	4770      	bx	lr

000d6f1e <_ZN9IPAddressD0Ev>:
   d6f1e:	b510      	push	{r4, lr}
   d6f20:	2118      	movs	r1, #24
   d6f22:	4604      	mov	r4, r0
   d6f24:	f001 fe79 	bl	d8c1a <_ZdlPvj>
   d6f28:	4620      	mov	r0, r4
   d6f2a:	bd10      	pop	{r4, pc}

000d6f2c <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6f2e:	7d03      	ldrb	r3, [r0, #20]
   d6f30:	2b06      	cmp	r3, #6
{
   d6f32:	b08d      	sub	sp, #52	; 0x34
   d6f34:	460e      	mov	r6, r1
   d6f36:	f100 0704 	add.w	r7, r0, #4
   d6f3a:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d6f3e:	d012      	beq.n	d6f66 <_ZNK9IPAddress7printToER5Print+0x3a>
   d6f40:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d6f44:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6f48:	220a      	movs	r2, #10
   d6f4a:	4630      	mov	r0, r6
   d6f4c:	f001 fad7 	bl	d84fe <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6f50:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6f52:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d6f54:	d019      	beq.n	d6f8a <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d6f56:	2c00      	cmp	r4, #0
   d6f58:	d0f4      	beq.n	d6f44 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d6f5a:	212e      	movs	r1, #46	; 0x2e
   d6f5c:	4630      	mov	r0, r6
   d6f5e:	f001 fabf 	bl	d84e0 <_ZN5Print5printEc>
   d6f62:	4404      	add	r4, r0
   d6f64:	e7ee      	b.n	d6f44 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6f66:	232f      	movs	r3, #47	; 0x2f
   d6f68:	466a      	mov	r2, sp
   d6f6a:	4639      	mov	r1, r7
   d6f6c:	200a      	movs	r0, #10
		buf[0] = 0;
   d6f6e:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6f72:	f7fd fdcd 	bl	d4b10 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d6f76:	4668      	mov	r0, sp
   d6f78:	f002 f81f 	bl	d8fba <strlen>
   d6f7c:	6833      	ldr	r3, [r6, #0]
   d6f7e:	4602      	mov	r2, r0
   d6f80:	68db      	ldr	r3, [r3, #12]
   d6f82:	4669      	mov	r1, sp
   d6f84:	4630      	mov	r0, r6
   d6f86:	4798      	blx	r3
   d6f88:	4604      	mov	r4, r0
    }
    return n;
}
   d6f8a:	4620      	mov	r0, r4
   d6f8c:	b00d      	add	sp, #52	; 0x34
   d6f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6f90 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d6f90:	b510      	push	{r4, lr}
   d6f92:	4b05      	ldr	r3, [pc, #20]	; (d6fa8 <_ZN9IPAddressC1Ev+0x18>)
   d6f94:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6f96:	2211      	movs	r2, #17
   d6f98:	f840 3b04 	str.w	r3, [r0], #4
   d6f9c:	2100      	movs	r1, #0
   d6f9e:	f001 ff99 	bl	d8ed4 <memset>
}
   d6fa2:	4620      	mov	r0, r4
   d6fa4:	bd10      	pop	{r4, pc}
   d6fa6:	bf00      	nop
   d6fa8:	000d95bc 	.word	0x000d95bc

000d6fac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d6fac:	4603      	mov	r3, r0
   d6fae:	4a07      	ldr	r2, [pc, #28]	; (d6fcc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6fb0:	b510      	push	{r4, lr}
   d6fb2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d6fb6:	f101 0210 	add.w	r2, r1, #16
   d6fba:	f851 4b04 	ldr.w	r4, [r1], #4
   d6fbe:	f843 4b04 	str.w	r4, [r3], #4
   d6fc2:	4291      	cmp	r1, r2
   d6fc4:	d1f9      	bne.n	d6fba <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6fc6:	780a      	ldrb	r2, [r1, #0]
   d6fc8:	701a      	strb	r2, [r3, #0]
}
   d6fca:	bd10      	pop	{r4, pc}
   d6fcc:	000d95bc 	.word	0x000d95bc

000d6fd0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d6fd0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6fd2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6fd6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6fda:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6fde:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d6fe2:	2304      	movs	r3, #4
   d6fe4:	6041      	str	r1, [r0, #4]
   d6fe6:	7503      	strb	r3, [r0, #20]
}
   d6fe8:	bd10      	pop	{r4, pc}

000d6fea <_ZN9IPAddressaSEPKh>:
{
   d6fea:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6fec:	78cb      	ldrb	r3, [r1, #3]
   d6fee:	9300      	str	r3, [sp, #0]
   d6ff0:	788b      	ldrb	r3, [r1, #2]
   d6ff2:	784a      	ldrb	r2, [r1, #1]
   d6ff4:	7809      	ldrb	r1, [r1, #0]
   d6ff6:	f7ff ffeb 	bl	d6fd0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d6ffa:	b002      	add	sp, #8
   d6ffc:	bd10      	pop	{r4, pc}

000d6ffe <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d6ffe:	f100 0310 	add.w	r3, r0, #16
   d7002:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d7004:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d7008:	2901      	cmp	r1, #1
   d700a:	4618      	mov	r0, r3
   d700c:	d108      	bne.n	d7020 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d700e:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d7012:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d7016:	3a01      	subs	r2, #1
   d7018:	f103 0310 	add.w	r3, r3, #16
   d701c:	d1f2      	bne.n	d7004 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d701e:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d7020:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d7022:	bf04      	itt	eq
   d7024:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d7028:	1852      	addeq	r2, r2, r1
   d702a:	e7f4      	b.n	d7016 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d702c <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d702c:	b40e      	push	{r1, r2, r3}
   d702e:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7030:	b088      	sub	sp, #32
   d7032:	af00      	add	r7, sp, #0
   d7034:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d7038:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   d703a:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d703e:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   d7040:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d7042:	462b      	mov	r3, r5
   d7044:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   d7046:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d7048:	f7fd fede 	bl	d4e08 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d704c:	280f      	cmp	r0, #15
   d704e:	687a      	ldr	r2, [r7, #4]
   d7050:	d91a      	bls.n	d7088 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   d7052:	f100 0308 	add.w	r3, r0, #8
   d7056:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d705a:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   d705c:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d7060:	1c41      	adds	r1, r0, #1
   d7062:	462b      	mov	r3, r5
   d7064:	4668      	mov	r0, sp
        va_start(args, fmt);
   d7066:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d7068:	f7fd fece 	bl	d4e08 <vsnprintf>
        if (n > 0) {
   d706c:	1e02      	subs	r2, r0, #0
   d706e:	dd04      	ble.n	d707a <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   d7070:	6823      	ldr	r3, [r4, #0]
   d7072:	4669      	mov	r1, sp
   d7074:	689b      	ldr	r3, [r3, #8]
   d7076:	4620      	mov	r0, r4
   d7078:	4798      	blx	r3
   d707a:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   d707c:	3720      	adds	r7, #32
   d707e:	46bd      	mov	sp, r7
   d7080:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d7084:	b003      	add	sp, #12
   d7086:	4770      	bx	lr
    } else if (n > 0) {
   d7088:	2800      	cmp	r0, #0
   d708a:	d0f7      	beq.n	d707c <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   d708c:	6823      	ldr	r3, [r4, #0]
   d708e:	4602      	mov	r2, r0
   d7090:	689b      	ldr	r3, [r3, #8]
   d7092:	f107 0110 	add.w	r1, r7, #16
   d7096:	4620      	mov	r0, r4
   d7098:	4798      	blx	r3
}
   d709a:	e7ef      	b.n	d707c <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000d709c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d709c:	b510      	push	{r4, lr}
          _M_dispose();
   d709e:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d70a0:	4604      	mov	r4, r0
          _M_dispose();
   d70a2:	689b      	ldr	r3, [r3, #8]
   d70a4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d70a6:	68a3      	ldr	r3, [r4, #8]
   d70a8:	3b01      	subs	r3, #1
   d70aa:	60a3      	str	r3, [r4, #8]
   d70ac:	b92b      	cbnz	r3, d70ba <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d70ae:	6823      	ldr	r3, [r4, #0]
   d70b0:	4620      	mov	r0, r4
   d70b2:	68db      	ldr	r3, [r3, #12]
    }
   d70b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d70b8:	4718      	bx	r3
    }
   d70ba:	bd10      	pop	{r4, pc}

000d70bc <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d70bc:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d70be:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   d70c0:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d70c4:	689b      	ldr	r3, [r3, #8]
   d70c6:	2201      	movs	r2, #1
   d70c8:	f10d 0107 	add.w	r1, sp, #7
   d70cc:	4798      	blx	r3
}
   d70ce:	b003      	add	sp, #12
   d70d0:	f85d fb04 	ldr.w	pc, [sp], #4

000d70d4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
    class __shared_ptr
   d70d4:	b538      	push	{r3, r4, r5, lr}
   d70d6:	680b      	ldr	r3, [r1, #0]
   d70d8:	6003      	str	r3, [r0, #0]
   d70da:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d70dc:	6843      	ldr	r3, [r0, #4]
   d70de:	429d      	cmp	r5, r3
    class __shared_ptr
   d70e0:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d70e2:	d00c      	beq.n	d70fe <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d70e4:	b115      	cbz	r5, d70ec <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d70e6:	686b      	ldr	r3, [r5, #4]
   d70e8:	3301      	adds	r3, #1
   d70ea:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d70ec:	6860      	ldr	r0, [r4, #4]
   d70ee:	b128      	cbz	r0, d70fc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d70f0:	6843      	ldr	r3, [r0, #4]
   d70f2:	3b01      	subs	r3, #1
   d70f4:	6043      	str	r3, [r0, #4]
   d70f6:	b90b      	cbnz	r3, d70fc <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d70f8:	f7ff ffd0 	bl	d709c <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d70fc:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d70fe:	4620      	mov	r0, r4
   d7100:	bd38      	pop	{r3, r4, r5, pc}

000d7102 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d7102:	460b      	mov	r3, r1
   d7104:	4611      	mov	r1, r2
      : _M_ptr(0), _M_refcount()
   d7106:	2200      	movs	r2, #0
   d7108:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d710a:	e9c0 2200 	strd	r2, r2, [r0]
   d710e:	4604      	mov	r4, r0
        t_ = t;
   d7110:	6083      	str	r3, [r0, #8]
    if (t) {
   d7112:	b90b      	cbnz	r3, d7118 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   d7114:	4620      	mov	r0, r4
   d7116:	bd10      	pop	{r4, pc}
    class shared_ptr : public __shared_ptr<_Tp>
   d7118:	f7ff ffdc 	bl	d70d4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d711c:	e7fa      	b.n	d7114 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d711e <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   d711e:	6883      	ldr	r3, [r0, #8]
   d7120:	b1eb      	cbz	r3, d715e <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   d7122:	781a      	ldrb	r2, [r3, #0]
   d7124:	2a03      	cmp	r2, #3
   d7126:	d81a      	bhi.n	d715e <_ZNK5spark9JSONValue4typeEv+0x40>
   d7128:	e8df f002 	tbb	[pc, r2]
   d712c:	1b021704 	.word	0x1b021704
   d7130:	2005      	movs	r0, #5
   d7132:	4770      	bx	lr
        const char c = d_->json[t_->start];
   d7134:	6802      	ldr	r2, [r0, #0]
   d7136:	685b      	ldr	r3, [r3, #4]
   d7138:	6852      	ldr	r2, [r2, #4]
   d713a:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d713c:	282d      	cmp	r0, #45	; 0x2d
   d713e:	d012      	beq.n	d7166 <_ZNK5spark9JSONValue4typeEv+0x48>
   d7140:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d7144:	2b09      	cmp	r3, #9
   d7146:	d90e      	bls.n	d7166 <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d7148:	2874      	cmp	r0, #116	; 0x74
   d714a:	d00e      	beq.n	d716a <_ZNK5spark9JSONValue4typeEv+0x4c>
   d714c:	2866      	cmp	r0, #102	; 0x66
   d714e:	d00c      	beq.n	d716a <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d7150:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d7154:	4258      	negs	r0, r3
   d7156:	4158      	adcs	r0, r3
   d7158:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   d715a:	2006      	movs	r0, #6
   d715c:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   d715e:	2000      	movs	r0, #0
   d7160:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d7162:	2004      	movs	r0, #4
   d7164:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d7166:	2003      	movs	r0, #3
   d7168:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d716a:	2002      	movs	r0, #2
}
   d716c:	4770      	bx	lr

000d716e <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   d716e:	b510      	push	{r4, lr}
   d7170:	4604      	mov	r4, r0
    switch (type()) {
   d7172:	f7ff ffd4 	bl	d711e <_ZNK5spark9JSONValue4typeEv>
   d7176:	2802      	cmp	r0, #2
   d7178:	d00e      	beq.n	d7198 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   d717a:	1ec3      	subs	r3, r0, #3
   d717c:	b2db      	uxtb	r3, r3
   d717e:	2b01      	cmp	r3, #1
   d7180:	d814      	bhi.n	d71ac <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   d7182:	6822      	ldr	r2, [r4, #0]
   d7184:	68a3      	ldr	r3, [r4, #8]
   d7186:	6850      	ldr	r0, [r2, #4]
   d7188:	685b      	ldr	r3, [r3, #4]
}
   d718a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   d718e:	220a      	movs	r2, #10
   d7190:	2100      	movs	r1, #0
   d7192:	4418      	add	r0, r3
   d7194:	f001 bfc6 	b.w	d9124 <strtol>
        const char* const s = d_->json + t_->start;
   d7198:	6822      	ldr	r2, [r4, #0]
   d719a:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d719c:	6852      	ldr	r2, [r2, #4]
   d719e:	685b      	ldr	r3, [r3, #4]
   d71a0:	5cd0      	ldrb	r0, [r2, r3]
   d71a2:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d71a6:	4258      	negs	r0, r3
   d71a8:	4158      	adcs	r0, r3
}
   d71aa:	bd10      	pop	{r4, pc}
    switch (type()) {
   d71ac:	2000      	movs	r0, #0
   d71ae:	e7fc      	b.n	d71aa <_ZNK5spark9JSONValue5toIntEv+0x3c>

000d71b0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d71b0:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d71b2:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d71b4:	e9c0 3300 	strd	r3, r3, [r0]
   d71b8:	4604      	mov	r4, r0
        n_(0) {
   d71ba:	480e      	ldr	r0, [pc, #56]	; (d71f4 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d71bc:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d71c0:	b1a9      	cbz	r1, d71ee <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d71c2:	780b      	ldrb	r3, [r1, #0]
   d71c4:	2b03      	cmp	r3, #3
   d71c6:	d006      	beq.n	d71d6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d71c8:	b98b      	cbnz	r3, d71ee <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d71ca:	6813      	ldr	r3, [r2, #0]
   d71cc:	6858      	ldr	r0, [r3, #4]
   d71ce:	684b      	ldr	r3, [r1, #4]
   d71d0:	5cc3      	ldrb	r3, [r0, r3]
   d71d2:	2b6e      	cmp	r3, #110	; 0x6e
   d71d4:	d007      	beq.n	d71e6 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d71d6:	6813      	ldr	r3, [r2, #0]
   d71d8:	684d      	ldr	r5, [r1, #4]
   d71da:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d71dc:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d71de:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d71e0:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d71e2:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d71e4:	60e3      	str	r3, [r4, #12]
   d71e6:	4611      	mov	r1, r2
   d71e8:	4620      	mov	r0, r4
   d71ea:	f7ff ff73 	bl	d70d4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d71ee:	4620      	mov	r0, r4
   d71f0:	bd38      	pop	{r3, r4, r5, pc}
   d71f2:	bf00      	nop
   d71f4:	000d9627 	.word	0x000d9627

000d71f8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d71f8:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d71fa:	2500      	movs	r5, #0
   d71fc:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d71fe:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   d7202:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d7206:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d720a:	4604      	mov	r4, r0
   d720c:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   d720e:	b14b      	cbz	r3, d7224 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d7210:	781a      	ldrb	r2, [r3, #0]
   d7212:	2a01      	cmp	r2, #1
   d7214:	d106      	bne.n	d7224 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d7216:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d721a:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d721c:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d721e:	6143      	str	r3, [r0, #20]
   d7220:	f7ff ff58 	bl	d70d4 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d7224:	4620      	mov	r0, r4
   d7226:	bd38      	pop	{r3, r4, r5, pc}

000d7228 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   d7228:	b510      	push	{r4, lr}
    if (!n_) {
   d722a:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d722c:	4604      	mov	r4, r0
    if (!n_) {
   d722e:	b163      	cbz	r3, d724a <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   d7230:	6880      	ldr	r0, [r0, #8]
   d7232:	60e0      	str	r0, [r4, #12]
    --n_;
   d7234:	3b01      	subs	r3, #1
    ++t_;
   d7236:	3010      	adds	r0, #16
   d7238:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d723a:	6120      	str	r0, [r4, #16]
    --n_;
   d723c:	6163      	str	r3, [r4, #20]
    if (n_) {
   d723e:	b113      	cbz	r3, d7246 <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d7240:	f7ff fedd 	bl	d6ffe <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d7244:	60a0      	str	r0, [r4, #8]
    return true;
   d7246:	2001      	movs	r0, #1
   d7248:	e000      	b.n	d724c <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d724a:	4618      	mov	r0, r3
}
   d724c:	bd10      	pop	{r4, pc}

000d724e <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   d724e:	b510      	push	{r4, lr}
    write('}');
   d7250:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   d7252:	4604      	mov	r4, r0
    write('}');
   d7254:	f7ff ff32 	bl	d70bc <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d7258:	2301      	movs	r3, #1
   d725a:	7123      	strb	r3, [r4, #4]
}
   d725c:	4620      	mov	r0, r4
   d725e:	bd10      	pop	{r4, pc}

000d7260 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   d7260:	b508      	push	{r3, lr}
    switch (state_) {
   d7262:	7903      	ldrb	r3, [r0, #4]
   d7264:	2b01      	cmp	r3, #1
   d7266:	d002      	beq.n	d726e <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d7268:	2b02      	cmp	r3, #2
   d726a:	d004      	beq.n	d7276 <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   d726c:	bd08      	pop	{r3, pc}
        write(',');
   d726e:	212c      	movs	r1, #44	; 0x2c
        write(':');
   d7270:	f7ff ff24 	bl	d70bc <_ZN5spark10JSONWriter5writeEc>
}
   d7274:	e7fa      	b.n	d726c <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   d7276:	213a      	movs	r1, #58	; 0x3a
   d7278:	e7fa      	b.n	d7270 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000d727a <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   d727a:	b510      	push	{r4, lr}
   d727c:	4604      	mov	r4, r0
    writeSeparator();
   d727e:	f7ff ffef 	bl	d7260 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d7282:	4620      	mov	r0, r4
   d7284:	217b      	movs	r1, #123	; 0x7b
   d7286:	f7ff ff19 	bl	d70bc <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d728a:	2300      	movs	r3, #0
   d728c:	7123      	strb	r3, [r4, #4]
}
   d728e:	4620      	mov	r0, r4
   d7290:	bd10      	pop	{r4, pc}
	...

000d7294 <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   d7294:	b513      	push	{r0, r1, r4, lr}
   d7296:	4604      	mov	r4, r0
   d7298:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d729a:	f7ff ffe1 	bl	d7260 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d729e:	6823      	ldr	r3, [r4, #0]
   d72a0:	9a01      	ldr	r2, [sp, #4]
   d72a2:	68db      	ldr	r3, [r3, #12]
   d72a4:	4903      	ldr	r1, [pc, #12]	; (d72b4 <_ZN5spark10JSONWriter5valueEi+0x20>)
   d72a6:	4620      	mov	r0, r4
   d72a8:	4798      	blx	r3
    state_ = NEXT;
   d72aa:	2301      	movs	r3, #1
}
   d72ac:	4620      	mov	r0, r4
    state_ = NEXT;
   d72ae:	7123      	strb	r3, [r4, #4]
}
   d72b0:	b002      	add	sp, #8
   d72b2:	bd10      	pop	{r4, pc}
   d72b4:	000d95c8 	.word	0x000d95c8

000d72b8 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d72b8:	b513      	push	{r0, r1, r4, lr}
   d72ba:	4604      	mov	r4, r0
   d72bc:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d72be:	f7ff ffcf 	bl	d7260 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d72c2:	6823      	ldr	r3, [r4, #0]
   d72c4:	9a01      	ldr	r2, [sp, #4]
   d72c6:	68db      	ldr	r3, [r3, #12]
   d72c8:	4903      	ldr	r1, [pc, #12]	; (d72d8 <_ZN5spark10JSONWriter5valueEj+0x20>)
   d72ca:	4620      	mov	r0, r4
   d72cc:	4798      	blx	r3
    state_ = NEXT;
   d72ce:	2301      	movs	r3, #1
}
   d72d0:	4620      	mov	r0, r4
    state_ = NEXT;
   d72d2:	7123      	strb	r3, [r4, #4]
}
   d72d4:	b002      	add	sp, #8
   d72d6:	bd10      	pop	{r4, pc}
   d72d8:	000d95cb 	.word	0x000d95cb

000d72dc <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d72dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d72e0:	460d      	mov	r5, r1
   d72e2:	4617      	mov	r7, r2
    write('"');
   d72e4:	2122      	movs	r1, #34	; 0x22
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d72e6:	f8df 80a0 	ldr.w	r8, [pc, #160]	; d7388 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d72ea:	4604      	mov	r4, r0
    const char* const end = str + size;
   d72ec:	442f      	add	r7, r5
    write('"');
   d72ee:	f7ff fee5 	bl	d70bc <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   d72f2:	4629      	mov	r1, r5
    while (s != end) {
   d72f4:	42bd      	cmp	r5, r7
   d72f6:	462a      	mov	r2, r5
   d72f8:	d038      	beq.n	d736c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   d72fa:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d72fe:	2e22      	cmp	r6, #34	; 0x22
   d7300:	d003      	beq.n	d730a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d7302:	2e5c      	cmp	r6, #92	; 0x5c
   d7304:	d001      	beq.n	d730a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d7306:	2e1f      	cmp	r6, #31
   d7308:	d8f4      	bhi.n	d72f4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   d730a:	6823      	ldr	r3, [r4, #0]
   d730c:	1a52      	subs	r2, r2, r1
   d730e:	689b      	ldr	r3, [r3, #8]
   d7310:	4620      	mov	r0, r4
   d7312:	4798      	blx	r3
            write('\\');
   d7314:	215c      	movs	r1, #92	; 0x5c
   d7316:	4620      	mov	r0, r4
   d7318:	f7ff fed0 	bl	d70bc <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d731c:	2e0d      	cmp	r6, #13
   d731e:	d80a      	bhi.n	d7336 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   d7320:	2e07      	cmp	r6, #7
   d7322:	d91c      	bls.n	d735e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d7324:	f1a6 0308 	sub.w	r3, r6, #8
   d7328:	2b05      	cmp	r3, #5
   d732a:	d818      	bhi.n	d735e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d732c:	e8df f003 	tbb	[pc, r3]
   d7330:	17110f0d 	.word	0x17110f0d
   d7334:	1513      	.short	0x1513
   d7336:	2e22      	cmp	r6, #34	; 0x22
   d7338:	d001      	beq.n	d733e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d733a:	2e5c      	cmp	r6, #92	; 0x5c
   d733c:	d10f      	bne.n	d735e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   d733e:	4631      	mov	r1, r6
                write('b');
   d7340:	4620      	mov	r0, r4
   d7342:	f7ff febb 	bl	d70bc <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   d7346:	4629      	mov	r1, r5
    while (s != end) {
   d7348:	e7d4      	b.n	d72f4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   d734a:	2162      	movs	r1, #98	; 0x62
   d734c:	e7f8      	b.n	d7340 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   d734e:	2174      	movs	r1, #116	; 0x74
   d7350:	e7f6      	b.n	d7340 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   d7352:	216e      	movs	r1, #110	; 0x6e
   d7354:	e7f4      	b.n	d7340 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   d7356:	2166      	movs	r1, #102	; 0x66
   d7358:	e7f2      	b.n	d7340 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   d735a:	2172      	movs	r1, #114	; 0x72
   d735c:	e7f0      	b.n	d7340 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   d735e:	6823      	ldr	r3, [r4, #0]
   d7360:	4632      	mov	r2, r6
   d7362:	68db      	ldr	r3, [r3, #12]
   d7364:	4641      	mov	r1, r8
   d7366:	4620      	mov	r0, r4
   d7368:	4798      	blx	r3
                break;
   d736a:	e7ec      	b.n	d7346 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
   d736c:	428d      	cmp	r5, r1
   d736e:	d004      	beq.n	d737a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   d7370:	6823      	ldr	r3, [r4, #0]
   d7372:	1a6a      	subs	r2, r5, r1
   d7374:	689b      	ldr	r3, [r3, #8]
   d7376:	4620      	mov	r0, r4
   d7378:	4798      	blx	r3
    }
    write('"');
   d737a:	2122      	movs	r1, #34	; 0x22
   d737c:	4620      	mov	r0, r4
   d737e:	f7ff fe9d 	bl	d70bc <_ZN5spark10JSONWriter5writeEc>
}
   d7382:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7386:	bf00      	nop
   d7388:	000d95ce 	.word	0x000d95ce

000d738c <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d738c:	b513      	push	{r0, r1, r4, lr}
   d738e:	4604      	mov	r4, r0
   d7390:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d7394:	f7ff ff64 	bl	d7260 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d7398:	4620      	mov	r0, r4
   d739a:	e9dd 2100 	ldrd	r2, r1, [sp]
   d739e:	f7ff ff9d 	bl	d72dc <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d73a2:	2302      	movs	r3, #2
}
   d73a4:	4620      	mov	r0, r4
    state_ = VALUE;
   d73a6:	7123      	strb	r3, [r4, #4]
}
   d73a8:	b002      	add	sp, #8
   d73aa:	bd10      	pop	{r4, pc}

000d73ac <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d73ac:	b513      	push	{r0, r1, r4, lr}
   d73ae:	4604      	mov	r4, r0
   d73b0:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d73b4:	f7ff ff54 	bl	d7260 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d73b8:	4620      	mov	r0, r4
   d73ba:	e9dd 2100 	ldrd	r2, r1, [sp]
   d73be:	f7ff ff8d 	bl	d72dc <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d73c2:	2301      	movs	r3, #1
}
   d73c4:	4620      	mov	r0, r4
    state_ = NEXT;
   d73c6:	7123      	strb	r3, [r4, #4]
}
   d73c8:	b002      	add	sp, #8
   d73ca:	bd10      	pop	{r4, pc}

000d73cc <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d73cc:	6880      	ldr	r0, [r0, #8]
   d73ce:	6803      	ldr	r3, [r0, #0]
   d73d0:	68db      	ldr	r3, [r3, #12]
   d73d2:	4718      	bx	r3

000d73d4 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   d73d4:	4770      	bx	lr

000d73d6 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d73d6:	4608      	mov	r0, r1
   d73d8:	b111      	cbz	r1, d73e0 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d73da:	680b      	ldr	r3, [r1, #0]
   d73dc:	685b      	ldr	r3, [r3, #4]
   d73de:	4718      	bx	r3
}
   d73e0:	4770      	bx	lr

000d73e2 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d73e2:	4770      	bx	lr

000d73e4 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   d73e4:	4770      	bx	lr

000d73e6 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   d73e6:	4770      	bx	lr

000d73e8 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d73e8:	b538      	push	{r3, r4, r5, lr}
   d73ea:	4604      	mov	r4, r0
   d73ec:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d73ee:	6800      	ldr	r0, [r0, #0]
   d73f0:	212e      	movs	r1, #46	; 0x2e
   d73f2:	f001 fda8 	bl	d8f46 <strchrnul>
    size = s - category;
   d73f6:	6823      	ldr	r3, [r4, #0]
   d73f8:	1ac3      	subs	r3, r0, r3
   d73fa:	602b      	str	r3, [r5, #0]
    if (size) {
   d73fc:	b123      	cbz	r3, d7408 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d73fe:	7803      	ldrb	r3, [r0, #0]
   d7400:	b103      	cbz	r3, d7404 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d7402:	3001      	adds	r0, #1
   d7404:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d7406:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
}
   d7408:	4618      	mov	r0, r3
   d740a:	bd38      	pop	{r3, r4, r5, pc}

000d740c <_ZN5spark16JSONStreamWriterD0Ev>:
   d740c:	b510      	push	{r4, lr}
   d740e:	210c      	movs	r1, #12
   d7410:	4604      	mov	r4, r0
   d7412:	f001 fc02 	bl	d8c1a <_ZdlPvj>
   d7416:	4620      	mov	r0, r4
   d7418:	bd10      	pop	{r4, pc}

000d741a <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d741a:	b510      	push	{r4, lr}
   d741c:	2104      	movs	r1, #4
   d741e:	4604      	mov	r4, r0
   d7420:	f001 fbfb 	bl	d8c1a <_ZdlPvj>
   d7424:	4620      	mov	r0, r4
   d7426:	bd10      	pop	{r4, pc}

000d7428 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d7428:	b510      	push	{r4, lr}
   d742a:	2104      	movs	r1, #4
   d742c:	4604      	mov	r4, r0
   d742e:	f001 fbf4 	bl	d8c1a <_ZdlPvj>
   d7432:	4620      	mov	r0, r4
   d7434:	bd10      	pop	{r4, pc}

000d7436 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   d7436:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d7438:	f001 fd8f 	bl	d8f5a <strcmp>
}
   d743c:	fab0 f080 	clz	r0, r0
   d7440:	0940      	lsrs	r0, r0, #5
   d7442:	bd08      	pop	{r3, pc}

000d7444 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d7444:	b510      	push	{r4, lr}
   d7446:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d7448:	f001 fae8 	bl	d8a1c <_Z16_fetch_usbserialv>
   d744c:	4284      	cmp	r4, r0
   d744e:	d010      	beq.n	d7472 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d7450:	f001 fa58 	bl	d8904 <_Z22__fetch_global_Serial1v>
   d7454:	4284      	cmp	r4, r0
   d7456:	d105      	bne.n	d7464 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   d7458:	f001 fa54 	bl	d8904 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d745c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   d7460:	f001 ba4d 	b.w	d88fe <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d7464:	b12c      	cbz	r4, d7472 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   d7466:	6823      	ldr	r3, [r4, #0]
   d7468:	4620      	mov	r0, r4
   d746a:	685b      	ldr	r3, [r3, #4]
}
   d746c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d7470:	4718      	bx	r3
   d7472:	bd10      	pop	{r4, pc}

000d7474 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d7474:	b513      	push	{r0, r1, r4, lr}
   d7476:	4604      	mov	r4, r0
    return value(val, strlen(val));
   d7478:	4608      	mov	r0, r1
   d747a:	9101      	str	r1, [sp, #4]
   d747c:	f001 fd9d 	bl	d8fba <strlen>
   d7480:	9901      	ldr	r1, [sp, #4]
   d7482:	4602      	mov	r2, r0
   d7484:	4620      	mov	r0, r4
}
   d7486:	b002      	add	sp, #8
   d7488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   d748c:	f7ff bf8e 	b.w	d73ac <_ZN5spark10JSONWriter5valueEPKcj>

000d7490 <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   d7490:	b513      	push	{r0, r1, r4, lr}
   d7492:	4604      	mov	r4, r0
    write(str, strlen(str));
   d7494:	4608      	mov	r0, r1
   d7496:	9101      	str	r1, [sp, #4]
   d7498:	f001 fd8f 	bl	d8fba <strlen>
   d749c:	6823      	ldr	r3, [r4, #0]
   d749e:	9901      	ldr	r1, [sp, #4]
   d74a0:	68db      	ldr	r3, [r3, #12]
   d74a2:	4602      	mov	r2, r0
   d74a4:	4620      	mov	r0, r4
}
   d74a6:	b002      	add	sp, #8
   d74a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   d74ac:	4718      	bx	r3

000d74ae <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   d74ae:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d74b0:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   d74b2:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d74b6:	68db      	ldr	r3, [r3, #12]
   d74b8:	2201      	movs	r2, #1
   d74ba:	f10d 0107 	add.w	r1, sp, #7
   d74be:	4798      	blx	r3
}
   d74c0:	b003      	add	sp, #12
   d74c2:	f85d fb04 	ldr.w	pc, [sp], #4

000d74c6 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d74c6:	b40e      	push	{r1, r2, r3}
   d74c8:	b503      	push	{r0, r1, lr}
   d74ca:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   d74cc:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d74ce:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   d74d2:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   d74d4:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   d74d6:	f001 f830 	bl	d853a <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   d74da:	b002      	add	sp, #8
   d74dc:	f85d eb04 	ldr.w	lr, [sp], #4
   d74e0:	b003      	add	sp, #12
   d74e2:	4770      	bx	lr

000d74e4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d74e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   d74e8:	e9d0 9500 	ldrd	r9, r5, [r0]
   d74ec:	f04f 0814 	mov.w	r8, #20
   d74f0:	fb08 f505 	mul.w	r5, r8, r5
   d74f4:	9300      	str	r3, [sp, #0]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d74f6:	10ab      	asrs	r3, r5, #2
   d74f8:	4d18      	ldr	r5, [pc, #96]	; (d755c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d74fa:	4617      	mov	r7, r2
   d74fc:	435d      	muls	r5, r3
   d74fe:	464c      	mov	r4, r9
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d7500:	2d00      	cmp	r5, #0
   d7502:	dd23      	ble.n	d754c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
   d7504:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   d7506:	fb08 f006 	mul.w	r0, r8, r6
   d750a:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d750e:	463a      	mov	r2, r7
   d7510:	f8ba b004 	ldrh.w	fp, [sl, #4]
   d7514:	5820      	ldr	r0, [r4, r0]
   d7516:	9101      	str	r1, [sp, #4]
   d7518:	455f      	cmp	r7, fp
   d751a:	bf28      	it	cs
   d751c:	465a      	movcs	r2, fp
   d751e:	f001 fd54 	bl	d8fca <strncmp>
                if (cmp == 0) {
   d7522:	9901      	ldr	r1, [sp, #4]
   d7524:	2301      	movs	r3, #1
   d7526:	b978      	cbnz	r0, d7548 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
   d7528:	455f      	cmp	r7, fp
   d752a:	d103      	bne.n	d7534 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d752c:	9a00      	ldr	r2, [sp, #0]
   d752e:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d7530:	4635      	mov	r5, r6
   d7532:	e7e5      	b.n	d7500 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
   d7534:	bf8c      	ite	hi
   d7536:	2001      	movhi	r0, #1
   d7538:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d753a:	2800      	cmp	r0, #0
   d753c:	d0f8      	beq.n	d7530 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d753e:	1bae      	subs	r6, r5, r6
	      ++__first;
   d7540:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
   d7544:	3e01      	subs	r6, #1
   d7546:	e7f3      	b.n	d7530 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
   d7548:	0fc0      	lsrs	r0, r0, #31
   d754a:	e7f6      	b.n	d753a <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
   d754c:	eba4 0409 	sub.w	r4, r4, r9
}
   d7550:	4802      	ldr	r0, [pc, #8]	; (d755c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d7552:	10a4      	asrs	r4, r4, #2
   d7554:	4360      	muls	r0, r4
   d7556:	b003      	add	sp, #12
   d7558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d755c:	cccccccd 	.word	0xcccccccd

000d7560 <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d7560:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   d7562:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   d7564:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d7566:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   d7568:	b30b      	cbz	r3, d75ae <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
   d756a:	b301      	cbz	r1, d75ae <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
        size_t size = 0; // Name length
   d756c:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d756e:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   d7572:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   d7574:	a903      	add	r1, sp, #12
   d7576:	a801      	add	r0, sp, #4
   d7578:	f7ff ff36 	bl	d73e8 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d757c:	4601      	mov	r1, r0
   d757e:	b1b0      	cbz	r0, d75ae <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
            const int index = nodeIndex(*pNodes, name, size, found);
   d7580:	f10d 030b 	add.w	r3, sp, #11
   d7584:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   d7586:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   d758a:	4620      	mov	r0, r4
   d758c:	f7ff ffaa 	bl	d74e4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d7590:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d7594:	b15b      	cbz	r3, d75ae <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
    return data_[i];
   d7596:	6824      	ldr	r4, [r4, #0]
   d7598:	2314      	movs	r3, #20
   d759a:	fb03 4000 	mla	r0, r3, r0, r4
            pNodes = &node.nodes;
   d759e:	f100 0408 	add.w	r4, r0, #8
            if (node.level >= 0) {
   d75a2:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   d75a6:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d75a8:	bfa8      	it	ge
   d75aa:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
   d75ac:	e7e2      	b.n	d7574 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   d75ae:	4630      	mov	r0, r6
   d75b0:	b004      	add	sp, #16
   d75b2:	bd70      	pop	{r4, r5, r6, pc}

000d75b4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d75b4:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d75b6:	4c0a      	ldr	r4, [pc, #40]	; (d75e0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d75b8:	7823      	ldrb	r3, [r4, #0]
   d75ba:	f3bf 8f5b 	dmb	ish
   d75be:	07db      	lsls	r3, r3, #31
   d75c0:	d40b      	bmi.n	d75da <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
   d75c2:	4620      	mov	r0, r4
   d75c4:	f7fc fd74 	bl	d40b0 <__cxa_guard_acquire>
   d75c8:	b138      	cbz	r0, d75da <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x26>
   d75ca:	4620      	mov	r0, r4
   d75cc:	f7fc fd75 	bl	d40ba <__cxa_guard_release>
   d75d0:	4a04      	ldr	r2, [pc, #16]	; (d75e4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d75d2:	4905      	ldr	r1, [pc, #20]	; (d75e8 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d75d4:	4805      	ldr	r0, [pc, #20]	; (d75ec <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
   d75d6:	f001 fb1b 	bl	d8c10 <__aeabi_atexit>
}
   d75da:	4804      	ldr	r0, [pc, #16]	; (d75ec <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x38>)
   d75dc:	bd10      	pop	{r4, pc}
   d75de:	bf00      	nop
   d75e0:	2003e644 	.word	0x2003e644
   d75e4:	2003dee8 	.word	0x2003dee8
   d75e8:	000d73e5 	.word	0x000d73e5
   d75ec:	2003de78 	.word	0x2003de78

000d75f0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d75f0:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d75f2:	4c0a      	ldr	r4, [pc, #40]	; (d761c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d75f4:	7823      	ldrb	r3, [r4, #0]
   d75f6:	f3bf 8f5b 	dmb	ish
   d75fa:	07db      	lsls	r3, r3, #31
   d75fc:	d40b      	bmi.n	d7616 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
   d75fe:	4620      	mov	r0, r4
   d7600:	f7fc fd56 	bl	d40b0 <__cxa_guard_acquire>
   d7604:	b138      	cbz	r0, d7616 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x26>
   d7606:	4620      	mov	r0, r4
   d7608:	f7fc fd57 	bl	d40ba <__cxa_guard_release>
   d760c:	4a04      	ldr	r2, [pc, #16]	; (d7620 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d760e:	4905      	ldr	r1, [pc, #20]	; (d7624 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d7610:	4805      	ldr	r0, [pc, #20]	; (d7628 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
   d7612:	f001 fafd 	bl	d8c10 <__aeabi_atexit>
    return &factory;
}
   d7616:	4804      	ldr	r0, [pc, #16]	; (d7628 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x38>)
   d7618:	bd10      	pop	{r4, pc}
   d761a:	bf00      	nop
   d761c:	2003e648 	.word	0x2003e648
   d7620:	2003dee8 	.word	0x2003dee8
   d7624:	000d73e3 	.word	0x000d73e3
   d7628:	2003de7c 	.word	0x2003de7c

000d762c <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d762c:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   d762e:	2500      	movs	r5, #0
   d7630:	4604      	mov	r4, r0
   d7632:	e9c0 5500 	strd	r5, r5, [r0]
   d7636:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d763a:	6085      	str	r5, [r0, #8]
   d763c:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   d763e:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   d7642:	f7fd fa2d 	bl	d4aa0 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d7646:	f7ff ffb5 	bl	d75b4 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d764a:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d764c:	f7ff ffd0 	bl	d75f0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d7650:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d7652:	6220      	str	r0, [r4, #32]
}
   d7654:	4620      	mov	r0, r4
   d7656:	bd38      	pop	{r3, r4, r5, pc}

000d7658 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d7658:	b510      	push	{r4, lr}
    static LogManager mgr;
   d765a:	4c0b      	ldr	r4, [pc, #44]	; (d7688 <_ZN5spark10LogManager8instanceEv+0x30>)
   d765c:	7823      	ldrb	r3, [r4, #0]
   d765e:	f3bf 8f5b 	dmb	ish
   d7662:	07db      	lsls	r3, r3, #31
   d7664:	d40e      	bmi.n	d7684 <_ZN5spark10LogManager8instanceEv+0x2c>
   d7666:	4620      	mov	r0, r4
   d7668:	f7fc fd22 	bl	d40b0 <__cxa_guard_acquire>
   d766c:	b150      	cbz	r0, d7684 <_ZN5spark10LogManager8instanceEv+0x2c>
   d766e:	4807      	ldr	r0, [pc, #28]	; (d768c <_ZN5spark10LogManager8instanceEv+0x34>)
   d7670:	f7ff ffdc 	bl	d762c <_ZN5spark10LogManagerC1Ev>
   d7674:	4620      	mov	r0, r4
   d7676:	f7fc fd20 	bl	d40ba <__cxa_guard_release>
   d767a:	4a05      	ldr	r2, [pc, #20]	; (d7690 <_ZN5spark10LogManager8instanceEv+0x38>)
   d767c:	4905      	ldr	r1, [pc, #20]	; (d7694 <_ZN5spark10LogManager8instanceEv+0x3c>)
   d767e:	4803      	ldr	r0, [pc, #12]	; (d768c <_ZN5spark10LogManager8instanceEv+0x34>)
   d7680:	f001 fac6 	bl	d8c10 <__aeabi_atexit>
    return &mgr;
}
   d7684:	4801      	ldr	r0, [pc, #4]	; (d768c <_ZN5spark10LogManager8instanceEv+0x34>)
   d7686:	bd10      	pop	{r4, pc}
   d7688:	2003e640 	.word	0x2003e640
   d768c:	2003e650 	.word	0x2003e650
   d7690:	2003dee8 	.word	0x2003dee8
   d7694:	000d7aed 	.word	0x000d7aed

000d7698 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d7698:	4a02      	ldr	r2, [pc, #8]	; (d76a4 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d769a:	4903      	ldr	r1, [pc, #12]	; (d76a8 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d769c:	4803      	ldr	r0, [pc, #12]	; (d76ac <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d769e:	2300      	movs	r3, #0
   d76a0:	f7fd baf6 	b.w	d4c90 <log_set_callbacks>
   d76a4:	000d79c9 	.word	0x000d79c9
   d76a8:	000d7955 	.word	0x000d7955
   d76ac:	000d78d5 	.word	0x000d78d5

000d76b0 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d76b0:	2300      	movs	r3, #0
   d76b2:	461a      	mov	r2, r3
   d76b4:	4619      	mov	r1, r3
   d76b6:	4618      	mov	r0, r3
   d76b8:	f7fd baea 	b.w	d4c90 <log_set_callbacks>

000d76bc <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d76bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   d76be:	690d      	ldr	r5, [r1, #16]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d76c0:	f851 3b04 	ldr.w	r3, [r1], #4
   d76c4:	9300      	str	r3, [sp, #0]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d76c6:	4604      	mov	r4, r0
   d76c8:	a801      	add	r0, sp, #4
   d76ca:	f7fe fadc 	bl	d5c86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d76ce:	466a      	mov	r2, sp
   d76d0:	4629      	mov	r1, r5
   d76d2:	4620      	mov	r0, r4
   d76d4:	f7ff fd15 	bl	d7102 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d76d8:	a801      	add	r0, sp, #4
   d76da:	f7fc fd4e 	bl	d417a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d76de:	4620      	mov	r0, r4
   d76e0:	b003      	add	sp, #12
   d76e2:	bd30      	pop	{r4, r5, pc}

000d76e4 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d76e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   d76e6:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d76e8:	f851 3b04 	ldr.w	r3, [r1], #4
   d76ec:	9300      	str	r3, [sp, #0]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d76ee:	4604      	mov	r4, r0
   d76f0:	a801      	add	r0, sp, #4
   d76f2:	f7fe fac8 	bl	d5c86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d76f6:	466a      	mov	r2, sp
   d76f8:	4629      	mov	r1, r5
   d76fa:	4620      	mov	r0, r4
   d76fc:	f7ff fd7c 	bl	d71f8 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d7700:	a801      	add	r0, sp, #4
   d7702:	f7fc fd3a 	bl	d417a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7706:	4620      	mov	r0, r4
   d7708:	b003      	add	sp, #12
   d770a:	bd30      	pop	{r4, r5, pc}

000d770c <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d770c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d770e:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7710:	f851 3b04 	ldr.w	r3, [r1], #4
   d7714:	9300      	str	r3, [sp, #0]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d7716:	4604      	mov	r4, r0
   d7718:	a801      	add	r0, sp, #4
   d771a:	f7fe fab4 	bl	d5c86 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d771e:	466a      	mov	r2, sp
   d7720:	4629      	mov	r1, r5
   d7722:	4620      	mov	r0, r4
   d7724:	f7ff fd44 	bl	d71b0 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d7728:	a801      	add	r0, sp, #4
   d772a:	f7fc fd26 	bl	d417a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d772e:	4620      	mov	r0, r4
   d7730:	b003      	add	sp, #12
   d7732:	bd30      	pop	{r4, r5, pc}

000d7734 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d7734:	b570      	push	{r4, r5, r6, lr}
   d7736:	b08a      	sub	sp, #40	; 0x28
   d7738:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d773a:	4601      	mov	r1, r0
   d773c:	a804      	add	r0, sp, #16
   d773e:	f7ff ffd1 	bl	d76e4 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   d7742:	4e14      	ldr	r6, [pc, #80]	; (d7794 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   d7744:	a804      	add	r0, sp, #16
   d7746:	f7ff fd6f 	bl	d7228 <_ZN5spark18JSONObjectIterator4nextEv>
   d774a:	b1e8      	cbz	r0, d7788 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   d774c:	a904      	add	r1, sp, #16
   d774e:	4668      	mov	r0, sp
   d7750:	f7ff ffdc 	bl	d770c <_ZNK5spark18JSONObjectIterator4nameEv>
   d7754:	9802      	ldr	r0, [sp, #8]
   d7756:	4631      	mov	r1, r6
   d7758:	f7ff fe6d 	bl	d7436 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   d775c:	4604      	mov	r4, r0
   d775e:	b110      	cbz	r0, d7766 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   d7760:	1e2c      	subs	r4, r5, #0
   d7762:	bf18      	it	ne
   d7764:	2401      	movne	r4, #1
   d7766:	a801      	add	r0, sp, #4
   d7768:	f7fc fd07 	bl	d417a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d776c:	2c00      	cmp	r4, #0
   d776e:	d0e9      	beq.n	d7744 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   d7770:	a904      	add	r1, sp, #16
   d7772:	4668      	mov	r0, sp
   d7774:	f7ff ffa2 	bl	d76bc <_ZNK5spark18JSONObjectIterator5valueEv>
   d7778:	4668      	mov	r0, sp
   d777a:	f7ff fcf8 	bl	d716e <_ZNK5spark9JSONValue5toIntEv>
   d777e:	6028      	str	r0, [r5, #0]
   d7780:	a801      	add	r0, sp, #4
   d7782:	f7fc fcfa 	bl	d417a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7786:	e7dd      	b.n	d7744 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   d7788:	a805      	add	r0, sp, #20
   d778a:	f7fc fcf6 	bl	d417a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d778e:	b00a      	add	sp, #40	; 0x28
   d7790:	bd70      	pop	{r4, r5, r6, pc}
   d7792:	bf00      	nop
   d7794:	000d95d4 	.word	0x000d95d4

000d7798 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d7798:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d779a:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   d779c:	4620      	mov	r0, r4
   d779e:	4912      	ldr	r1, [pc, #72]	; (d77e8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d77a0:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   d77a2:	f001 fbda 	bl	d8f5a <strcmp>
   d77a6:	b948      	cbnz	r0, d77bc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
   d77a8:	f001 f938 	bl	d8a1c <_Z16_fetch_usbserialv>
   d77ac:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d77b0:	f001 f924 	bl	d89fc <_ZN9USBSerial5beginEl>
        return &Serial;
   d77b4:	f001 f932 	bl	d8a1c <_Z16_fetch_usbserialv>
}
   d77b8:	b003      	add	sp, #12
   d77ba:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "Serial1") == 0) {
   d77bc:	490b      	ldr	r1, [pc, #44]	; (d77ec <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
   d77be:	4620      	mov	r0, r4
   d77c0:	f001 fbcb 	bl	d8f5a <strcmp>
   d77c4:	b970      	cbnz	r0, d77e4 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d77c6:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   d77ca:	a901      	add	r1, sp, #4
   d77cc:	4628      	mov	r0, r5
        int baud = 9600;
   d77ce:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   d77d0:	f7ff ffb0 	bl	d7734 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d77d4:	f001 f896 	bl	d8904 <_Z22__fetch_global_Serial1v>
   d77d8:	9901      	ldr	r1, [sp, #4]
   d77da:	f001 f88d 	bl	d88f8 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d77de:	f001 f891 	bl	d8904 <_Z22__fetch_global_Serial1v>
   d77e2:	e7e9      	b.n	d77b8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
   d77e4:	2000      	movs	r0, #0
   d77e6:	e7e7      	b.n	d77b8 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
   d77e8:	000d91e7 	.word	0x000d91e7
   d77ec:	000d95d9 	.word	0x000d95d9

000d77f0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d77f0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d77f2:	e9d0 5300 	ldrd	r5, r3, [r0]
   d77f6:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d77f8:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d77fa:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d77fe:	42ae      	cmp	r6, r5
   d7800:	d005      	beq.n	d780e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   d7802:	f105 0008 	add.w	r0, r5, #8
   d7806:	f7ff fff3 	bl	d77f0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d780a:	3514      	adds	r5, #20
   d780c:	e7f7      	b.n	d77fe <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d780e:	6820      	ldr	r0, [r4, #0]
   d7810:	f7fd faea 	bl	d4de8 <free>
}
   d7814:	4620      	mov	r0, r4
   d7816:	bd70      	pop	{r4, r5, r6, pc}

000d7818 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d7818:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d781a:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d781e:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d7820:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   d7824:	42ae      	cmp	r6, r5
   d7826:	d004      	beq.n	d7832 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d7828:	4628      	mov	r0, r5
   d782a:	f000 fecb 	bl	d85c4 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   d782e:	3510      	adds	r5, #16
   d7830:	e7f8      	b.n	d7824 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d7832:	6820      	ldr	r0, [r4, #0]
   d7834:	f7fd fad8 	bl	d4de8 <free>
}
   d7838:	4620      	mov	r0, r4
   d783a:	bd70      	pop	{r4, r5, r6, pc}

000d783c <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   d783c:	b510      	push	{r4, lr}
   d783e:	4604      	mov	r4, r0
   d7840:	300c      	adds	r0, #12
   d7842:	f7ff ffd5 	bl	d77f0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d7846:	4620      	mov	r0, r4
   d7848:	f7ff ffe6 	bl	d7818 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d784c:	4620      	mov	r0, r4
   d784e:	bd10      	pop	{r4, pc}

000d7850 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   d7850:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   d7852:	4b04      	ldr	r3, [pc, #16]	; (d7864 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   d7854:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   d7856:	f840 3b04 	str.w	r3, [r0], #4
   d785a:	f7ff ffef 	bl	d783c <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   d785e:	4620      	mov	r0, r4
   d7860:	bd10      	pop	{r4, pc}
   d7862:	bf00      	nop
   d7864:	000d9310 	.word	0x000d9310

000d7868 <_ZN5spark16StreamLogHandlerD0Ev>:
   d7868:	b510      	push	{r4, lr}
   d786a:	4604      	mov	r4, r0
   d786c:	f7ff fff0 	bl	d7850 <_ZN5spark16StreamLogHandlerD1Ev>
   d7870:	4620      	mov	r0, r4
   d7872:	2124      	movs	r1, #36	; 0x24
   d7874:	f001 f9d1 	bl	d8c1a <_ZdlPvj>
   d7878:	4620      	mov	r0, r4
   d787a:	bd10      	pop	{r4, pc}

000d787c <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   d787c:	b510      	push	{r4, lr}
   d787e:	4b03      	ldr	r3, [pc, #12]	; (d788c <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d7880:	6003      	str	r3, [r0, #0]
   d7882:	4604      	mov	r4, r0
   d7884:	f7ff ffe4 	bl	d7850 <_ZN5spark16StreamLogHandlerD1Ev>
   d7888:	4620      	mov	r0, r4
   d788a:	bd10      	pop	{r4, pc}
   d788c:	000d9678 	.word	0x000d9678

000d7890 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d7890:	b510      	push	{r4, lr}
   d7892:	4604      	mov	r4, r0
   d7894:	f7ff fff2 	bl	d787c <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d7898:	4620      	mov	r0, r4
   d789a:	2124      	movs	r1, #36	; 0x24
   d789c:	f001 f9bd 	bl	d8c1a <_ZdlPvj>
   d78a0:	4620      	mov	r0, r4
   d78a2:	bd10      	pop	{r4, pc}

000d78a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   d78a4:	2200      	movs	r2, #0
   d78a6:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d78aa:	b510      	push	{r4, lr}
        capacity_(0) {
   d78ac:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d78ae:	680c      	ldr	r4, [r1, #0]
   d78b0:	6004      	str	r4, [r0, #0]
   d78b2:	684c      	ldr	r4, [r1, #4]
   d78b4:	6044      	str	r4, [r0, #4]
   d78b6:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d78b8:	600a      	str	r2, [r1, #0]
   d78ba:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d78bc:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d78be:	608a      	str	r2, [r1, #8]
}
   d78c0:	bd10      	pop	{r4, pc}

000d78c2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d78c2:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   d78c4:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   d78c6:	4604      	mov	r4, r0
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d78c8:	6818      	ldr	r0, [r3, #0]
   d78ca:	f7fd f901 	bl	d4ad0 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d78ce:	4620      	mov	r0, r4
   d78d0:	bd10      	pop	{r4, pc}
	...

000d78d4 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d78d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d78d8:	b087      	sub	sp, #28
   d78da:	4680      	mov	r8, r0
   d78dc:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d78de:	4b1c      	ldr	r3, [pc, #112]	; (d7950 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   d78e0:	685b      	ldr	r3, [r3, #4]
   d78e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d78e6:	4689      	mov	r9, r1
   d78e8:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d78ea:	b96b      	cbnz	r3, d7908 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   d78ec:	f7ff feb4 	bl	d7658 <_ZN5spark10LogManager8instanceEv>
   d78f0:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d78f2:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
   d78f6:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d78f8:	9305      	str	r3, [sp, #20]
   d78fa:	f7fd f8e1 	bl	d4ac0 <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
   d78fe:	7b23      	ldrb	r3, [r4, #12]
   d7900:	b12b      	cbz	r3, d790e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   d7902:	a805      	add	r0, sp, #20
   d7904:	f7ff ffdd 	bl	d78c2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d7908:	b007      	add	sp, #28
   d790a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d790e:	2301      	movs	r3, #1
   d7910:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   d7912:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   d7916:	fa5f f989 	uxtb.w	r9, r9
   d791a:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d791e:	45aa      	cmp	sl, r5
   d7920:	d012      	beq.n	d7948 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   d7922:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   d7926:	4631      	mov	r1, r6
   d7928:	1d38      	adds	r0, r7, #4
   d792a:	f7ff fe19 	bl	d7560 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d792e:	4581      	cmp	r9, r0
   d7930:	d3f5      	bcc.n	d791e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   d7932:	683b      	ldr	r3, [r7, #0]
   d7934:	9a03      	ldr	r2, [sp, #12]
   d7936:	9200      	str	r2, [sp, #0]
   d7938:	f8d3 b008 	ldr.w	fp, [r3, #8]
   d793c:	464a      	mov	r2, r9
   d793e:	4633      	mov	r3, r6
   d7940:	4641      	mov	r1, r8
   d7942:	4638      	mov	r0, r7
   d7944:	47d8      	blx	fp
   d7946:	e7ea      	b.n	d791e <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   d7948:	2300      	movs	r3, #0
   d794a:	7323      	strb	r3, [r4, #12]
   d794c:	e7d9      	b.n	d7902 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   d794e:	bf00      	nop
   d7950:	e000ed00 	.word	0xe000ed00

000d7954 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d7954:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7958:	469b      	mov	fp, r3
   d795a:	4b1a      	ldr	r3, [pc, #104]	; (d79c4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   d795c:	685b      	ldr	r3, [r3, #4]
   d795e:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d7962:	4680      	mov	r8, r0
   d7964:	4689      	mov	r9, r1
   d7966:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   d7968:	b96b      	cbnz	r3, d7986 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   d796a:	f7ff fe75 	bl	d7658 <_ZN5spark10LogManager8instanceEv>
   d796e:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d7970:	f100 0324 	add.w	r3, r0, #36	; 0x24
   d7974:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d7976:	9301      	str	r3, [sp, #4]
   d7978:	f7fd f8a2 	bl	d4ac0 <os_mutex_recursive_lock>
        if (that->isActive()) {
   d797c:	7b23      	ldrb	r3, [r4, #12]
   d797e:	b12b      	cbz	r3, d798c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   d7980:	a801      	add	r0, sp, #4
   d7982:	f7ff ff9e 	bl	d78c2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d7986:	b003      	add	sp, #12
   d7988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   d798c:	2301      	movs	r3, #1
   d798e:	7323      	strb	r3, [r4, #12]
   d7990:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   d7994:	b2f6      	uxtb	r6, r6
   d7996:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d799a:	4555      	cmp	r5, sl
   d799c:	d00e      	beq.n	d79bc <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   d799e:	f855 7b04 	ldr.w	r7, [r5], #4
   d79a2:	4659      	mov	r1, fp
   d79a4:	1d38      	adds	r0, r7, #4
   d79a6:	f7ff fddb 	bl	d7560 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d79aa:	4286      	cmp	r6, r0
   d79ac:	d3f5      	bcc.n	d799a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   d79ae:	683b      	ldr	r3, [r7, #0]
   d79b0:	464a      	mov	r2, r9
   d79b2:	68db      	ldr	r3, [r3, #12]
   d79b4:	4641      	mov	r1, r8
   d79b6:	4638      	mov	r0, r7
   d79b8:	4798      	blx	r3
   d79ba:	e7ee      	b.n	d799a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   d79bc:	2300      	movs	r3, #0
   d79be:	7323      	strb	r3, [r4, #12]
   d79c0:	e7de      	b.n	d7980 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   d79c2:	bf00      	nop
   d79c4:	e000ed00 	.word	0xe000ed00

000d79c8 <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d79c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d79cc:	4b16      	ldr	r3, [pc, #88]	; (d7a28 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   d79ce:	685b      	ldr	r3, [r3, #4]
   d79d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d79d4:	4605      	mov	r5, r0
   d79d6:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   d79d8:	bb1b      	cbnz	r3, d7a22 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   d79da:	f7ff fe3d 	bl	d7658 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   d79de:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   d79e2:	4604      	mov	r4, r0
   d79e4:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d79e6:	9301      	str	r3, [sp, #4]
   d79e8:	f7fd f86a 	bl	d4ac0 <os_mutex_recursive_lock>
   d79ec:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   d79f0:	2446      	movs	r4, #70	; 0x46
   d79f2:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d79f6:	45b0      	cmp	r8, r6
   d79f8:	d109      	bne.n	d7a0e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   d79fa:	a801      	add	r0, sp, #4
   d79fc:	f7ff ff61 	bl	d78c2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   d7a00:	42a5      	cmp	r5, r4
   d7a02:	bfb4      	ite	lt
   d7a04:	2000      	movlt	r0, #0
   d7a06:	2001      	movge	r0, #1
}
   d7a08:	b002      	add	sp, #8
   d7a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   d7a0e:	f856 0b04 	ldr.w	r0, [r6], #4
   d7a12:	4639      	mov	r1, r7
   d7a14:	3004      	adds	r0, #4
   d7a16:	f7ff fda3 	bl	d7560 <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   d7a1a:	4284      	cmp	r4, r0
   d7a1c:	bfa8      	it	ge
   d7a1e:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   d7a20:	e7e9      	b.n	d79f6 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   d7a22:	2000      	movs	r0, #0
   d7a24:	e7f0      	b.n	d7a08 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   d7a26:	bf00      	nop
   d7a28:	e000ed00 	.word	0xe000ed00

000d7a2c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d7a2c:	b570      	push	{r4, r5, r6, lr}
   d7a2e:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d7a30:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d7a34:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   d7a36:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   d7a3a:	4282      	cmp	r2, r0
   d7a3c:	d007      	beq.n	d7a4e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>
   d7a3e:	4601      	mov	r1, r0
            if (*p == value) {
   d7a40:	681d      	ldr	r5, [r3, #0]
   d7a42:	f851 6b04 	ldr.w	r6, [r1], #4
   d7a46:	42ae      	cmp	r6, r5
   d7a48:	d003      	beq.n	d7a52 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x26>
   d7a4a:	4608      	mov	r0, r1
   d7a4c:	e7f5      	b.n	d7a3a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   d7a4e:	2000      	movs	r0, #0
}
   d7a50:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
   d7a52:	1a52      	subs	r2, r2, r1
   d7a54:	f001 fa24 	bl	d8ea0 <memmove>
    --size_;
   d7a58:	6863      	ldr	r3, [r4, #4]
   d7a5a:	3b01      	subs	r3, #1
   d7a5c:	6063      	str	r3, [r4, #4]
    return true;
   d7a5e:	2001      	movs	r0, #1
   d7a60:	e7f6      	b.n	d7a50 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>

000d7a62 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   d7a62:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   d7a64:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   d7a68:	4604      	mov	r4, r0
   d7a6a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d7a6c:	9101      	str	r1, [sp, #4]
   d7a6e:	9303      	str	r3, [sp, #12]
   d7a70:	f7fd f826 	bl	d4ac0 <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d7a74:	a901      	add	r1, sp, #4
   d7a76:	4620      	mov	r0, r4
   d7a78:	f7ff ffd8 	bl	d7a2c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d7a7c:	b118      	cbz	r0, d7a86 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   d7a7e:	6863      	ldr	r3, [r4, #4]
   d7a80:	b90b      	cbnz	r3, d7a86 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   d7a82:	f7ff fe15 	bl	d76b0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d7a86:	a803      	add	r0, sp, #12
   d7a88:	f7ff ff1b 	bl	d78c2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d7a8c:	b004      	add	sp, #16
   d7a8e:	bd10      	pop	{r4, pc}

000d7a90 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   d7a90:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   d7a92:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   d7a96:	2318      	movs	r3, #24
   d7a98:	4604      	mov	r4, r0
   d7a9a:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d7a9e:	42ae      	cmp	r6, r5
   d7aa0:	d015      	beq.n	d7ace <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d7aa2:	f105 0110 	add.w	r1, r5, #16
   d7aa6:	4620      	mov	r0, r4
   d7aa8:	f7ff ffc0 	bl	d7a2c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d7aac:	6863      	ldr	r3, [r4, #4]
   d7aae:	b90b      	cbnz	r3, d7ab4 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d7ab0:	f7ff fdfe 	bl	d76b0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   d7ab4:	69e0      	ldr	r0, [r4, #28]
   d7ab6:	6929      	ldr	r1, [r5, #16]
   d7ab8:	6803      	ldr	r3, [r0, #0]
   d7aba:	68db      	ldr	r3, [r3, #12]
   d7abc:	4798      	blx	r3
        if (h.stream) {
   d7abe:	6969      	ldr	r1, [r5, #20]
   d7ac0:	b119      	cbz	r1, d7aca <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d7ac2:	6a20      	ldr	r0, [r4, #32]
   d7ac4:	6803      	ldr	r3, [r0, #0]
   d7ac6:	68db      	ldr	r3, [r3, #12]
   d7ac8:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   d7aca:	3518      	adds	r5, #24
   d7acc:	e7e7      	b.n	d7a9e <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   d7ace:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d7ad2:	2618      	movs	r6, #24
   d7ad4:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d7ad8:	42ae      	cmp	r6, r5
   d7ada:	d004      	beq.n	d7ae6 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   d7adc:	4628      	mov	r0, r5
   d7ade:	f000 fd71 	bl	d85c4 <_ZN6StringD1Ev>
   d7ae2:	3518      	adds	r5, #24
   d7ae4:	e7f8      	b.n	d7ad8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   d7ae6:	2300      	movs	r3, #0
   d7ae8:	6163      	str	r3, [r4, #20]
}
   d7aea:	bd70      	pop	{r4, r5, r6, pc}

000d7aec <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   d7aec:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7aee:	4604      	mov	r4, r0
    resetSystemCallbacks();
   d7af0:	f7ff fdde 	bl	d76b0 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d7af4:	f104 0324 	add.w	r3, r4, #36	; 0x24
   d7af8:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d7afa:	9301      	str	r3, [sp, #4]
   d7afc:	f7fc ffe0 	bl	d4ac0 <os_mutex_recursive_lock>
         destroyFactoryHandlers();
   d7b00:	4620      	mov	r0, r4
   d7b02:	f7ff ffc5 	bl	d7a90 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   d7b06:	a801      	add	r0, sp, #4
   d7b08:	f7ff fedb 	bl	d78c2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   d7b0c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d7b0e:	b108      	cbz	r0, d7b14 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   d7b10:	f7fc ffce 	bl	d4ab0 <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   d7b14:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d7b18:	2618      	movs	r6, #24
   d7b1a:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d7b1e:	42ae      	cmp	r6, r5
   d7b20:	d004      	beq.n	d7b2c <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   d7b22:	4628      	mov	r0, r5
   d7b24:	f000 fd4e 	bl	d85c4 <_ZN6StringD1Ev>
   d7b28:	3518      	adds	r5, #24
   d7b2a:	e7f8      	b.n	d7b1e <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   d7b2c:	6920      	ldr	r0, [r4, #16]
   d7b2e:	f7fd f95b 	bl	d4de8 <free>
   d7b32:	6820      	ldr	r0, [r4, #0]
   d7b34:	f7fd f958 	bl	d4de8 <free>
}
   d7b38:	4620      	mov	r0, r4
   d7b3a:	b002      	add	sp, #8
   d7b3c:	bd70      	pop	{r4, r5, r6, pc}

000d7b3e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   d7b3e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d7b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7b42:	4606      	mov	r6, r0
   d7b44:	460c      	mov	r4, r1
   d7b46:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d7b48:	d927      	bls.n	d7b9a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
   d7b4a:	4290      	cmp	r0, r2
   d7b4c:	d226      	bcs.n	d7b9c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
            --end;
   d7b4e:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d7b52:	1a6c      	subs	r4, r5, r1
   d7b54:	f1a1 0714 	sub.w	r7, r1, #20
   d7b58:	4404      	add	r4, r0
        capacity_(0) {
   d7b5a:	2600      	movs	r6, #0
            for (; end != p; --end, --dest) {
   d7b5c:	42af      	cmp	r7, r5
   d7b5e:	d03d      	beq.n	d7bdc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
   d7b60:	b1a4      	cbz	r4, d7b8c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
   d7b62:	682b      	ldr	r3, [r5, #0]
   d7b64:	6023      	str	r3, [r4, #0]
   d7b66:	88ab      	ldrh	r3, [r5, #4]
   d7b68:	80a3      	strh	r3, [r4, #4]
   d7b6a:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   d7b6e:	80e3      	strh	r3, [r4, #6]
        capacity_(0) {
   d7b70:	e9c4 6602 	strd	r6, r6, [r4, #8]
   d7b74:	6126      	str	r6, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7b76:	68ab      	ldr	r3, [r5, #8]
   d7b78:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7b7a:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7b7c:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7b7e:	68ea      	ldr	r2, [r5, #12]
   d7b80:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7b82:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7b84:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7b86:	692a      	ldr	r2, [r5, #16]
   d7b88:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d7b8a:	612b      	str	r3, [r5, #16]
   d7b8c:	f105 0008 	add.w	r0, r5, #8
   d7b90:	f7ff fe2e 	bl	d77f0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   d7b94:	3d14      	subs	r5, #20
   d7b96:	3c14      	subs	r4, #20
   d7b98:	e7e0      	b.n	d7b5c <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
   d7b9a:	d01f      	beq.n	d7bdc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
   d7b9c:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
   d7b9e:	42ac      	cmp	r4, r5
   d7ba0:	d01c      	beq.n	d7bdc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
   d7ba2:	b1a6      	cbz	r6, d7bce <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
   d7ba4:	6823      	ldr	r3, [r4, #0]
   d7ba6:	6033      	str	r3, [r6, #0]
   d7ba8:	88a3      	ldrh	r3, [r4, #4]
   d7baa:	80b3      	strh	r3, [r6, #4]
   d7bac:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   d7bb0:	80f3      	strh	r3, [r6, #6]
        capacity_(0) {
   d7bb2:	e9c6 7702 	strd	r7, r7, [r6, #8]
   d7bb6:	6137      	str	r7, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7bb8:	68a3      	ldr	r3, [r4, #8]
   d7bba:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7bbc:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7bbe:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7bc0:	68e2      	ldr	r2, [r4, #12]
   d7bc2:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7bc4:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7bc6:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7bc8:	6922      	ldr	r2, [r4, #16]
   d7bca:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d7bcc:	6123      	str	r3, [r4, #16]
   d7bce:	f104 0008 	add.w	r0, r4, #8
   d7bd2:	f7ff fe0d 	bl	d77f0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   d7bd6:	3414      	adds	r4, #20
   d7bd8:	3614      	adds	r6, #20
   d7bda:	e7e0      	b.n	d7b9e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
   d7bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7bde <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d7bde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7be0:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   d7be4:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d7be6:	4604      	mov	r4, r0
   d7be8:	460e      	mov	r6, r1
   d7bea:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7bec:	db0d      	blt.n	d7c0a <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
   d7bee:	3501      	adds	r5, #1
        if (n > 0) {
   d7bf0:	2d00      	cmp	r5, #0
   d7bf2:	6800      	ldr	r0, [r0, #0]
   d7bf4:	dd04      	ble.n	d7c00 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
   d7bf6:	00a9      	lsls	r1, r5, #2
   d7bf8:	f7fd f8fe 	bl	d4df8 <realloc>
            if (!d) {
   d7bfc:	b918      	cbnz	r0, d7c06 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
   d7bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   d7c00:	f7fd f8f2 	bl	d4de8 <free>
        T* d = nullptr;
   d7c04:	2000      	movs	r0, #0
        data_ = d;
   d7c06:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d7c08:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
   d7c0a:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
   d7c0c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d7c0e:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
   d7c12:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   d7c14:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
   d7c18:	1d08      	adds	r0, r1, #4
   d7c1a:	f001 f941 	bl	d8ea0 <memmove>
    new(p) T(std::move(value));
   d7c1e:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d7c22:	6863      	ldr	r3, [r4, #4]
   d7c24:	3301      	adds	r3, #1
   d7c26:	6063      	str	r3, [r4, #4]
    return true;
   d7c28:	2001      	movs	r0, #1
   d7c2a:	e7e8      	b.n	d7bfe <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

000d7c2c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   d7c2c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   d7c2e:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   d7c32:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
   d7c34:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d7c36:	9301      	str	r3, [sp, #4]
   d7c38:	460d      	mov	r5, r1
   d7c3a:	f7fc ff41 	bl	d4ac0 <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
   d7c3e:	e9d4 3100 	ldrd	r3, r1, [r4]
   d7c42:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
   d7c46:	4283      	cmp	r3, r0
   d7c48:	461a      	mov	r2, r3
   d7c4a:	d00b      	beq.n	d7c64 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   d7c4c:	6812      	ldr	r2, [r2, #0]
   d7c4e:	42aa      	cmp	r2, r5
   d7c50:	f103 0304 	add.w	r3, r3, #4
   d7c54:	d1f7      	bne.n	d7c46 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
   d7c56:	a801      	add	r0, sp, #4
   d7c58:	f7ff fe33 	bl	d78c2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
   d7c5c:	2500      	movs	r5, #0
}
   d7c5e:	4628      	mov	r0, r5
   d7c60:	b003      	add	sp, #12
   d7c62:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
   d7c64:	462a      	mov	r2, r5
   d7c66:	4620      	mov	r0, r4
   d7c68:	f7ff ffb9 	bl	d7bde <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d7c6c:	4605      	mov	r5, r0
   d7c6e:	2800      	cmp	r0, #0
   d7c70:	d0f1      	beq.n	d7c56 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   d7c72:	6863      	ldr	r3, [r4, #4]
   d7c74:	2b01      	cmp	r3, #1
   d7c76:	d101      	bne.n	d7c7c <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   d7c78:	f7ff fd0e 	bl	d7698 <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d7c7c:	a801      	add	r0, sp, #4
   d7c7e:	f7ff fe20 	bl	d78c2 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d7c82:	e7ec      	b.n	d7c5e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000d7c84 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d7c84:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d7c86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7c88:	4604      	mov	r4, r0
   d7c8a:	460d      	mov	r5, r1
   d7c8c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d7c8e:	d914      	bls.n	d7cba <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d7c90:	4290      	cmp	r0, r2
   d7c92:	d213      	bcs.n	d7cbc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   d7c94:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   d7c98:	1a75      	subs	r5, r6, r1
   d7c9a:	f1a1 0710 	sub.w	r7, r1, #16
   d7c9e:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d7ca0:	42b7      	cmp	r7, r6
   d7ca2:	d018      	beq.n	d7cd6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d7ca4:	b11c      	cbz	r4, d7cae <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d7ca6:	4631      	mov	r1, r6
   d7ca8:	4620      	mov	r0, r4
   d7caa:	f000 fd07 	bl	d86bc <_ZN6StringC1EOS_>
                end->~T();
   d7cae:	4630      	mov	r0, r6
   d7cb0:	f000 fc88 	bl	d85c4 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d7cb4:	3e10      	subs	r6, #16
   d7cb6:	3c10      	subs	r4, #16
   d7cb8:	e7f2      	b.n	d7ca0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d7cba:	d00c      	beq.n	d7cd6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d7cbc:	42b5      	cmp	r5, r6
   d7cbe:	d00a      	beq.n	d7cd6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d7cc0:	b11c      	cbz	r4, d7cca <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d7cc2:	4629      	mov	r1, r5
   d7cc4:	4620      	mov	r0, r4
   d7cc6:	f000 fcf9 	bl	d86bc <_ZN6StringC1EOS_>
                p->~T();
   d7cca:	4628      	mov	r0, r5
   d7ccc:	f000 fc7a 	bl	d85c4 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d7cd0:	3510      	adds	r5, #16
   d7cd2:	3410      	adds	r4, #16
   d7cd4:	e7f2      	b.n	d7cbc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   d7cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7cd8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   d7cd8:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d7cda:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d7cdc:	4605      	mov	r5, r0
        if (n > 0) {
   d7cde:	dd11      	ble.n	d7d04 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   d7ce0:	0130      	lsls	r0, r6, #4
   d7ce2:	f7fd f879 	bl	d4dd8 <malloc>
            if (!d) {
   d7ce6:	4604      	mov	r4, r0
   d7ce8:	b158      	cbz	r0, d7d02 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d7cea:	e9d5 1200 	ldrd	r1, r2, [r5]
   d7cee:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d7cf2:	f7ff ffc7 	bl	d7c84 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d7cf6:	6828      	ldr	r0, [r5, #0]
   d7cf8:	f7fd f876 	bl	d4de8 <free>
        data_ = d;
   d7cfc:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d7cfe:	60ae      	str	r6, [r5, #8]
        return true;
   d7d00:	2001      	movs	r0, #1
    }
   d7d02:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d7d04:	2400      	movs	r4, #0
   d7d06:	e7f6      	b.n	d7cf6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000d7d08 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d7d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7d0c:	4691      	mov	r9, r2
   d7d0e:	b097      	sub	sp, #92	; 0x5c
        capacity_(0) {
   d7d10:	2300      	movs	r3, #0
   d7d12:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
   d7d14:	f8d9 1004 	ldr.w	r1, [r9, #4]
   d7d18:	930c      	str	r3, [sp, #48]	; 0x30
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d7d1a:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   d7d1c:	4299      	cmp	r1, r3
        capacity_(0) {
   d7d1e:	e9c0 3300 	strd	r3, r3, [r0]
   d7d22:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d7d26:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d7d2a:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d7d2e:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d7d30:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   d7d32:	dc23      	bgt.n	d7d7c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   d7d34:	e9d9 5700 	ldrd	r5, r7, [r9]
   d7d38:	2314      	movs	r3, #20
   d7d3a:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   d7d3e:	42af      	cmp	r7, r5
   d7d40:	d03b      	beq.n	d7dba <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   d7d42:	4629      	mov	r1, r5
   d7d44:	a80d      	add	r0, sp, #52	; 0x34
   d7d46:	f000 fcb9 	bl	d86bc <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   d7d4a:	a90d      	add	r1, sp, #52	; 0x34
   d7d4c:	a811      	add	r0, sp, #68	; 0x44
   d7d4e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   d7d50:	f000 fcb4 	bl	d86bc <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7d54:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
   d7d58:	4299      	cmp	r1, r3
   d7d5a:	da1b      	bge.n	d7d94 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   d7d5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
   d7d5e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
   d7d60:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d7d64:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d7d68:	4631      	mov	r1, r6
   d7d6a:	f106 0010 	add.w	r0, r6, #16
   d7d6e:	f7ff ff89 	bl	d7c84 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d7d72:	b9ee      	cbnz	r6, d7db0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   d7d74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d7d76:	3301      	adds	r3, #1
   d7d78:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
   d7d7a:	e011      	b.n	d7da0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   d7d7c:	a80a      	add	r0, sp, #40	; 0x28
   d7d7e:	f7ff ffab 	bl	d7cd8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d7d82:	2800      	cmp	r0, #0
   d7d84:	d1d6      	bne.n	d7d34 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
   d7d86:	a80a      	add	r0, sp, #40	; 0x28
   d7d88:	f7ff fd46 	bl	d7818 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d7d8c:	4620      	mov	r0, r4
   d7d8e:	b017      	add	sp, #92	; 0x5c
   d7d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7d94:	3101      	adds	r1, #1
   d7d96:	a80a      	add	r0, sp, #40	; 0x28
   d7d98:	f7ff ff9e 	bl	d7cd8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d7d9c:	2800      	cmp	r0, #0
   d7d9e:	d1dd      	bne.n	d7d5c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   d7da0:	a811      	add	r0, sp, #68	; 0x44
   d7da2:	f000 fc0f 	bl	d85c4 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   d7da6:	a80d      	add	r0, sp, #52	; 0x34
   d7da8:	f000 fc0c 	bl	d85c4 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   d7dac:	3514      	adds	r5, #20
   d7dae:	e7c6      	b.n	d7d3e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   d7db0:	a911      	add	r1, sp, #68	; 0x44
   d7db2:	4630      	mov	r0, r6
   d7db4:	f000 fc82 	bl	d86bc <_ZN6StringC1EOS_>
   d7db8:	e7dc      	b.n	d7d74 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   d7dba:	2600      	movs	r6, #0
   d7dbc:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
   d7dc0:	960f      	str	r6, [sp, #60]	; 0x3c
        size_t size = 0; // Name length
   d7dc2:	4637      	mov	r7, r6
   d7dc4:	f04f 0a14 	mov.w	sl, #20
    for (int i = 0; i < cats.size(); ++i) {
   d7dc8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d7dcc:	429e      	cmp	r6, r3
   d7dce:	f280 8097 	bge.w	d7f00 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
   d7dd2:	0133      	lsls	r3, r6, #4
   d7dd4:	58d3      	ldr	r3, [r2, r3]
   d7dd6:	9308      	str	r3, [sp, #32]
        if (!category) {
   d7dd8:	b90b      	cbnz	r3, d7dde <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
   d7dda:	3601      	adds	r6, #1
   d7ddc:	e7f4      	b.n	d7dc8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
   d7dde:	fb0a f306 	mul.w	r3, sl, r6
   d7de2:	9709      	str	r7, [sp, #36]	; 0x24
   d7de4:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   d7de6:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
   d7de8:	a909      	add	r1, sp, #36	; 0x24
   d7dea:	a808      	add	r0, sp, #32
   d7dec:	f7ff fafc 	bl	d73e8 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d7df0:	4683      	mov	fp, r0
   d7df2:	2800      	cmp	r0, #0
   d7df4:	d0f1      	beq.n	d7dda <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
   d7df6:	4601      	mov	r1, r0
   d7df8:	9a09      	ldr	r2, [sp, #36]	; 0x24
            bool found = false;
   d7dfa:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d7dfe:	f10d 031f 	add.w	r3, sp, #31
   d7e02:	4628      	mov	r0, r5
   d7e04:	f7ff fb6e 	bl	d74e4 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d7e08:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d7e0c:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d7e0e:	f1b8 0f00 	cmp.w	r8, #0
   d7e12:	d166      	bne.n	d7ee2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d7e14:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
            level(-1) {
   d7e18:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   d7e1c:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
   d7e20:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d7e24:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   d7e28:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   d7e2c:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7e30:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   d7e34:	4293      	cmp	r3, r2
   d7e36:	db1a      	blt.n	d7e6e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
   d7e38:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
   d7e3c:	f1bb 0f00 	cmp.w	fp, #0
   d7e40:	dd4a      	ble.n	d7ed8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
   d7e42:	fb0a f00b 	mul.w	r0, sl, fp
   d7e46:	f7fc ffc7 	bl	d4dd8 <malloc>
            if (!d) {
   d7e4a:	9004      	str	r0, [sp, #16]
   d7e4c:	2800      	cmp	r0, #0
   d7e4e:	d045      	beq.n	d7edc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
   d7e50:	e9d5 1200 	ldrd	r1, r2, [r5]
   d7e54:	fb0a 1202 	mla	r2, sl, r2, r1
   d7e58:	f7ff fe71 	bl	d7b3e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d7e5c:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
   d7e5e:	6828      	ldr	r0, [r5, #0]
   d7e60:	9304      	str	r3, [sp, #16]
   d7e62:	f7fc ffc1 	bl	d4de8 <free>
        data_ = d;
   d7e66:	9b04      	ldr	r3, [sp, #16]
   d7e68:	602b      	str	r3, [r5, #0]
        capacity_ = n;
   d7e6a:	f8c5 b008 	str.w	fp, [r5, #8]
    T* const p = data_ + i;
   d7e6e:	9b01      	ldr	r3, [sp, #4]
   d7e70:	f8d5 b000 	ldr.w	fp, [r5]
    move(p + 1, p, data_ + size_);
   d7e74:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   d7e76:	fb0a f303 	mul.w	r3, sl, r3
   d7e7a:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
   d7e7e:	f101 0014 	add.w	r0, r1, #20
   d7e82:	fb0a b202 	mla	r2, sl, r2, fp
   d7e86:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
   d7e88:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
   d7e8a:	f7ff fe58 	bl	d7b3e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d7e8e:	9904      	ldr	r1, [sp, #16]
   d7e90:	b1a9      	cbz	r1, d7ebe <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
   d7e92:	9b05      	ldr	r3, [sp, #20]
   d7e94:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d7e96:	f84b 2003 	str.w	r2, [fp, r3]
   d7e9a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   d7e9e:	808b      	strh	r3, [r1, #4]
   d7ea0:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
   d7ea4:	80cb      	strh	r3, [r1, #6]
        capacity_(0) {
   d7ea6:	e9c1 7702 	strd	r7, r7, [r1, #8]
   d7eaa:	610f      	str	r7, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7eac:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d7eae:	608b      	str	r3, [r1, #8]
   d7eb0:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
   d7eb2:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
   d7eb4:	60cb      	str	r3, [r1, #12]
   d7eb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
   d7eb8:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
   d7eba:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d7ebc:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
   d7ebe:	686b      	ldr	r3, [r5, #4]
   d7ec0:	3301      	adds	r3, #1
   d7ec2:	606b      	str	r3, [r5, #4]
   d7ec4:	a813      	add	r0, sp, #76	; 0x4c
   d7ec6:	f7ff fc93 	bl	d77f0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d7eca:	f1b8 0f00 	cmp.w	r8, #0
   d7ece:	d008      	beq.n	d7ee2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
   d7ed0:	a80d      	add	r0, sp, #52	; 0x34
   d7ed2:	f7ff fc8d 	bl	d77f0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d7ed6:	e756      	b.n	d7d86 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   d7ed8:	4643      	mov	r3, r8
   d7eda:	e7c0      	b.n	d7e5e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d7edc:	f04f 0801 	mov.w	r8, #1
   d7ee0:	e7f0      	b.n	d7ec4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
   d7ee2:	9b01      	ldr	r3, [sp, #4]
   d7ee4:	682d      	ldr	r5, [r5, #0]
   d7ee6:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
   d7eea:	9b08      	ldr	r3, [sp, #32]
   d7eec:	781b      	ldrb	r3, [r3, #0]
   d7eee:	b92b      	cbnz	r3, d7efc <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
   d7ef0:	f8d9 3000 	ldr.w	r3, [r9]
   d7ef4:	9a02      	ldr	r2, [sp, #8]
   d7ef6:	4413      	add	r3, r2
   d7ef8:	7c1b      	ldrb	r3, [r3, #16]
   d7efa:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   d7efc:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   d7efe:	e773      	b.n	d7de8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7f00:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d7f02:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7f04:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   d7f06:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7f08:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7f0a:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
   d7f0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   d7f0e:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7f10:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d7f12:	60a2      	str	r2, [r4, #8]
   d7f14:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   d7f16:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7f18:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d7f1a:	60e2      	str	r2, [r4, #12]
   d7f1c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
   d7f1e:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7f20:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d7f22:	6122      	str	r2, [r4, #16]
   d7f24:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   d7f26:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
   d7f28:	9b03      	ldr	r3, [sp, #12]
   d7f2a:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
   d7f2c:	6162      	str	r2, [r4, #20]
   d7f2e:	7623      	strb	r3, [r4, #24]
   d7f30:	e7ce      	b.n	d7ed0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>
	...

000d7f34 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d7f34:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d7f36:	4605      	mov	r5, r0
   d7f38:	4b09      	ldr	r3, [pc, #36]	; (d7f60 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d7f3a:	f845 3b04 	str.w	r3, [r5], #4
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d7f3e:	4604      	mov	r4, r0
   d7f40:	460e      	mov	r6, r1
        filter_(level, filters) {
   d7f42:	a801      	add	r0, sp, #4
   d7f44:	4611      	mov	r1, r2
   d7f46:	f7fc fbde 	bl	d4706 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d7f4a:	aa01      	add	r2, sp, #4
   d7f4c:	4631      	mov	r1, r6
   d7f4e:	4628      	mov	r0, r5
   d7f50:	f7ff feda 	bl	d7d08 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d7f54:	a801      	add	r0, sp, #4
   d7f56:	f7fc fb73 	bl	d4640 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d7f5a:	4620      	mov	r0, r4
   d7f5c:	b004      	add	sp, #16
   d7f5e:	bd70      	pop	{r4, r5, r6, pc}
   d7f60:	000d9310 	.word	0x000d9310

000d7f64 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   d7f64:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7f66:	460f      	mov	r7, r1
   d7f68:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d7f6a:	4926      	ldr	r1, [pc, #152]	; (d8004 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
   d7f6c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d7f6e:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   d7f70:	4616      	mov	r6, r2
   d7f72:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d7f74:	f000 fff1 	bl	d8f5a <strcmp>
   d7f78:	bb00      	cbnz	r0, d7fbc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
   d7f7a:	b1e4      	cbz	r4, d7fb6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d7f7c:	4629      	mov	r1, r5
   d7f7e:	4668      	mov	r0, sp
   d7f80:	f7ff fc90 	bl	d78a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d7f84:	4920      	ldr	r1, [pc, #128]	; (d8008 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d7f86:	2024      	movs	r0, #36	; 0x24
   d7f88:	f000 fe49 	bl	d8c1e <_ZnwjRKSt9nothrow_t>
   d7f8c:	4605      	mov	r5, r0
   d7f8e:	b170      	cbz	r0, d7fae <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d7f90:	4669      	mov	r1, sp
   d7f92:	a803      	add	r0, sp, #12
   d7f94:	f7fc fbb7 	bl	d4706 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d7f98:	aa03      	add	r2, sp, #12
   d7f9a:	4631      	mov	r1, r6
   d7f9c:	4628      	mov	r0, r5
   d7f9e:	f7ff ffc9 	bl	d7f34 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d7fa2:	a803      	add	r0, sp, #12
   d7fa4:	f7fc fb4c 	bl	d4640 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
   d7fa8:	4b18      	ldr	r3, [pc, #96]	; (d800c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
   d7faa:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
   d7fac:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d7fae:	4668      	mov	r0, sp
   d7fb0:	f7fc fb46 	bl	d4640 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d7fb4:	462c      	mov	r4, r5
}
   d7fb6:	4620      	mov	r0, r4
   d7fb8:	b007      	add	sp, #28
   d7fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d7fbc:	4914      	ldr	r1, [pc, #80]	; (d8010 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
   d7fbe:	4638      	mov	r0, r7
   d7fc0:	f000 ffcb 	bl	d8f5a <strcmp>
   d7fc4:	b9e0      	cbnz	r0, d8000 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
   d7fc6:	2c00      	cmp	r4, #0
   d7fc8:	d0f5      	beq.n	d7fb6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d7fca:	4629      	mov	r1, r5
   d7fcc:	4668      	mov	r0, sp
   d7fce:	f7ff fc69 	bl	d78a4 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d7fd2:	490d      	ldr	r1, [pc, #52]	; (d8008 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d7fd4:	2024      	movs	r0, #36	; 0x24
   d7fd6:	f000 fe22 	bl	d8c1e <_ZnwjRKSt9nothrow_t>
   d7fda:	4605      	mov	r5, r0
   d7fdc:	2800      	cmp	r0, #0
   d7fde:	d0e6      	beq.n	d7fae <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d7fe0:	4669      	mov	r1, sp
   d7fe2:	a803      	add	r0, sp, #12
   d7fe4:	f7fc fb8f 	bl	d4706 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d7fe8:	aa03      	add	r2, sp, #12
   d7fea:	4631      	mov	r1, r6
   d7fec:	4628      	mov	r0, r5
   d7fee:	f7ff ffa1 	bl	d7f34 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d7ff2:	a803      	add	r0, sp, #12
   d7ff4:	f7fc fb24 	bl	d4640 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d7ff8:	4b06      	ldr	r3, [pc, #24]	; (d8014 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
   d7ffa:	602b      	str	r3, [r5, #0]
   d7ffc:	622c      	str	r4, [r5, #32]
}
   d7ffe:	e7d6      	b.n	d7fae <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
   d8000:	2400      	movs	r4, #0
   d8002:	e7d8      	b.n	d7fb6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
   d8004:	000d95e1 	.word	0x000d95e1
   d8008:	000d979c 	.word	0x000d979c
   d800c:	000d9678 	.word	0x000d9678
   d8010:	000d95e5 	.word	0x000d95e5
   d8014:	000d9660 	.word	0x000d9660

000d8018 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   d8018:	4b01      	ldr	r3, [pc, #4]	; (d8020 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d801a:	4a02      	ldr	r2, [pc, #8]	; (d8024 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d801c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d801e:	4770      	bx	lr
   d8020:	2003e64c 	.word	0x2003e64c
   d8024:	000d95f6 	.word	0x000d95f6

000d8028 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d8028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d802c:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   d802e:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d8032:	4604      	mov	r4, r0
   d8034:	460e      	mov	r6, r1
   d8036:	4617      	mov	r7, r2
   d8038:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   d803a:	f000 fcef 	bl	d8a1c <_Z16_fetch_usbserialv>
   d803e:	4581      	cmp	r9, r0
   d8040:	d04c      	beq.n	d80dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   d8042:	792b      	ldrb	r3, [r5, #4]
   d8044:	0719      	lsls	r1, r3, #28
   d8046:	d504      	bpl.n	d8052 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   d8048:	696a      	ldr	r2, [r5, #20]
   d804a:	4954      	ldr	r1, [pc, #336]	; (d819c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d804c:	4620      	mov	r0, r4
   d804e:	f7ff fa3a 	bl	d74c6 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   d8052:	f1b8 0f00 	cmp.w	r8, #0
   d8056:	d00d      	beq.n	d8074 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   d8058:	215b      	movs	r1, #91	; 0x5b
   d805a:	4620      	mov	r0, r4
   d805c:	f7ff fa27 	bl	d74ae <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d8060:	4641      	mov	r1, r8
   d8062:	4620      	mov	r0, r4
   d8064:	f7ff fa14 	bl	d7490 <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d8068:	6823      	ldr	r3, [r4, #0]
   d806a:	494d      	ldr	r1, [pc, #308]	; (d81a0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   d806c:	68db      	ldr	r3, [r3, #12]
   d806e:	2202      	movs	r2, #2
   d8070:	4620      	mov	r0, r4
   d8072:	4798      	blx	r3
    if (attr.has_file) {
   d8074:	792b      	ldrb	r3, [r5, #4]
   d8076:	07da      	lsls	r2, r3, #31
   d8078:	d523      	bpl.n	d80c2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   d807a:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   d807e:	212f      	movs	r1, #47	; 0x2f
   d8080:	4640      	mov	r0, r8
   d8082:	f000 ffc1 	bl	d9008 <strrchr>
    if (s1) {
   d8086:	b108      	cbz	r0, d808c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   d8088:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   d808c:	4641      	mov	r1, r8
   d808e:	4620      	mov	r0, r4
   d8090:	f7ff f9fe 	bl	d7490 <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d8094:	792b      	ldrb	r3, [r5, #4]
   d8096:	079b      	lsls	r3, r3, #30
   d8098:	d508      	bpl.n	d80ac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   d809a:	213a      	movs	r1, #58	; 0x3a
   d809c:	4620      	mov	r0, r4
   d809e:	f7ff fa06 	bl	d74ae <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   d80a2:	68ea      	ldr	r2, [r5, #12]
   d80a4:	493f      	ldr	r1, [pc, #252]	; (d81a4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   d80a6:	4620      	mov	r0, r4
   d80a8:	f7ff fa0d 	bl	d74c6 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   d80ac:	792a      	ldrb	r2, [r5, #4]
   d80ae:	6823      	ldr	r3, [r4, #0]
   d80b0:	f012 0f04 	tst.w	r2, #4
   d80b4:	68db      	ldr	r3, [r3, #12]
            write(", ", 2);
   d80b6:	bf14      	ite	ne
   d80b8:	493b      	ldrne	r1, [pc, #236]	; (d81a8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   d80ba:	493c      	ldreq	r1, [pc, #240]	; (d81ac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   d80bc:	2202      	movs	r2, #2
            write(": ", 2);
   d80be:	4620      	mov	r0, r4
   d80c0:	4798      	blx	r3
    if (attr.has_function) {
   d80c2:	792b      	ldrb	r3, [r5, #4]
   d80c4:	0758      	lsls	r0, r3, #29
   d80c6:	d51d      	bpl.n	d8104 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d80c8:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d80ca:	460b      	mov	r3, r1
   d80cc:	461a      	mov	r2, r3
    for (; *s; ++s) {
   d80ce:	f813 0b01 	ldrb.w	r0, [r3], #1
   d80d2:	b160      	cbz	r0, d80ee <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   d80d4:	2820      	cmp	r0, #32
   d80d6:	d108      	bne.n	d80ea <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   d80d8:	4619      	mov	r1, r3
   d80da:	e7f7      	b.n	d80cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   d80dc:	4834      	ldr	r0, [pc, #208]	; (d81b0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d80de:	f000 f95e 	bl	d839e <_ZN5spark12NetworkClass9listeningEv>
   d80e2:	2800      	cmp	r0, #0
   d80e4:	d0ad      	beq.n	d8042 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   d80e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   d80ea:	2828      	cmp	r0, #40	; 0x28
   d80ec:	d1ee      	bne.n	d80cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   d80ee:	6823      	ldr	r3, [r4, #0]
   d80f0:	1a52      	subs	r2, r2, r1
   d80f2:	68db      	ldr	r3, [r3, #12]
   d80f4:	4620      	mov	r0, r4
   d80f6:	4798      	blx	r3
        write("(): ", 4);
   d80f8:	6823      	ldr	r3, [r4, #0]
   d80fa:	492e      	ldr	r1, [pc, #184]	; (d81b4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d80fc:	68db      	ldr	r3, [r3, #12]
   d80fe:	2204      	movs	r2, #4
   d8100:	4620      	mov	r0, r4
   d8102:	4798      	blx	r3
    return log_level_name(level, nullptr);
   d8104:	2100      	movs	r1, #0
   d8106:	4638      	mov	r0, r7
   d8108:	f7fc fdba 	bl	d4c80 <log_level_name>
   d810c:	4601      	mov	r1, r0
    write(s);
   d810e:	4620      	mov	r0, r4
   d8110:	f7ff f9be 	bl	d7490 <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d8114:	6823      	ldr	r3, [r4, #0]
   d8116:	4925      	ldr	r1, [pc, #148]	; (d81ac <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d8118:	68db      	ldr	r3, [r3, #12]
   d811a:	2202      	movs	r2, #2
   d811c:	4620      	mov	r0, r4
   d811e:	4798      	blx	r3
    if (msg) {
   d8120:	b11e      	cbz	r6, d812a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   d8122:	4631      	mov	r1, r6
   d8124:	4620      	mov	r0, r4
   d8126:	f7ff f9b3 	bl	d7490 <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   d812a:	792b      	ldrb	r3, [r5, #4]
   d812c:	f013 0f30 	tst.w	r3, #48	; 0x30
   d8130:	d02c      	beq.n	d818c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   d8132:	6823      	ldr	r3, [r4, #0]
   d8134:	4920      	ldr	r1, [pc, #128]	; (d81b8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d8136:	68db      	ldr	r3, [r3, #12]
   d8138:	2202      	movs	r2, #2
   d813a:	4620      	mov	r0, r4
   d813c:	4798      	blx	r3
        if (attr.has_code) {
   d813e:	792b      	ldrb	r3, [r5, #4]
   d8140:	06d9      	lsls	r1, r3, #27
   d8142:	d50a      	bpl.n	d815a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   d8144:	6823      	ldr	r3, [r4, #0]
   d8146:	491d      	ldr	r1, [pc, #116]	; (d81bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d8148:	68db      	ldr	r3, [r3, #12]
   d814a:	2207      	movs	r2, #7
   d814c:	4620      	mov	r0, r4
   d814e:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   d8150:	69aa      	ldr	r2, [r5, #24]
   d8152:	491b      	ldr	r1, [pc, #108]	; (d81c0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d8154:	4620      	mov	r0, r4
   d8156:	f7ff f9b6 	bl	d74c6 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   d815a:	792b      	ldrb	r3, [r5, #4]
   d815c:	069a      	lsls	r2, r3, #26
   d815e:	d511      	bpl.n	d8184 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   d8160:	06db      	lsls	r3, r3, #27
   d8162:	d505      	bpl.n	d8170 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   d8164:	6823      	ldr	r3, [r4, #0]
   d8166:	4910      	ldr	r1, [pc, #64]	; (d81a8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   d8168:	68db      	ldr	r3, [r3, #12]
   d816a:	2202      	movs	r2, #2
   d816c:	4620      	mov	r0, r4
   d816e:	4798      	blx	r3
            write("details = ", 10);
   d8170:	6823      	ldr	r3, [r4, #0]
   d8172:	4914      	ldr	r1, [pc, #80]	; (d81c4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d8174:	68db      	ldr	r3, [r3, #12]
   d8176:	4620      	mov	r0, r4
   d8178:	220a      	movs	r2, #10
   d817a:	4798      	blx	r3
            write(attr.details);
   d817c:	69e9      	ldr	r1, [r5, #28]
   d817e:	4620      	mov	r0, r4
   d8180:	f7ff f986 	bl	d7490 <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   d8184:	215d      	movs	r1, #93	; 0x5d
   d8186:	4620      	mov	r0, r4
   d8188:	f7ff f991 	bl	d74ae <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   d818c:	6823      	ldr	r3, [r4, #0]
   d818e:	490e      	ldr	r1, [pc, #56]	; (d81c8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d8190:	68db      	ldr	r3, [r3, #12]
   d8192:	4620      	mov	r0, r4
   d8194:	2202      	movs	r2, #2
}
   d8196:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   d819a:	4718      	bx	r3
   d819c:	000d95fa 	.word	0x000d95fa
   d81a0:	000d9601 	.word	0x000d9601
   d81a4:	000d95c8 	.word	0x000d95c8
   d81a8:	000d9604 	.word	0x000d9604
   d81ac:	000d9609 	.word	0x000d9609
   d81b0:	2003e678 	.word	0x2003e678
   d81b4:	000d9607 	.word	0x000d9607
   d81b8:	000d960c 	.word	0x000d960c
   d81bc:	000d960f 	.word	0x000d960f
   d81c0:	000d9617 	.word	0x000d9617
   d81c4:	000d961a 	.word	0x000d961a
   d81c8:	000d9625 	.word	0x000d9625

000d81cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d81cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d81d0:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
   d81d2:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d81d6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d81d8:	4605      	mov	r5, r0
   d81da:	460f      	mov	r7, r1
   d81dc:	4690      	mov	r8, r2
   d81de:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   d81e0:	f000 fc1c 	bl	d8a1c <_Z16_fetch_usbserialv>
   d81e4:	4581      	cmp	r9, r0
   d81e6:	d105      	bne.n	d81f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d81e8:	4849      	ldr	r0, [pc, #292]	; (d8310 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   d81ea:	f000 f8d8 	bl	d839e <_ZN5spark12NetworkClass9listeningEv>
   d81ee:	2800      	cmp	r0, #0
   d81f0:	f040 808a 	bne.w	d8308 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
    JSONStreamWriter json(*this->stream());
   d81f4:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   d81f6:	4a47      	ldr	r2, [pc, #284]	; (d8314 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d81f8:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   d81fa:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   d81fe:	a801      	add	r0, sp, #4
        strm_(stream) {
   d8200:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   d8202:	f88d 9008 	strb.w	r9, [sp, #8]
   d8206:	f7ff f838 	bl	d727a <_ZN5spark10JSONWriter11beginObjectEv>
   d820a:	4649      	mov	r1, r9
   d820c:	4640      	mov	r0, r8
   d820e:	f7fc fd37 	bl	d4c80 <log_level_name>
    json.name("l", 1).value(s);
   d8212:	4941      	ldr	r1, [pc, #260]	; (d8318 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d8214:	4680      	mov	r8, r0
   d8216:	2201      	movs	r2, #1
   d8218:	a801      	add	r0, sp, #4
   d821a:	f7ff f8b7 	bl	d738c <_ZN5spark10JSONWriter4nameEPKcj>
   d821e:	4641      	mov	r1, r8
   d8220:	f7ff f928 	bl	d7474 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   d8224:	b13f      	cbz	r7, d8236 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d8226:	493d      	ldr	r1, [pc, #244]	; (d831c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d8228:	2201      	movs	r2, #1
   d822a:	a801      	add	r0, sp, #4
   d822c:	f7ff f8ae 	bl	d738c <_ZN5spark10JSONWriter4nameEPKcj>
   d8230:	4639      	mov	r1, r7
   d8232:	f7ff f91f 	bl	d7474 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   d8236:	b13e      	cbz	r6, d8248 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d8238:	4939      	ldr	r1, [pc, #228]	; (d8320 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d823a:	2201      	movs	r2, #1
   d823c:	a801      	add	r0, sp, #4
   d823e:	f7ff f8a5 	bl	d738c <_ZN5spark10JSONWriter4nameEPKcj>
   d8242:	4631      	mov	r1, r6
   d8244:	f7ff f916 	bl	d7474 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   d8248:	7923      	ldrb	r3, [r4, #4]
   d824a:	07df      	lsls	r7, r3, #31
   d824c:	d50e      	bpl.n	d826c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d824e:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   d8250:	212f      	movs	r1, #47	; 0x2f
   d8252:	4630      	mov	r0, r6
   d8254:	f000 fed8 	bl	d9008 <strrchr>
    if (s1) {
   d8258:	b100      	cbz	r0, d825c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d825a:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   d825c:	4931      	ldr	r1, [pc, #196]	; (d8324 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d825e:	2201      	movs	r2, #1
   d8260:	a801      	add	r0, sp, #4
   d8262:	f7ff f893 	bl	d738c <_ZN5spark10JSONWriter4nameEPKcj>
   d8266:	4631      	mov	r1, r6
   d8268:	f7ff f904 	bl	d7474 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   d826c:	7923      	ldrb	r3, [r4, #4]
   d826e:	079e      	lsls	r6, r3, #30
   d8270:	d507      	bpl.n	d8282 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d8272:	492d      	ldr	r1, [pc, #180]	; (d8328 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d8274:	2202      	movs	r2, #2
   d8276:	a801      	add	r0, sp, #4
   d8278:	f7ff f888 	bl	d738c <_ZN5spark10JSONWriter4nameEPKcj>
   d827c:	68e1      	ldr	r1, [r4, #12]
   d827e:	f7ff f809 	bl	d7294 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   d8282:	7923      	ldrb	r3, [r4, #4]
   d8284:	0758      	lsls	r0, r3, #29
   d8286:	d514      	bpl.n	d82b2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d8288:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d828a:	4633      	mov	r3, r6
   d828c:	461f      	mov	r7, r3
    for (; *s; ++s) {
   d828e:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8292:	b12a      	cbz	r2, d82a0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   d8294:	2a20      	cmp	r2, #32
   d8296:	d101      	bne.n	d829c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d8298:	461e      	mov	r6, r3
   d829a:	e7f7      	b.n	d828c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   d829c:	2a28      	cmp	r2, #40	; 0x28
   d829e:	d1f5      	bne.n	d828c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   d82a0:	4922      	ldr	r1, [pc, #136]	; (d832c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d82a2:	2202      	movs	r2, #2
   d82a4:	a801      	add	r0, sp, #4
   d82a6:	f7ff f871 	bl	d738c <_ZN5spark10JSONWriter4nameEPKcj>
   d82aa:	1bba      	subs	r2, r7, r6
   d82ac:	4631      	mov	r1, r6
   d82ae:	f7ff f87d 	bl	d73ac <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   d82b2:	7923      	ldrb	r3, [r4, #4]
   d82b4:	0719      	lsls	r1, r3, #28
   d82b6:	d507      	bpl.n	d82c8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   d82b8:	491d      	ldr	r1, [pc, #116]	; (d8330 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d82ba:	2201      	movs	r2, #1
   d82bc:	a801      	add	r0, sp, #4
   d82be:	f7ff f865 	bl	d738c <_ZN5spark10JSONWriter4nameEPKcj>
   d82c2:	6961      	ldr	r1, [r4, #20]
   d82c4:	f7fe fff8 	bl	d72b8 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   d82c8:	7923      	ldrb	r3, [r4, #4]
   d82ca:	06da      	lsls	r2, r3, #27
   d82cc:	d508      	bpl.n	d82e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   d82ce:	2204      	movs	r2, #4
   d82d0:	4918      	ldr	r1, [pc, #96]	; (d8334 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d82d2:	eb0d 0002 	add.w	r0, sp, r2
   d82d6:	f7ff f859 	bl	d738c <_ZN5spark10JSONWriter4nameEPKcj>
   d82da:	69a1      	ldr	r1, [r4, #24]
   d82dc:	f7fe ffda 	bl	d7294 <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   d82e0:	7923      	ldrb	r3, [r4, #4]
   d82e2:	069b      	lsls	r3, r3, #26
   d82e4:	d507      	bpl.n	d82f6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   d82e6:	4914      	ldr	r1, [pc, #80]	; (d8338 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d82e8:	2206      	movs	r2, #6
   d82ea:	a801      	add	r0, sp, #4
   d82ec:	f7ff f84e 	bl	d738c <_ZN5spark10JSONWriter4nameEPKcj>
   d82f0:	69e1      	ldr	r1, [r4, #28]
   d82f2:	f7ff f8bf 	bl	d7474 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   d82f6:	a801      	add	r0, sp, #4
   d82f8:	f7fe ffa9 	bl	d724e <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d82fc:	6a28      	ldr	r0, [r5, #32]
   d82fe:	490f      	ldr	r1, [pc, #60]	; (d833c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d8300:	6803      	ldr	r3, [r0, #0]
   d8302:	2202      	movs	r2, #2
   d8304:	68db      	ldr	r3, [r3, #12]
   d8306:	4798      	blx	r3
}
   d8308:	b005      	add	sp, #20
   d830a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d830e:	bf00      	nop
   d8310:	2003e678 	.word	0x2003e678
   d8314:	000d9648 	.word	0x000d9648
   d8318:	000d91ec 	.word	0x000d91ec
   d831c:	000d9628 	.word	0x000d9628
   d8320:	000d962a 	.word	0x000d962a
   d8324:	000d962c 	.word	0x000d962c
   d8328:	000d962e 	.word	0x000d962e
   d832c:	000d9631 	.word	0x000d9631
   d8330:	000d9290 	.word	0x000d9290
   d8334:	000d9634 	.word	0x000d9634
   d8338:	000d9639 	.word	0x000d9639
   d833c:	000d9625 	.word	0x000d9625

000d8340 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d8340:	2300      	movs	r3, #0
   d8342:	6840      	ldr	r0, [r0, #4]
   d8344:	461a      	mov	r2, r3
   d8346:	f7fc bcf7 	b.w	d4d38 <network_connect>

000d834a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d834a:	6840      	ldr	r0, [r0, #4]
   d834c:	2200      	movs	r2, #0
   d834e:	2102      	movs	r1, #2
   d8350:	f7fc bd02 	b.w	d4d58 <network_disconnect>

000d8354 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d8354:	2200      	movs	r2, #0
   d8356:	6840      	ldr	r0, [r0, #4]
   d8358:	4611      	mov	r1, r2
   d835a:	f7fc bcf5 	b.w	d4d48 <network_connecting>

000d835e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d835e:	2200      	movs	r2, #0
   d8360:	6840      	ldr	r0, [r0, #4]
   d8362:	4611      	mov	r1, r2
   d8364:	f7fc bd00 	b.w	d4d68 <network_ready>

000d8368 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d8368:	2300      	movs	r3, #0
   d836a:	6840      	ldr	r0, [r0, #4]
   d836c:	461a      	mov	r2, r3
   d836e:	4619      	mov	r1, r3
   d8370:	f7fc bd02 	b.w	d4d78 <network_on>

000d8374 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d8374:	2300      	movs	r3, #0
   d8376:	6840      	ldr	r0, [r0, #4]
   d8378:	461a      	mov	r2, r3
   d837a:	4619      	mov	r1, r3
   d837c:	f7fc bd04 	b.w	d4d88 <network_off>

000d8380 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d8380:	6840      	ldr	r0, [r0, #4]
   d8382:	2200      	movs	r2, #0
   d8384:	f081 0101 	eor.w	r1, r1, #1
   d8388:	f7fc bd06 	b.w	d4d98 <network_listen>

000d838c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d838c:	6840      	ldr	r0, [r0, #4]
   d838e:	2200      	movs	r2, #0
   d8390:	f7fc bd12 	b.w	d4db8 <network_set_listen_timeout>

000d8394 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d8394:	2200      	movs	r2, #0
   d8396:	6840      	ldr	r0, [r0, #4]
   d8398:	4611      	mov	r1, r2
   d839a:	f7fc bd15 	b.w	d4dc8 <network_get_listen_timeout>

000d839e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d839e:	2200      	movs	r2, #0
   d83a0:	6840      	ldr	r0, [r0, #4]
   d83a2:	4611      	mov	r1, r2
   d83a4:	f7fc bd00 	b.w	d4da8 <network_listening>

000d83a8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d83a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d83ac:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d83ae:	b095      	sub	sp, #84	; 0x54
   d83b0:	4616      	mov	r6, r2
   d83b2:	460d      	mov	r5, r1
   d83b4:	4607      	mov	r7, r0
    IPAddress addr;
   d83b6:	f7fe fdeb 	bl	d6f90 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d83ba:	4621      	mov	r1, r4
   d83bc:	2218      	movs	r2, #24
   d83be:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d83c0:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d83c2:	f000 fd87 	bl	d8ed4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d83c6:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d83c8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d83cc:	4621      	mov	r1, r4
   d83ce:	466b      	mov	r3, sp
   d83d0:	aa0c      	add	r2, sp, #48	; 0x30
   d83d2:	4630      	mov	r0, r6
   d83d4:	f7fc fbac 	bl	d4b30 <netdb_getaddrinfo>
    if (!r) {
   d83d8:	4604      	mov	r4, r0
   d83da:	2800      	cmp	r0, #0
   d83dc:	d146      	bne.n	d846c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d83de:	4602      	mov	r2, r0
   d83e0:	2101      	movs	r1, #1
   d83e2:	6868      	ldr	r0, [r5, #4]
   d83e4:	f7fc fcc0 	bl	d4d68 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d83e8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d83ea:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d83ec:	4622      	mov	r2, r4
   d83ee:	6868      	ldr	r0, [r5, #4]
   d83f0:	f7fc fcba 	bl	d4d68 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d83f4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d83f6:	4681      	mov	r9, r0
        bool ok = false;
   d83f8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d83fa:	2e00      	cmp	r6, #0
   d83fc:	d036      	beq.n	d846c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d83fe:	2900      	cmp	r1, #0
   d8400:	d134      	bne.n	d846c <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d8402:	6873      	ldr	r3, [r6, #4]
   d8404:	2b02      	cmp	r3, #2
   d8406:	d003      	beq.n	d8410 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d8408:	2b0a      	cmp	r3, #10
   d840a:	d00b      	beq.n	d8424 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d840c:	69f6      	ldr	r6, [r6, #28]
   d840e:	e7f4      	b.n	d83fa <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d8410:	f1b8 0f00 	cmp.w	r8, #0
   d8414:	d004      	beq.n	d8420 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d8416:	6971      	ldr	r1, [r6, #20]
   d8418:	4638      	mov	r0, r7
   d841a:	3104      	adds	r1, #4
   d841c:	f7fe fde5 	bl	d6fea <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d8420:	4641      	mov	r1, r8
   d8422:	e7f3      	b.n	d840c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d8424:	f1b9 0f00 	cmp.w	r9, #0
   d8428:	d101      	bne.n	d842e <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d842a:	4649      	mov	r1, r9
   d842c:	e7ee      	b.n	d840c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d842e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d8430:	2210      	movs	r2, #16
   d8432:	a801      	add	r0, sp, #4
   d8434:	f000 fd4e 	bl	d8ed4 <memset>
                    a.v = 6;
   d8438:	2306      	movs	r3, #6
   d843a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d843e:	ad01      	add	r5, sp, #4
   d8440:	f104 0308 	add.w	r3, r4, #8
   d8444:	3418      	adds	r4, #24
   d8446:	6818      	ldr	r0, [r3, #0]
   d8448:	6859      	ldr	r1, [r3, #4]
   d844a:	462a      	mov	r2, r5
   d844c:	c203      	stmia	r2!, {r0, r1}
   d844e:	3308      	adds	r3, #8
   d8450:	42a3      	cmp	r3, r4
   d8452:	4615      	mov	r5, r2
   d8454:	d1f7      	bne.n	d8446 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d8456:	a901      	add	r1, sp, #4
   d8458:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d845a:	ad07      	add	r5, sp, #28
   d845c:	f7fe fda6 	bl	d6fac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d8460:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8462:	1d3c      	adds	r4, r7, #4
   d8464:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8466:	682b      	ldr	r3, [r5, #0]
   d8468:	7023      	strb	r3, [r4, #0]
   d846a:	e7de      	b.n	d842a <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d846c:	9800      	ldr	r0, [sp, #0]
   d846e:	f7fc fb57 	bl	d4b20 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d8472:	4638      	mov	r0, r7
   d8474:	b015      	add	sp, #84	; 0x54
   d8476:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d847c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d847c:	4b02      	ldr	r3, [pc, #8]	; (d8488 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d847e:	4a03      	ldr	r2, [pc, #12]	; (d848c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d8480:	601a      	str	r2, [r3, #0]
   d8482:	2200      	movs	r2, #0
   d8484:	605a      	str	r2, [r3, #4]

} // spark
   d8486:	4770      	bx	lr
   d8488:	2003e678 	.word	0x2003e678
   d848c:	000d96c0 	.word	0x000d96c0

000d8490 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d8490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8492:	4606      	mov	r6, r0
   d8494:	460d      	mov	r5, r1
  size_t n = 0;
   d8496:	188f      	adds	r7, r1, r2
   d8498:	2400      	movs	r4, #0
  while (size--) {
   d849a:	42bd      	cmp	r5, r7
   d849c:	d00c      	beq.n	d84b8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d849e:	6833      	ldr	r3, [r6, #0]
   d84a0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d84a4:	689b      	ldr	r3, [r3, #8]
   d84a6:	4630      	mov	r0, r6
   d84a8:	4798      	blx	r3
     if (chunk>=0)
   d84aa:	1e03      	subs	r3, r0, #0
   d84ac:	db01      	blt.n	d84b2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d84ae:	441c      	add	r4, r3
  while (size--) {
   d84b0:	e7f3      	b.n	d849a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d84b2:	2c00      	cmp	r4, #0
   d84b4:	bf08      	it	eq
   d84b6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d84b8:	4620      	mov	r0, r4
   d84ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d84bc <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d84bc:	b513      	push	{r0, r1, r4, lr}
   d84be:	4604      	mov	r4, r0
    }
   d84c0:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d84c2:	b159      	cbz	r1, d84dc <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d84c4:	9101      	str	r1, [sp, #4]
   d84c6:	f000 fd78 	bl	d8fba <strlen>
   d84ca:	6823      	ldr	r3, [r4, #0]
   d84cc:	9901      	ldr	r1, [sp, #4]
   d84ce:	68db      	ldr	r3, [r3, #12]
   d84d0:	4602      	mov	r2, r0
   d84d2:	4620      	mov	r0, r4
    }
   d84d4:	b002      	add	sp, #8
   d84d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d84da:	4718      	bx	r3
    }
   d84dc:	b002      	add	sp, #8
   d84de:	bd10      	pop	{r4, pc}

000d84e0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d84e0:	6803      	ldr	r3, [r0, #0]
   d84e2:	689b      	ldr	r3, [r3, #8]
   d84e4:	4718      	bx	r3

000d84e6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d84e6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d84e8:	210d      	movs	r1, #13
{
   d84ea:	4605      	mov	r5, r0
  size_t n = print('\r');
   d84ec:	f7ff fff8 	bl	d84e0 <_ZN5Print5printEc>
  n += print('\n');
   d84f0:	210a      	movs	r1, #10
  size_t n = print('\r');
   d84f2:	4604      	mov	r4, r0
  n += print('\n');
   d84f4:	4628      	mov	r0, r5
   d84f6:	f7ff fff3 	bl	d84e0 <_ZN5Print5printEc>
  return n;
}
   d84fa:	4420      	add	r0, r4
   d84fc:	bd38      	pop	{r3, r4, r5, pc}

000d84fe <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d84fe:	b530      	push	{r4, r5, lr}
   d8500:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d8502:	2300      	movs	r3, #0
   d8504:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d8508:	2a01      	cmp	r2, #1
   d850a:	bf98      	it	ls
   d850c:	220a      	movls	r2, #10
   d850e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d8510:	460d      	mov	r5, r1
   d8512:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d8516:	fb01 5312 	mls	r3, r1, r2, r5
   d851a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d851e:	2b09      	cmp	r3, #9
   d8520:	bf94      	ite	ls
   d8522:	3330      	addls	r3, #48	; 0x30
   d8524:	3337      	addhi	r3, #55	; 0x37
   d8526:	b2db      	uxtb	r3, r3
  } while(n);
   d8528:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d852a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d852e:	d9ef      	bls.n	d8510 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d8530:	4621      	mov	r1, r4
   d8532:	f7ff ffc3 	bl	d84bc <_ZN5Print5writeEPKc>
}
   d8536:	b00b      	add	sp, #44	; 0x2c
   d8538:	bd30      	pop	{r4, r5, pc}

000d853a <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d853a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d853e:	b086      	sub	sp, #24
   d8540:	af00      	add	r7, sp, #0
   d8542:	4605      	mov	r5, r0
   d8544:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d8546:	1d38      	adds	r0, r7, #4
   d8548:	2114      	movs	r1, #20
{
   d854a:	4614      	mov	r4, r2
    va_copy(args2, args);
   d854c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d854e:	f7fc fc5b 	bl	d4e08 <vsnprintf>

    if (n<bufsize)
   d8552:	2813      	cmp	r0, #19
   d8554:	d80e      	bhi.n	d8574 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d8556:	1d39      	adds	r1, r7, #4
   d8558:	4628      	mov	r0, r5
   d855a:	f7ff ffaf 	bl	d84bc <_ZN5Print5writeEPKc>
   d855e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d8560:	b11e      	cbz	r6, d856a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d8562:	4628      	mov	r0, r5
   d8564:	f7ff ffbf 	bl	d84e6 <_ZN5Print7printlnEv>
   d8568:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d856a:	4620      	mov	r0, r4
   d856c:	3718      	adds	r7, #24
   d856e:	46bd      	mov	sp, r7
   d8570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d8574:	f100 0308 	add.w	r3, r0, #8
   d8578:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d857c:	46e8      	mov	r8, sp
        char bigger[n+1];
   d857e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d8582:	4622      	mov	r2, r4
   d8584:	1c41      	adds	r1, r0, #1
   d8586:	683b      	ldr	r3, [r7, #0]
   d8588:	4668      	mov	r0, sp
   d858a:	f7fc fc3d 	bl	d4e08 <vsnprintf>
  return write(str);
   d858e:	4669      	mov	r1, sp
   d8590:	4628      	mov	r0, r5
   d8592:	f7ff ff93 	bl	d84bc <_ZN5Print5writeEPKc>
   d8596:	4604      	mov	r4, r0
   d8598:	46c5      	mov	sp, r8
   d859a:	e7e1      	b.n	d8560 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d859c <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d859c:	b510      	push	{r4, lr}
   d859e:	4604      	mov	r4, r0
   d85a0:	f7fe f9d4 	bl	d694c <_ZNSt14_Function_baseD1Ev>
   d85a4:	4620      	mov	r0, r4
   d85a6:	bd10      	pop	{r4, pc}

000d85a8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d85a8:	4803      	ldr	r0, [pc, #12]	; (d85b8 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d85aa:	4a04      	ldr	r2, [pc, #16]	; (d85bc <_GLOBAL__sub_I_RGB+0x14>)
   d85ac:	4904      	ldr	r1, [pc, #16]	; (d85c0 <_GLOBAL__sub_I_RGB+0x18>)
   d85ae:	2300      	movs	r3, #0
   d85b0:	6083      	str	r3, [r0, #8]
   d85b2:	f000 bb2d 	b.w	d8c10 <__aeabi_atexit>
   d85b6:	bf00      	nop
   d85b8:	2003e680 	.word	0x2003e680
   d85bc:	2003dee8 	.word	0x2003dee8
   d85c0:	000d859d 	.word	0x000d859d

000d85c4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d85c4:	b510      	push	{r4, lr}
   d85c6:	4604      	mov	r4, r0
{
	free(buffer);
   d85c8:	6800      	ldr	r0, [r0, #0]
   d85ca:	f7fc fc0d 	bl	d4de8 <free>
}
   d85ce:	4620      	mov	r0, r4
   d85d0:	bd10      	pop	{r4, pc}

000d85d2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d85d2:	b510      	push	{r4, lr}
   d85d4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d85d6:	6800      	ldr	r0, [r0, #0]
   d85d8:	b108      	cbz	r0, d85de <_ZN6String10invalidateEv+0xc>
   d85da:	f7fc fc05 	bl	d4de8 <free>
	buffer = NULL;
   d85de:	2300      	movs	r3, #0
	capacity = len = 0;
   d85e0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d85e4:	6023      	str	r3, [r4, #0]
}
   d85e6:	bd10      	pop	{r4, pc}

000d85e8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d85e8:	b538      	push	{r3, r4, r5, lr}
   d85ea:	4604      	mov	r4, r0
   d85ec:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d85ee:	6800      	ldr	r0, [r0, #0]
   d85f0:	3101      	adds	r1, #1
   d85f2:	f7fc fc01 	bl	d4df8 <realloc>
	if (newbuffer) {
   d85f6:	b110      	cbz	r0, d85fe <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d85f8:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d85fc:	2001      	movs	r0, #1
	}
	return 0;
}
   d85fe:	bd38      	pop	{r3, r4, r5, pc}

000d8600 <_ZN6String7reserveEj>:
{
   d8600:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d8602:	6803      	ldr	r3, [r0, #0]
{
   d8604:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d8606:	b123      	cbz	r3, d8612 <_ZN6String7reserveEj+0x12>
   d8608:	6843      	ldr	r3, [r0, #4]
   d860a:	428b      	cmp	r3, r1
   d860c:	d301      	bcc.n	d8612 <_ZN6String7reserveEj+0x12>
   d860e:	2001      	movs	r0, #1
}
   d8610:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d8612:	4620      	mov	r0, r4
   d8614:	f7ff ffe8 	bl	d85e8 <_ZN6String12changeBufferEj>
   d8618:	2800      	cmp	r0, #0
   d861a:	d0f9      	beq.n	d8610 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d861c:	68a3      	ldr	r3, [r4, #8]
   d861e:	2b00      	cmp	r3, #0
   d8620:	d1f5      	bne.n	d860e <_ZN6String7reserveEj+0xe>
   d8622:	6822      	ldr	r2, [r4, #0]
   d8624:	7013      	strb	r3, [r2, #0]
   d8626:	e7f2      	b.n	d860e <_ZN6String7reserveEj+0xe>

000d8628 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d8628:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d862a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d862c:	4611      	mov	r1, r2
   d862e:	9201      	str	r2, [sp, #4]
{
   d8630:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d8632:	f7ff ffe5 	bl	d8600 <_ZN6String7reserveEj>
   d8636:	9a01      	ldr	r2, [sp, #4]
   d8638:	b928      	cbnz	r0, d8646 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d863a:	4620      	mov	r0, r4
   d863c:	f7ff ffc9 	bl	d85d2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d8640:	4620      	mov	r0, r4
   d8642:	b003      	add	sp, #12
   d8644:	bd30      	pop	{r4, r5, pc}
	len = length;
   d8646:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d8648:	4629      	mov	r1, r5
   d864a:	6820      	ldr	r0, [r4, #0]
   d864c:	f000 fc1a 	bl	d8e84 <memcpy>
	buffer[len] = 0;
   d8650:	6822      	ldr	r2, [r4, #0]
   d8652:	68a3      	ldr	r3, [r4, #8]
   d8654:	2100      	movs	r1, #0
   d8656:	54d1      	strb	r1, [r2, r3]
	return *this;
   d8658:	e7f2      	b.n	d8640 <_ZN6String4copyEPKcj+0x18>

000d865a <_ZN6StringC1EPKc>:
	buffer = NULL;
   d865a:	2300      	movs	r3, #0
String::String(const char *cstr)
   d865c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d865e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d8662:	4604      	mov	r4, r0
	len = 0;
   d8664:	6083      	str	r3, [r0, #8]
	flags = 0;
   d8666:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d8668:	b141      	cbz	r1, d867c <_ZN6StringC1EPKc+0x22>
   d866a:	4608      	mov	r0, r1
   d866c:	9101      	str	r1, [sp, #4]
   d866e:	f000 fca4 	bl	d8fba <strlen>
   d8672:	9901      	ldr	r1, [sp, #4]
   d8674:	4602      	mov	r2, r0
   d8676:	4620      	mov	r0, r4
   d8678:	f7ff ffd6 	bl	d8628 <_ZN6String4copyEPKcj>
}
   d867c:	4620      	mov	r0, r4
   d867e:	b002      	add	sp, #8
   d8680:	bd10      	pop	{r4, pc}

000d8682 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d8682:	b538      	push	{r3, r4, r5, lr}
   d8684:	4605      	mov	r5, r0
	if (buffer) {
   d8686:	6800      	ldr	r0, [r0, #0]
{
   d8688:	460c      	mov	r4, r1
	if (buffer) {
   d868a:	b168      	cbz	r0, d86a8 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d868c:	686a      	ldr	r2, [r5, #4]
   d868e:	688b      	ldr	r3, [r1, #8]
   d8690:	429a      	cmp	r2, r3
   d8692:	d307      	bcc.n	d86a4 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d8694:	6809      	ldr	r1, [r1, #0]
   d8696:	f000 fc6a 	bl	d8f6e <strcpy>
			len = rhs.len;
   d869a:	68a3      	ldr	r3, [r4, #8]
   d869c:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d869e:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d86a0:	60a3      	str	r3, [r4, #8]
}
   d86a2:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d86a4:	f7fc fba0 	bl	d4de8 <free>
	buffer = rhs.buffer;
   d86a8:	6823      	ldr	r3, [r4, #0]
   d86aa:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d86ac:	6863      	ldr	r3, [r4, #4]
   d86ae:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d86b0:	68a3      	ldr	r3, [r4, #8]
   d86b2:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d86b4:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d86b6:	e9c4 3300 	strd	r3, r3, [r4]
   d86ba:	e7f1      	b.n	d86a0 <_ZN6String4moveERS_+0x1e>

000d86bc <_ZN6StringC1EOS_>:
String::String(String &&rval)
   d86bc:	b510      	push	{r4, lr}
	buffer = NULL;
   d86be:	2300      	movs	r3, #0
	capacity = 0;
   d86c0:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   d86c4:	4604      	mov	r4, r0
	len = 0;
   d86c6:	6083      	str	r3, [r0, #8]
	flags = 0;
   d86c8:	7303      	strb	r3, [r0, #12]
	move(rval);
   d86ca:	f7ff ffda 	bl	d8682 <_ZN6String4moveERS_>
}
   d86ce:	4620      	mov	r0, r4
   d86d0:	bd10      	pop	{r4, pc}

000d86d2 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d86d2:	4288      	cmp	r0, r1
{
   d86d4:	b510      	push	{r4, lr}
   d86d6:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d86d8:	d005      	beq.n	d86e6 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d86da:	680b      	ldr	r3, [r1, #0]
   d86dc:	b12b      	cbz	r3, d86ea <_ZN6StringaSERKS_+0x18>
   d86de:	688a      	ldr	r2, [r1, #8]
   d86e0:	4619      	mov	r1, r3
   d86e2:	f7ff ffa1 	bl	d8628 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d86e6:	4620      	mov	r0, r4
   d86e8:	bd10      	pop	{r4, pc}
	else invalidate();
   d86ea:	f7ff ff72 	bl	d85d2 <_ZN6String10invalidateEv>
   d86ee:	e7fa      	b.n	d86e6 <_ZN6StringaSERKS_+0x14>

000d86f0 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d86f0:	b510      	push	{r4, lr}
	buffer = NULL;
   d86f2:	2300      	movs	r3, #0
String::String(const String &value)
   d86f4:	4604      	mov	r4, r0
	capacity = 0;
   d86f6:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d86fa:	6083      	str	r3, [r0, #8]
	flags = 0;
   d86fc:	7303      	strb	r3, [r0, #12]
	*this = value;
   d86fe:	f7ff ffe8 	bl	d86d2 <_ZN6StringaSERKS_>
}
   d8702:	4620      	mov	r0, r4
   d8704:	bd10      	pop	{r4, pc}

000d8706 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d8706:	b513      	push	{r0, r1, r4, lr}
   d8708:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d870a:	b159      	cbz	r1, d8724 <_ZN6StringaSEPKc+0x1e>
   d870c:	4608      	mov	r0, r1
   d870e:	9101      	str	r1, [sp, #4]
   d8710:	f000 fc53 	bl	d8fba <strlen>
   d8714:	9901      	ldr	r1, [sp, #4]
   d8716:	4602      	mov	r2, r0
   d8718:	4620      	mov	r0, r4
   d871a:	f7ff ff85 	bl	d8628 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d871e:	4620      	mov	r0, r4
   d8720:	b002      	add	sp, #8
   d8722:	bd10      	pop	{r4, pc}
	else invalidate();
   d8724:	f7ff ff55 	bl	d85d2 <_ZN6String10invalidateEv>
   d8728:	e7f9      	b.n	d871e <_ZN6StringaSEPKc+0x18>

000d872a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d872a:	b570      	push	{r4, r5, r6, lr}
   d872c:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d872e:	460e      	mov	r6, r1
   d8730:	b909      	cbnz	r1, d8736 <_ZN6String6concatEPKcj+0xc>
   d8732:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d8734:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d8736:	b16a      	cbz	r2, d8754 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d8738:	6884      	ldr	r4, [r0, #8]
   d873a:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d873c:	4621      	mov	r1, r4
   d873e:	f7ff ff5f 	bl	d8600 <_ZN6String7reserveEj>
   d8742:	2800      	cmp	r0, #0
   d8744:	d0f5      	beq.n	d8732 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d8746:	6828      	ldr	r0, [r5, #0]
   d8748:	68ab      	ldr	r3, [r5, #8]
   d874a:	4631      	mov	r1, r6
   d874c:	4418      	add	r0, r3
   d874e:	f000 fc0e 	bl	d8f6e <strcpy>
	len = newlen;
   d8752:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d8754:	2001      	movs	r0, #1
   d8756:	e7ed      	b.n	d8734 <_ZN6String6concatEPKcj+0xa>

000d8758 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d8758:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d875a:	2300      	movs	r3, #0
	buf[0] = c;
   d875c:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   d8760:	2201      	movs	r2, #1
   d8762:	a901      	add	r1, sp, #4
	buf[1] = 0;
   d8764:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d8768:	f7ff ffdf 	bl	d872a <_ZN6String6concatEPKcj>
}
   d876c:	b003      	add	sp, #12
   d876e:	f85d fb04 	ldr.w	pc, [sp], #4

000d8772 <_ZNK6String9compareToERKS_>:
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
   d8772:	6802      	ldr	r2, [r0, #0]
{
   d8774:	460b      	mov	r3, r1
   d8776:	6809      	ldr	r1, [r1, #0]
	if (!buffer || !s.buffer) {
   d8778:	b162      	cbz	r2, d8794 <_ZNK6String9compareToERKS_+0x22>
   d877a:	b941      	cbnz	r1, d878e <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
   d877c:	6880      	ldr	r0, [r0, #8]
   d877e:	b160      	cbz	r0, d879a <_ZNK6String9compareToERKS_+0x28>
   d8780:	7810      	ldrb	r0, [r2, #0]
   d8782:	4770      	bx	lr
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   d8784:	6898      	ldr	r0, [r3, #8]
   d8786:	b140      	cbz	r0, d879a <_ZNK6String9compareToERKS_+0x28>
   d8788:	7809      	ldrb	r1, [r1, #0]
   d878a:	4248      	negs	r0, r1
   d878c:	4770      	bx	lr
		return 0;
	}
	return strcmp(buffer, s.buffer);
   d878e:	4610      	mov	r0, r2
   d8790:	f000 bbe3 	b.w	d8f5a <strcmp>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
   d8794:	2900      	cmp	r1, #0
   d8796:	d1f5      	bne.n	d8784 <_ZNK6String9compareToERKS_+0x12>
		return 0;
   d8798:	4608      	mov	r0, r1
}
   d879a:	4770      	bx	lr

000d879c <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
   d879c:	b508      	push	{r3, lr}
	return (len == s2.len && compareTo(s2) == 0);
   d879e:	6882      	ldr	r2, [r0, #8]
   d87a0:	688b      	ldr	r3, [r1, #8]
   d87a2:	429a      	cmp	r2, r3
   d87a4:	d105      	bne.n	d87b2 <_ZNK6String6equalsERKS_+0x16>
   d87a6:	f7ff ffe4 	bl	d8772 <_ZNK6String9compareToERKS_>
   d87aa:	fab0 f080 	clz	r0, r0
   d87ae:	0940      	lsrs	r0, r0, #5
}
   d87b0:	bd08      	pop	{r3, pc}
	return (len == s2.len && compareTo(s2) == 0);
   d87b2:	2000      	movs	r0, #0
   d87b4:	e7fc      	b.n	d87b0 <_ZNK6String6equalsERKS_+0x14>

000d87b6 <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
   d87b6:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d87b8:	6882      	ldr	r2, [r0, #8]
   d87ba:	b93a      	cbnz	r2, d87cc <_ZNK6String6equalsEPKc+0x16>
   d87bc:	b121      	cbz	r1, d87c8 <_ZNK6String6equalsEPKc+0x12>
   d87be:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d87c0:	fab0 f080 	clz	r0, r0
   d87c4:	0940      	lsrs	r0, r0, #5
   d87c6:	e000      	b.n	d87ca <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d87c8:	2001      	movs	r0, #1
}
   d87ca:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d87cc:	6800      	ldr	r0, [r0, #0]
   d87ce:	b909      	cbnz	r1, d87d4 <_ZNK6String6equalsEPKc+0x1e>
   d87d0:	7800      	ldrb	r0, [r0, #0]
   d87d2:	e7f5      	b.n	d87c0 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d87d4:	f000 fbc1 	bl	d8f5a <strcmp>
   d87d8:	e7f2      	b.n	d87c0 <_ZNK6String6equalsEPKc+0xa>

000d87da <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d87da:	b510      	push	{r4, lr}
   d87dc:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d87de:	6800      	ldr	r0, [r0, #0]
   d87e0:	b118      	cbz	r0, d87ea <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d87e2:	f7fc fb01 	bl	d4de8 <free>
            wakeupSource_ = nullptr;
   d87e6:	2300      	movs	r3, #0
   d87e8:	6023      	str	r3, [r4, #0]
        }
    }
   d87ea:	bd10      	pop	{r4, pc}

000d87ec <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d87ec:	b510      	push	{r4, lr}
   d87ee:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d87f0:	f7ff fff3 	bl	d87da <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d87f4:	4620      	mov	r0, r4
   d87f6:	bd10      	pop	{r4, pc}

000d87f8 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d87f8:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d87fa:	4b09      	ldr	r3, [pc, #36]	; (d8820 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d87fc:	4c09      	ldr	r4, [pc, #36]	; (d8824 <_GLOBAL__sub_I_System+0x2c>)
   d87fe:	2202      	movs	r2, #2
   d8800:	2000      	movs	r0, #0
   d8802:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d8804:	4b08      	ldr	r3, [pc, #32]	; (d8828 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d8806:	6020      	str	r0, [r4, #0]
   d8808:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d880a:	71a0      	strb	r0, [r4, #6]
   d880c:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d880e:	f7fc fa47 	bl	d4ca0 <set_system_mode>
SystemClass System;
   d8812:	4620      	mov	r0, r4
   d8814:	4a05      	ldr	r2, [pc, #20]	; (d882c <_GLOBAL__sub_I_System+0x34>)
   d8816:	4906      	ldr	r1, [pc, #24]	; (d8830 <_GLOBAL__sub_I_System+0x38>)
   d8818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d881c:	f000 b9f8 	b.w	d8c10 <__aeabi_atexit>
   d8820:	2003e69c 	.word	0x2003e69c
   d8824:	2003e690 	.word	0x2003e690
   d8828:	ffff0000 	.word	0xffff0000
   d882c:	2003dee8 	.word	0x2003dee8
   d8830:	000d87ed 	.word	0x000d87ed

000d8834 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d8834:	4b02      	ldr	r3, [pc, #8]	; (d8840 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d8836:	681a      	ldr	r2, [r3, #0]
   d8838:	4b02      	ldr	r3, [pc, #8]	; (d8844 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d883a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d883c:	4770      	bx	lr
   d883e:	bf00      	nop
   d8840:	2003de80 	.word	0x2003de80
   d8844:	2003e6a0 	.word	0x2003e6a0

000d8848 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d8848:	4770      	bx	lr

000d884a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d884a:	7441      	strb	r1, [r0, #17]
}
   d884c:	4770      	bx	lr

000d884e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d884e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d8850:	7c00      	ldrb	r0, [r0, #16]
   d8852:	f7fc f9ad 	bl	d4bb0 <hal_usart_available_data_for_write>
}
   d8856:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d885a:	bd08      	pop	{r3, pc}

000d885c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d885c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d885e:	7c00      	ldrb	r0, [r0, #16]
   d8860:	f7fc f986 	bl	d4b70 <hal_usart_available>
}
   d8864:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8868:	bd08      	pop	{r3, pc}

000d886a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d886a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d886c:	7c00      	ldrb	r0, [r0, #16]
   d886e:	f7fc f98f 	bl	d4b90 <hal_usart_peek>
}
   d8872:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8876:	bd08      	pop	{r3, pc}

000d8878 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d8878:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d887a:	7c00      	ldrb	r0, [r0, #16]
   d887c:	f7fc f980 	bl	d4b80 <hal_usart_read>
}
   d8880:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8884:	bd08      	pop	{r3, pc}

000d8886 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d8886:	7c00      	ldrb	r0, [r0, #16]
   d8888:	f7fc b98a 	b.w	d4ba0 <hal_usart_flush>

000d888c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d888c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d888e:	7c45      	ldrb	r5, [r0, #17]
{
   d8890:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d8892:	b12d      	cbz	r5, d88a0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d8894:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d8896:	b003      	add	sp, #12
   d8898:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d889c:	f7fc b960 	b.w	d4b60 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d88a0:	7c00      	ldrb	r0, [r0, #16]
   d88a2:	9101      	str	r1, [sp, #4]
   d88a4:	f7fc f984 	bl	d4bb0 <hal_usart_available_data_for_write>
   d88a8:	2800      	cmp	r0, #0
   d88aa:	9901      	ldr	r1, [sp, #4]
   d88ac:	dcf2      	bgt.n	d8894 <_ZN11USARTSerial5writeEh+0x8>
}
   d88ae:	4628      	mov	r0, r5
   d88b0:	b003      	add	sp, #12
   d88b2:	bd30      	pop	{r4, r5, pc}

000d88b4 <_ZN11USARTSerialD0Ev>:
   d88b4:	b510      	push	{r4, lr}
   d88b6:	2114      	movs	r1, #20
   d88b8:	4604      	mov	r4, r0
   d88ba:	f000 f9ae 	bl	d8c1a <_ZdlPvj>
   d88be:	4620      	mov	r0, r4
   d88c0:	bd10      	pop	{r4, pc}
	...

000d88c4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d88c4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d88c6:	f04f 0c00 	mov.w	ip, #0
   d88ca:	4604      	mov	r4, r0
   d88cc:	4608      	mov	r0, r1
   d88ce:	4611      	mov	r1, r2
   d88d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d88d4:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d88d8:	4a04      	ldr	r2, [pc, #16]	; (d88ec <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d88da:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d88dc:	2201      	movs	r2, #1
  _serial = serial;
   d88de:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d88e0:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d88e2:	461a      	mov	r2, r3
   d88e4:	f7fc f92c 	bl	d4b40 <hal_usart_init>
}
   d88e8:	4620      	mov	r0, r4
   d88ea:	bd10      	pop	{r4, pc}
   d88ec:	000d9710 	.word	0x000d9710

000d88f0 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   d88f0:	7c00      	ldrb	r0, [r0, #16]
   d88f2:	2300      	movs	r3, #0
   d88f4:	f7fc b964 	b.w	d4bc0 <hal_usart_begin_config>

000d88f8 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   d88f8:	2200      	movs	r2, #0
   d88fa:	f7ff bff9 	b.w	d88f0 <_ZN11USARTSerial5beginEmm>

000d88fe <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   d88fe:	7c00      	ldrb	r0, [r0, #16]
   d8900:	f7fc b926 	b.w	d4b50 <hal_usart_end>

000d8904 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d8904:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d8906:	4c0e      	ldr	r4, [pc, #56]	; (d8940 <_Z22__fetch_global_Serial1v+0x3c>)
   d8908:	7821      	ldrb	r1, [r4, #0]
   d890a:	f3bf 8f5b 	dmb	ish
   d890e:	f011 0101 	ands.w	r1, r1, #1
   d8912:	d112      	bne.n	d893a <_Z22__fetch_global_Serial1v+0x36>
   d8914:	4620      	mov	r0, r4
   d8916:	9101      	str	r1, [sp, #4]
   d8918:	f7fb fbca 	bl	d40b0 <__cxa_guard_acquire>
   d891c:	9901      	ldr	r1, [sp, #4]
   d891e:	b160      	cbz	r0, d893a <_Z22__fetch_global_Serial1v+0x36>
   d8920:	4a08      	ldr	r2, [pc, #32]	; (d8944 <_Z22__fetch_global_Serial1v+0x40>)
   d8922:	4b09      	ldr	r3, [pc, #36]	; (d8948 <_Z22__fetch_global_Serial1v+0x44>)
   d8924:	4809      	ldr	r0, [pc, #36]	; (d894c <_Z22__fetch_global_Serial1v+0x48>)
   d8926:	f7ff ffcd 	bl	d88c4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d892a:	4620      	mov	r0, r4
   d892c:	f7fb fbc5 	bl	d40ba <__cxa_guard_release>
   d8930:	4a07      	ldr	r2, [pc, #28]	; (d8950 <_Z22__fetch_global_Serial1v+0x4c>)
   d8932:	4908      	ldr	r1, [pc, #32]	; (d8954 <_Z22__fetch_global_Serial1v+0x50>)
   d8934:	4805      	ldr	r0, [pc, #20]	; (d894c <_Z22__fetch_global_Serial1v+0x48>)
   d8936:	f000 f96b 	bl	d8c10 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d893a:	4804      	ldr	r0, [pc, #16]	; (d894c <_Z22__fetch_global_Serial1v+0x48>)
   d893c:	b002      	add	sp, #8
   d893e:	bd10      	pop	{r4, pc}
   d8940:	2003e6a4 	.word	0x2003e6a4
   d8944:	2003e6a8 	.word	0x2003e6a8
   d8948:	2003e72c 	.word	0x2003e72c
   d894c:	2003e7b0 	.word	0x2003e7b0
   d8950:	2003dee8 	.word	0x2003dee8
   d8954:	000d8849 	.word	0x000d8849

000d8958 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d8958:	7441      	strb	r1, [r0, #17]
}
   d895a:	4770      	bx	lr

000d895c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d895c:	4770      	bx	lr

000d895e <_ZN9USBSerial4readEv>:
{
   d895e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d8960:	2100      	movs	r1, #0
   d8962:	7c00      	ldrb	r0, [r0, #16]
   d8964:	f7fc f95c 	bl	d4c20 <HAL_USB_USART_Receive_Data>
}
   d8968:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d896c:	bd08      	pop	{r3, pc}

000d896e <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d896e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d8970:	2101      	movs	r1, #1
   d8972:	7c00      	ldrb	r0, [r0, #16]
   d8974:	f7fc f954 	bl	d4c20 <HAL_USB_USART_Receive_Data>
}
   d8978:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d897c:	bd08      	pop	{r3, pc}

000d897e <_ZN9USBSerial17availableForWriteEv>:
{
   d897e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d8980:	7c00      	ldrb	r0, [r0, #16]
   d8982:	f7fc f945 	bl	d4c10 <HAL_USB_USART_Available_Data_For_Write>
}
   d8986:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d898a:	bd08      	pop	{r3, pc}

000d898c <_ZN9USBSerial9availableEv>:
{
   d898c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d898e:	7c00      	ldrb	r0, [r0, #16]
   d8990:	f7fc f936 	bl	d4c00 <HAL_USB_USART_Available_Data>
}
   d8994:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8998:	bd08      	pop	{r3, pc}

000d899a <_ZN9USBSerial5writeEh>:
{
   d899a:	b513      	push	{r0, r1, r4, lr}
   d899c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d899e:	7c00      	ldrb	r0, [r0, #16]
{
   d89a0:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d89a2:	f7fc f935 	bl	d4c10 <HAL_USB_USART_Available_Data_For_Write>
   d89a6:	2800      	cmp	r0, #0
   d89a8:	9901      	ldr	r1, [sp, #4]
   d89aa:	dc01      	bgt.n	d89b0 <_ZN9USBSerial5writeEh+0x16>
   d89ac:	7c60      	ldrb	r0, [r4, #17]
   d89ae:	b120      	cbz	r0, d89ba <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d89b0:	7c20      	ldrb	r0, [r4, #16]
   d89b2:	f7fc f93d 	bl	d4c30 <HAL_USB_USART_Send_Data>
   d89b6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d89ba:	b002      	add	sp, #8
   d89bc:	bd10      	pop	{r4, pc}

000d89be <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d89be:	7c00      	ldrb	r0, [r0, #16]
   d89c0:	f7fc b93e 	b.w	d4c40 <HAL_USB_USART_Flush_Data>

000d89c4 <_ZN9USBSerialD0Ev>:
   d89c4:	b510      	push	{r4, lr}
   d89c6:	2114      	movs	r1, #20
   d89c8:	4604      	mov	r4, r0
   d89ca:	f000 f926 	bl	d8c1a <_ZdlPvj>
   d89ce:	4620      	mov	r0, r4
   d89d0:	bd10      	pop	{r4, pc}
	...

000d89d4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d89d4:	b510      	push	{r4, lr}
   d89d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d89da:	4604      	mov	r4, r0
   d89dc:	4608      	mov	r0, r1
   d89de:	2100      	movs	r1, #0
   d89e0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d89e4:	4b04      	ldr	r3, [pc, #16]	; (d89f8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d89e6:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d89e8:	2301      	movs	r3, #1
  _serial = serial;
   d89ea:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d89ec:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d89ee:	4611      	mov	r1, r2
   d89f0:	f7fc f8ee 	bl	d4bd0 <HAL_USB_USART_Init>
}
   d89f4:	4620      	mov	r0, r4
   d89f6:	bd10      	pop	{r4, pc}
   d89f8:	000d9740 	.word	0x000d9740

000d89fc <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d89fc:	7c00      	ldrb	r0, [r0, #16]
   d89fe:	2200      	movs	r2, #0
   d8a00:	f7fc b8ee 	b.w	d4be0 <HAL_USB_USART_Begin>

000d8a04 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   d8a04:	7c00      	ldrb	r0, [r0, #16]
   d8a06:	f7fc b8f3 	b.w	d4bf0 <HAL_USB_USART_End>

000d8a0a <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d8a0a:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d8a0c:	2214      	movs	r2, #20
{
   d8a0e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d8a10:	2100      	movs	r1, #0
   d8a12:	f000 fa5f 	bl	d8ed4 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d8a16:	4620      	mov	r0, r4
   d8a18:	bd10      	pop	{r4, pc}
	...

000d8a1c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d8a1c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8a1e:	4c10      	ldr	r4, [pc, #64]	; (d8a60 <_Z16_fetch_usbserialv+0x44>)
{
   d8a20:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d8a22:	a803      	add	r0, sp, #12
   d8a24:	f7ff fff1 	bl	d8a0a <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8a28:	7821      	ldrb	r1, [r4, #0]
   d8a2a:	f3bf 8f5b 	dmb	ish
   d8a2e:	f011 0101 	ands.w	r1, r1, #1
   d8a32:	d111      	bne.n	d8a58 <_Z16_fetch_usbserialv+0x3c>
   d8a34:	4620      	mov	r0, r4
   d8a36:	9101      	str	r1, [sp, #4]
   d8a38:	f7fb fb3a 	bl	d40b0 <__cxa_guard_acquire>
   d8a3c:	9901      	ldr	r1, [sp, #4]
   d8a3e:	b158      	cbz	r0, d8a58 <_Z16_fetch_usbserialv+0x3c>
   d8a40:	aa03      	add	r2, sp, #12
   d8a42:	4808      	ldr	r0, [pc, #32]	; (d8a64 <_Z16_fetch_usbserialv+0x48>)
   d8a44:	f7ff ffc6 	bl	d89d4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d8a48:	4620      	mov	r0, r4
   d8a4a:	f7fb fb36 	bl	d40ba <__cxa_guard_release>
   d8a4e:	4a06      	ldr	r2, [pc, #24]	; (d8a68 <_Z16_fetch_usbserialv+0x4c>)
   d8a50:	4906      	ldr	r1, [pc, #24]	; (d8a6c <_Z16_fetch_usbserialv+0x50>)
   d8a52:	4804      	ldr	r0, [pc, #16]	; (d8a64 <_Z16_fetch_usbserialv+0x48>)
   d8a54:	f000 f8dc 	bl	d8c10 <__aeabi_atexit>
	return _usbserial;
}
   d8a58:	4802      	ldr	r0, [pc, #8]	; (d8a64 <_Z16_fetch_usbserialv+0x48>)
   d8a5a:	b008      	add	sp, #32
   d8a5c:	bd10      	pop	{r4, pc}
   d8a5e:	bf00      	nop
   d8a60:	2003e7c4 	.word	0x2003e7c4
   d8a64:	2003e7c8 	.word	0x2003e7c8
   d8a68:	2003dee8 	.word	0x2003dee8
   d8a6c:	000d895d 	.word	0x000d895d

000d8a70 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d8a70:	2200      	movs	r2, #0
   d8a72:	6840      	ldr	r0, [r0, #4]
   d8a74:	4611      	mov	r1, r2
   d8a76:	f7fc b977 	b.w	d4d68 <network_ready>

000d8a7a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d8a7a:	2200      	movs	r2, #0
   d8a7c:	6840      	ldr	r0, [r0, #4]
   d8a7e:	4611      	mov	r1, r2
   d8a80:	f7fc b992 	b.w	d4da8 <network_listening>

000d8a84 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d8a84:	2200      	movs	r2, #0
   d8a86:	6840      	ldr	r0, [r0, #4]
   d8a88:	4611      	mov	r1, r2
   d8a8a:	f7fc b99d 	b.w	d4dc8 <network_get_listen_timeout>

000d8a8e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d8a8e:	6840      	ldr	r0, [r0, #4]
   d8a90:	2200      	movs	r2, #0
   d8a92:	f7fc b991 	b.w	d4db8 <network_set_listen_timeout>

000d8a96 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d8a96:	6840      	ldr	r0, [r0, #4]
   d8a98:	2200      	movs	r2, #0
   d8a9a:	f081 0101 	eor.w	r1, r1, #1
   d8a9e:	f7fc b97b 	b.w	d4d98 <network_listen>

000d8aa2 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d8aa2:	2300      	movs	r3, #0
   d8aa4:	6840      	ldr	r0, [r0, #4]
   d8aa6:	461a      	mov	r2, r3
   d8aa8:	4619      	mov	r1, r3
   d8aaa:	f7fc b96d 	b.w	d4d88 <network_off>

000d8aae <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d8aae:	2300      	movs	r3, #0
   d8ab0:	6840      	ldr	r0, [r0, #4]
   d8ab2:	461a      	mov	r2, r3
   d8ab4:	4619      	mov	r1, r3
   d8ab6:	f7fc b95f 	b.w	d4d78 <network_on>

000d8aba <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d8aba:	2200      	movs	r2, #0
   d8abc:	6840      	ldr	r0, [r0, #4]
   d8abe:	4611      	mov	r1, r2
   d8ac0:	f7fc b942 	b.w	d4d48 <network_connecting>

000d8ac4 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8ac4:	6840      	ldr	r0, [r0, #4]
   d8ac6:	2200      	movs	r2, #0
   d8ac8:	2102      	movs	r1, #2
   d8aca:	f7fc b945 	b.w	d4d58 <network_disconnect>

000d8ace <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d8ace:	2300      	movs	r3, #0
   d8ad0:	6840      	ldr	r0, [r0, #4]
   d8ad2:	461a      	mov	r2, r3
   d8ad4:	f7fc b930 	b.w	d4d38 <network_connect>

000d8ad8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d8ad8:	4b02      	ldr	r3, [pc, #8]	; (d8ae4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d8ada:	2204      	movs	r2, #4
   d8adc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d8ade:	4a02      	ldr	r2, [pc, #8]	; (d8ae8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d8ae0:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d8ae2:	4770      	bx	lr
   d8ae4:	2003e7dc 	.word	0x2003e7dc
   d8ae8:	000d9770 	.word	0x000d9770

000d8aec <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d8aec:	4b01      	ldr	r3, [pc, #4]	; (d8af4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d8aee:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d8af0:	4770      	bx	lr
   d8af2:	bf00      	nop
   d8af4:	2003de84 	.word	0x2003de84

000d8af8 <serialEventRun>:
{
   d8af8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d8afa:	4b0b      	ldr	r3, [pc, #44]	; (d8b28 <serialEventRun+0x30>)
   d8afc:	b143      	cbz	r3, d8b10 <serialEventRun+0x18>
   d8afe:	f7ff ff8d 	bl	d8a1c <_Z16_fetch_usbserialv>
   d8b02:	6803      	ldr	r3, [r0, #0]
   d8b04:	691b      	ldr	r3, [r3, #16]
   d8b06:	4798      	blx	r3
   d8b08:	2800      	cmp	r0, #0
   d8b0a:	dd01      	ble.n	d8b10 <serialEventRun+0x18>
        serialEvent();
   d8b0c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d8b10:	4b06      	ldr	r3, [pc, #24]	; (d8b2c <serialEventRun+0x34>)
   d8b12:	b143      	cbz	r3, d8b26 <serialEventRun+0x2e>
   d8b14:	f7ff fef6 	bl	d8904 <_Z22__fetch_global_Serial1v>
   d8b18:	6803      	ldr	r3, [r0, #0]
   d8b1a:	691b      	ldr	r3, [r3, #16]
   d8b1c:	4798      	blx	r3
   d8b1e:	2800      	cmp	r0, #0
   d8b20:	dd01      	ble.n	d8b26 <serialEventRun+0x2e>
        serialEvent1();
   d8b22:	f3af 8000 	nop.w
}
   d8b26:	bd08      	pop	{r3, pc}
	...

000d8b30 <_post_loop>:
{
   d8b30:	b508      	push	{r3, lr}
	serialEventRun();
   d8b32:	f7ff ffe1 	bl	d8af8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d8b36:	f7fb ffe3 	bl	d4b00 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d8b3a:	4b01      	ldr	r3, [pc, #4]	; (d8b40 <_post_loop+0x10>)
   d8b3c:	6018      	str	r0, [r3, #0]
}
   d8b3e:	bd08      	pop	{r3, pc}
   d8b40:	2003e7ec 	.word	0x2003e7ec

000d8b44 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d8b44:	4802      	ldr	r0, [pc, #8]	; (d8b50 <_Z33system_initialize_user_backup_ramv+0xc>)
   d8b46:	4a03      	ldr	r2, [pc, #12]	; (d8b54 <_Z33system_initialize_user_backup_ramv+0x10>)
   d8b48:	4903      	ldr	r1, [pc, #12]	; (d8b58 <_Z33system_initialize_user_backup_ramv+0x14>)
   d8b4a:	1a12      	subs	r2, r2, r0
   d8b4c:	f000 b99a 	b.w	d8e84 <memcpy>
   d8b50:	2003f400 	.word	0x2003f400
   d8b54:	2003f404 	.word	0x2003f404
   d8b58:	000d99c0 	.word	0x000d99c0

000d8b5c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d8b5c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8b5e:	2300      	movs	r3, #0
   d8b60:	9300      	str	r3, [sp, #0]
   d8b62:	461a      	mov	r2, r3
   d8b64:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d8b68:	f7fc f8c4 	bl	d4cf4 <system_ctrl_set_result>
}
   d8b6c:	b003      	add	sp, #12
   d8b6e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d8b74 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d8b74:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d8b76:	8843      	ldrh	r3, [r0, #2]
   d8b78:	2b0a      	cmp	r3, #10
   d8b7a:	d008      	beq.n	d8b8e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d8b7c:	2b50      	cmp	r3, #80	; 0x50
   d8b7e:	d10b      	bne.n	d8b98 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d8b80:	4b09      	ldr	r3, [pc, #36]	; (d8ba8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d8b82:	681b      	ldr	r3, [r3, #0]
   d8b84:	b14b      	cbz	r3, d8b9a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d8b86:	b003      	add	sp, #12
   d8b88:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d8b8c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d8b8e:	f7ff ffe5 	bl	d8b5c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d8b92:	b003      	add	sp, #12
   d8b94:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8b98:	2300      	movs	r3, #0
   d8b9a:	9300      	str	r3, [sp, #0]
   d8b9c:	461a      	mov	r2, r3
   d8b9e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d8ba2:	f7fc f8a7 	bl	d4cf4 <system_ctrl_set_result>
}
   d8ba6:	e7f4      	b.n	d8b92 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d8ba8:	2003e7e8 	.word	0x2003e7e8

000d8bac <module_user_init_hook>:
{
   d8bac:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d8bae:	4c12      	ldr	r4, [pc, #72]	; (d8bf8 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d8bb0:	4812      	ldr	r0, [pc, #72]	; (d8bfc <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d8bb2:	4d13      	ldr	r5, [pc, #76]	; (d8c00 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d8bb4:	2100      	movs	r1, #0
   d8bb6:	f7fc f93f 	bl	d4e38 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d8bba:	6823      	ldr	r3, [r4, #0]
   d8bbc:	42ab      	cmp	r3, r5
   d8bbe:	4b11      	ldr	r3, [pc, #68]	; (d8c04 <module_user_init_hook+0x58>)
   d8bc0:	bf0c      	ite	eq
   d8bc2:	2201      	moveq	r2, #1
   d8bc4:	2200      	movne	r2, #0
   d8bc6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d8bc8:	d002      	beq.n	d8bd0 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d8bca:	f7ff ffbb 	bl	d8b44 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d8bce:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d8bd0:	f7fb ff86 	bl	d4ae0 <HAL_RNG_GetRandomNumber>
   d8bd4:	4604      	mov	r4, r0
    srand(seed);
   d8bd6:	f000 f985 	bl	d8ee4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d8bda:	4b0b      	ldr	r3, [pc, #44]	; (d8c08 <module_user_init_hook+0x5c>)
   d8bdc:	b113      	cbz	r3, d8be4 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d8bde:	4620      	mov	r0, r4
   d8be0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d8be4:	2100      	movs	r1, #0
   d8be6:	4808      	ldr	r0, [pc, #32]	; (d8c08 <module_user_init_hook+0x5c>)
   d8be8:	f7fc f89e 	bl	d4d28 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d8bec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d8bf0:	4806      	ldr	r0, [pc, #24]	; (d8c0c <module_user_init_hook+0x60>)
   d8bf2:	2100      	movs	r1, #0
   d8bf4:	f7fc b874 	b.w	d4ce0 <system_ctrl_set_app_request_handler>
   d8bf8:	2003f400 	.word	0x2003f400
   d8bfc:	000d8aed 	.word	0x000d8aed
   d8c00:	9a271c1e 	.word	0x9a271c1e
   d8c04:	2003e7e4 	.word	0x2003e7e4
   d8c08:	00000000 	.word	0x00000000
   d8c0c:	000d8b75 	.word	0x000d8b75

000d8c10 <__aeabi_atexit>:
   d8c10:	460b      	mov	r3, r1
   d8c12:	4601      	mov	r1, r0
   d8c14:	4618      	mov	r0, r3
   d8c16:	f000 b919 	b.w	d8e4c <__cxa_atexit>

000d8c1a <_ZdlPvj>:
   d8c1a:	f7fb ba3c 	b.w	d4096 <_ZdlPv>

000d8c1e <_ZnwjRKSt9nothrow_t>:
   d8c1e:	f7fb ba38 	b.w	d4092 <_Znwj>

000d8c22 <_ZSt25__throw_bad_function_callv>:
   d8c22:	b508      	push	{r3, lr}
   d8c24:	f7fc f8f8 	bl	d4e18 <abort>

000d8c28 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d8c28:	4901      	ldr	r1, [pc, #4]	; (d8c30 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d8c2a:	f000 b8f9 	b.w	d8e20 <_ZNKSt9type_infoeqERKS_>
   d8c2e:	bf00      	nop
   d8c30:	000d97b8 	.word	0x000d97b8

000d8c34 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d8c34:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d8c36:	2400      	movs	r4, #0
   d8c38:	2310      	movs	r3, #16
   d8c3a:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d8c3e:	6803      	ldr	r3, [r0, #0]
   d8c40:	9400      	str	r4, [sp, #0]
   d8c42:	699e      	ldr	r6, [r3, #24]
   d8c44:	f88d 4004 	strb.w	r4, [sp, #4]
   d8c48:	4615      	mov	r5, r2
   d8c4a:	466b      	mov	r3, sp
   d8c4c:	6812      	ldr	r2, [r2, #0]
   d8c4e:	47b0      	blx	r6
   d8c50:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d8c54:	f003 0306 	and.w	r3, r3, #6
   d8c58:	2b06      	cmp	r3, #6
   d8c5a:	bf03      	ittte	eq
   d8c5c:	9b00      	ldreq	r3, [sp, #0]
   d8c5e:	602b      	streq	r3, [r5, #0]
   d8c60:	2001      	moveq	r0, #1
   d8c62:	4620      	movne	r0, r4
   d8c64:	b004      	add	sp, #16
   d8c66:	bd70      	pop	{r4, r5, r6, pc}

000d8c68 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d8c68:	9800      	ldr	r0, [sp, #0]
   d8c6a:	4290      	cmp	r0, r2
   d8c6c:	bf14      	ite	ne
   d8c6e:	2001      	movne	r0, #1
   d8c70:	2006      	moveq	r0, #6
   d8c72:	4770      	bx	lr

000d8c74 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d8c74:	b510      	push	{r4, lr}
   d8c76:	4b03      	ldr	r3, [pc, #12]	; (d8c84 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d8c78:	6003      	str	r3, [r0, #0]
   d8c7a:	4604      	mov	r4, r0
   d8c7c:	f000 f8cd 	bl	d8e1a <_ZNSt9type_infoD1Ev>
   d8c80:	4620      	mov	r0, r4
   d8c82:	bd10      	pop	{r4, pc}
   d8c84:	000d97f8 	.word	0x000d97f8

000d8c88 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d8c88:	b510      	push	{r4, lr}
   d8c8a:	4604      	mov	r4, r0
   d8c8c:	f7ff fff2 	bl	d8c74 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d8c90:	4620      	mov	r0, r4
   d8c92:	2108      	movs	r1, #8
   d8c94:	f7ff ffc1 	bl	d8c1a <_ZdlPvj>
   d8c98:	4620      	mov	r0, r4
   d8c9a:	bd10      	pop	{r4, pc}

000d8c9c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d8c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8ca0:	461f      	mov	r7, r3
   d8ca2:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d8ca6:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d8caa:	4598      	cmp	r8, r3
   d8cac:	4606      	mov	r6, r0
   d8cae:	4615      	mov	r5, r2
   d8cb0:	d107      	bne.n	d8cc2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d8cb2:	9907      	ldr	r1, [sp, #28]
   d8cb4:	f000 f8b4 	bl	d8e20 <_ZNKSt9type_infoeqERKS_>
   d8cb8:	b118      	cbz	r0, d8cc2 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d8cba:	7165      	strb	r5, [r4, #5]
   d8cbc:	2000      	movs	r0, #0
   d8cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8cc2:	4639      	mov	r1, r7
   d8cc4:	4630      	mov	r0, r6
   d8cc6:	f000 f8ab 	bl	d8e20 <_ZNKSt9type_infoeqERKS_>
   d8cca:	2800      	cmp	r0, #0
   d8ccc:	d0f6      	beq.n	d8cbc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d8cce:	2301      	movs	r3, #1
   d8cd0:	f8c4 8000 	str.w	r8, [r4]
   d8cd4:	7125      	strb	r5, [r4, #4]
   d8cd6:	71a3      	strb	r3, [r4, #6]
   d8cd8:	e7f0      	b.n	d8cbc <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d8cda <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d8cda:	b538      	push	{r3, r4, r5, lr}
   d8cdc:	4615      	mov	r5, r2
   d8cde:	461c      	mov	r4, r3
   d8ce0:	f000 f89e 	bl	d8e20 <_ZNKSt9type_infoeqERKS_>
   d8ce4:	b120      	cbz	r0, d8cf0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d8ce6:	2308      	movs	r3, #8
   d8ce8:	60e3      	str	r3, [r4, #12]
   d8cea:	2306      	movs	r3, #6
   d8cec:	6025      	str	r5, [r4, #0]
   d8cee:	7123      	strb	r3, [r4, #4]
   d8cf0:	bd38      	pop	{r3, r4, r5, pc}

000d8cf2 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d8cf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d8cf4:	4605      	mov	r5, r0
   d8cf6:	460c      	mov	r4, r1
   d8cf8:	9201      	str	r2, [sp, #4]
   d8cfa:	461e      	mov	r6, r3
   d8cfc:	f000 f890 	bl	d8e20 <_ZNKSt9type_infoeqERKS_>
   d8d00:	b950      	cbnz	r0, d8d18 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d8d02:	2e03      	cmp	r6, #3
   d8d04:	d808      	bhi.n	d8d18 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d8d06:	6823      	ldr	r3, [r4, #0]
   d8d08:	9a01      	ldr	r2, [sp, #4]
   d8d0a:	695b      	ldr	r3, [r3, #20]
   d8d0c:	4629      	mov	r1, r5
   d8d0e:	4620      	mov	r0, r4
   d8d10:	b002      	add	sp, #8
   d8d12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d8d16:	4718      	bx	r3
   d8d18:	b002      	add	sp, #8
   d8d1a:	bd70      	pop	{r4, r5, r6, pc}

000d8d1c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d8d1c:	b510      	push	{r4, lr}
   d8d1e:	4b03      	ldr	r3, [pc, #12]	; (d8d2c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d8d20:	6003      	str	r3, [r0, #0]
   d8d22:	4604      	mov	r4, r0
   d8d24:	f7ff ffa6 	bl	d8c74 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d8d28:	4620      	mov	r0, r4
   d8d2a:	bd10      	pop	{r4, pc}
   d8d2c:	000d9858 	.word	0x000d9858

000d8d30 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d8d30:	b510      	push	{r4, lr}
   d8d32:	4604      	mov	r4, r0
   d8d34:	f7ff fff2 	bl	d8d1c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d8d38:	4620      	mov	r0, r4
   d8d3a:	210c      	movs	r1, #12
   d8d3c:	f7ff ff6d 	bl	d8c1a <_ZdlPvj>
   d8d40:	4620      	mov	r0, r4
   d8d42:	bd10      	pop	{r4, pc}

000d8d44 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d8d44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d8d46:	9f08      	ldr	r7, [sp, #32]
   d8d48:	4297      	cmp	r7, r2
   d8d4a:	4605      	mov	r5, r0
   d8d4c:	460e      	mov	r6, r1
   d8d4e:	4614      	mov	r4, r2
   d8d50:	d00a      	beq.n	d8d68 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d8d52:	68a8      	ldr	r0, [r5, #8]
   d8d54:	6802      	ldr	r2, [r0, #0]
   d8d56:	9708      	str	r7, [sp, #32]
   d8d58:	6a15      	ldr	r5, [r2, #32]
   d8d5a:	4631      	mov	r1, r6
   d8d5c:	4622      	mov	r2, r4
   d8d5e:	46ac      	mov	ip, r5
   d8d60:	b003      	add	sp, #12
   d8d62:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d8d66:	4760      	bx	ip
   d8d68:	4619      	mov	r1, r3
   d8d6a:	9301      	str	r3, [sp, #4]
   d8d6c:	f000 f858 	bl	d8e20 <_ZNKSt9type_infoeqERKS_>
   d8d70:	9b01      	ldr	r3, [sp, #4]
   d8d72:	2800      	cmp	r0, #0
   d8d74:	d0ed      	beq.n	d8d52 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d8d76:	2006      	movs	r0, #6
   d8d78:	b003      	add	sp, #12
   d8d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8d7c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d8d7c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8d80:	460d      	mov	r5, r1
   d8d82:	4619      	mov	r1, r3
   d8d84:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d8d88:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d8d8c:	4681      	mov	r9, r0
   d8d8e:	4617      	mov	r7, r2
   d8d90:	4698      	mov	r8, r3
   d8d92:	f000 f845 	bl	d8e20 <_ZNKSt9type_infoeqERKS_>
   d8d96:	b190      	cbz	r0, d8dbe <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d8d98:	2d00      	cmp	r5, #0
   d8d9a:	6034      	str	r4, [r6, #0]
   d8d9c:	7137      	strb	r7, [r6, #4]
   d8d9e:	db09      	blt.n	d8db4 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d8da0:	1961      	adds	r1, r4, r5
   d8da2:	458a      	cmp	sl, r1
   d8da4:	bf0c      	ite	eq
   d8da6:	2106      	moveq	r1, #6
   d8da8:	2101      	movne	r1, #1
   d8daa:	71b1      	strb	r1, [r6, #6]
   d8dac:	2000      	movs	r0, #0
   d8dae:	b001      	add	sp, #4
   d8db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8db4:	3502      	adds	r5, #2
   d8db6:	d1f9      	bne.n	d8dac <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d8db8:	2301      	movs	r3, #1
   d8dba:	71b3      	strb	r3, [r6, #6]
   d8dbc:	e7f6      	b.n	d8dac <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d8dbe:	4554      	cmp	r4, sl
   d8dc0:	d106      	bne.n	d8dd0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d8dc2:	4659      	mov	r1, fp
   d8dc4:	4648      	mov	r0, r9
   d8dc6:	f000 f82b 	bl	d8e20 <_ZNKSt9type_infoeqERKS_>
   d8dca:	b108      	cbz	r0, d8dd0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d8dcc:	7177      	strb	r7, [r6, #5]
   d8dce:	e7ed      	b.n	d8dac <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d8dd0:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d8dd4:	6803      	ldr	r3, [r0, #0]
   d8dd6:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d8dda:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d8dde:	69dc      	ldr	r4, [r3, #28]
   d8de0:	463a      	mov	r2, r7
   d8de2:	4643      	mov	r3, r8
   d8de4:	4629      	mov	r1, r5
   d8de6:	46a4      	mov	ip, r4
   d8de8:	b001      	add	sp, #4
   d8dea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8dee:	4760      	bx	ip

000d8df0 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d8df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8df4:	4607      	mov	r7, r0
   d8df6:	460c      	mov	r4, r1
   d8df8:	4615      	mov	r5, r2
   d8dfa:	461e      	mov	r6, r3
   d8dfc:	f7ff ff6d 	bl	d8cda <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d8e00:	b948      	cbnz	r0, d8e16 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d8e02:	68b8      	ldr	r0, [r7, #8]
   d8e04:	6803      	ldr	r3, [r0, #0]
   d8e06:	699f      	ldr	r7, [r3, #24]
   d8e08:	462a      	mov	r2, r5
   d8e0a:	4633      	mov	r3, r6
   d8e0c:	4621      	mov	r1, r4
   d8e0e:	46bc      	mov	ip, r7
   d8e10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d8e14:	4760      	bx	ip
   d8e16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d8e1a <_ZNSt9type_infoD1Ev>:
   d8e1a:	4770      	bx	lr

000d8e1c <_ZNKSt9type_info14__is_pointer_pEv>:
   d8e1c:	2000      	movs	r0, #0
   d8e1e:	4770      	bx	lr

000d8e20 <_ZNKSt9type_infoeqERKS_>:
   d8e20:	4281      	cmp	r1, r0
   d8e22:	b508      	push	{r3, lr}
   d8e24:	d00e      	beq.n	d8e44 <_ZNKSt9type_infoeqERKS_+0x24>
   d8e26:	6840      	ldr	r0, [r0, #4]
   d8e28:	7803      	ldrb	r3, [r0, #0]
   d8e2a:	2b2a      	cmp	r3, #42	; 0x2a
   d8e2c:	d00c      	beq.n	d8e48 <_ZNKSt9type_infoeqERKS_+0x28>
   d8e2e:	6849      	ldr	r1, [r1, #4]
   d8e30:	780b      	ldrb	r3, [r1, #0]
   d8e32:	2b2a      	cmp	r3, #42	; 0x2a
   d8e34:	bf08      	it	eq
   d8e36:	3101      	addeq	r1, #1
   d8e38:	f000 f88f 	bl	d8f5a <strcmp>
   d8e3c:	fab0 f080 	clz	r0, r0
   d8e40:	0940      	lsrs	r0, r0, #5
   d8e42:	bd08      	pop	{r3, pc}
   d8e44:	2001      	movs	r0, #1
   d8e46:	e7fc      	b.n	d8e42 <_ZNKSt9type_infoeqERKS_+0x22>
   d8e48:	2000      	movs	r0, #0
   d8e4a:	e7fa      	b.n	d8e42 <_ZNKSt9type_infoeqERKS_+0x22>

000d8e4c <__cxa_atexit>:
   d8e4c:	b510      	push	{r4, lr}
   d8e4e:	4c05      	ldr	r4, [pc, #20]	; (d8e64 <__cxa_atexit+0x18>)
   d8e50:	4613      	mov	r3, r2
   d8e52:	b12c      	cbz	r4, d8e60 <__cxa_atexit+0x14>
   d8e54:	460a      	mov	r2, r1
   d8e56:	4601      	mov	r1, r0
   d8e58:	2002      	movs	r0, #2
   d8e5a:	f3af 8000 	nop.w
   d8e5e:	bd10      	pop	{r4, pc}
   d8e60:	4620      	mov	r0, r4
   d8e62:	e7fc      	b.n	d8e5e <__cxa_atexit+0x12>
   d8e64:	00000000 	.word	0x00000000

000d8e68 <memcmp>:
   d8e68:	b530      	push	{r4, r5, lr}
   d8e6a:	3901      	subs	r1, #1
   d8e6c:	2400      	movs	r4, #0
   d8e6e:	42a2      	cmp	r2, r4
   d8e70:	d101      	bne.n	d8e76 <memcmp+0xe>
   d8e72:	2000      	movs	r0, #0
   d8e74:	e005      	b.n	d8e82 <memcmp+0x1a>
   d8e76:	5d03      	ldrb	r3, [r0, r4]
   d8e78:	3401      	adds	r4, #1
   d8e7a:	5d0d      	ldrb	r5, [r1, r4]
   d8e7c:	42ab      	cmp	r3, r5
   d8e7e:	d0f6      	beq.n	d8e6e <memcmp+0x6>
   d8e80:	1b58      	subs	r0, r3, r5
   d8e82:	bd30      	pop	{r4, r5, pc}

000d8e84 <memcpy>:
   d8e84:	440a      	add	r2, r1
   d8e86:	4291      	cmp	r1, r2
   d8e88:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d8e8c:	d100      	bne.n	d8e90 <memcpy+0xc>
   d8e8e:	4770      	bx	lr
   d8e90:	b510      	push	{r4, lr}
   d8e92:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8e96:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8e9a:	4291      	cmp	r1, r2
   d8e9c:	d1f9      	bne.n	d8e92 <memcpy+0xe>
   d8e9e:	bd10      	pop	{r4, pc}

000d8ea0 <memmove>:
   d8ea0:	4288      	cmp	r0, r1
   d8ea2:	b510      	push	{r4, lr}
   d8ea4:	eb01 0402 	add.w	r4, r1, r2
   d8ea8:	d902      	bls.n	d8eb0 <memmove+0x10>
   d8eaa:	4284      	cmp	r4, r0
   d8eac:	4623      	mov	r3, r4
   d8eae:	d807      	bhi.n	d8ec0 <memmove+0x20>
   d8eb0:	1e43      	subs	r3, r0, #1
   d8eb2:	42a1      	cmp	r1, r4
   d8eb4:	d008      	beq.n	d8ec8 <memmove+0x28>
   d8eb6:	f811 2b01 	ldrb.w	r2, [r1], #1
   d8eba:	f803 2f01 	strb.w	r2, [r3, #1]!
   d8ebe:	e7f8      	b.n	d8eb2 <memmove+0x12>
   d8ec0:	4402      	add	r2, r0
   d8ec2:	4601      	mov	r1, r0
   d8ec4:	428a      	cmp	r2, r1
   d8ec6:	d100      	bne.n	d8eca <memmove+0x2a>
   d8ec8:	bd10      	pop	{r4, pc}
   d8eca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d8ece:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d8ed2:	e7f7      	b.n	d8ec4 <memmove+0x24>

000d8ed4 <memset>:
   d8ed4:	4402      	add	r2, r0
   d8ed6:	4603      	mov	r3, r0
   d8ed8:	4293      	cmp	r3, r2
   d8eda:	d100      	bne.n	d8ede <memset+0xa>
   d8edc:	4770      	bx	lr
   d8ede:	f803 1b01 	strb.w	r1, [r3], #1
   d8ee2:	e7f9      	b.n	d8ed8 <memset+0x4>

000d8ee4 <srand>:
   d8ee4:	b538      	push	{r3, r4, r5, lr}
   d8ee6:	4b0d      	ldr	r3, [pc, #52]	; (d8f1c <srand+0x38>)
   d8ee8:	681d      	ldr	r5, [r3, #0]
   d8eea:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d8eec:	4604      	mov	r4, r0
   d8eee:	b97b      	cbnz	r3, d8f10 <srand+0x2c>
   d8ef0:	2018      	movs	r0, #24
   d8ef2:	f7fb ff71 	bl	d4dd8 <malloc>
   d8ef6:	4a0a      	ldr	r2, [pc, #40]	; (d8f20 <srand+0x3c>)
   d8ef8:	4b0a      	ldr	r3, [pc, #40]	; (d8f24 <srand+0x40>)
   d8efa:	63a8      	str	r0, [r5, #56]	; 0x38
   d8efc:	e9c0 2300 	strd	r2, r3, [r0]
   d8f00:	4b09      	ldr	r3, [pc, #36]	; (d8f28 <srand+0x44>)
   d8f02:	6083      	str	r3, [r0, #8]
   d8f04:	230b      	movs	r3, #11
   d8f06:	8183      	strh	r3, [r0, #12]
   d8f08:	2201      	movs	r2, #1
   d8f0a:	2300      	movs	r3, #0
   d8f0c:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d8f10:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d8f12:	2200      	movs	r2, #0
   d8f14:	611c      	str	r4, [r3, #16]
   d8f16:	615a      	str	r2, [r3, #20]
   d8f18:	bd38      	pop	{r3, r4, r5, pc}
   d8f1a:	bf00      	nop
   d8f1c:	2003de84 	.word	0x2003de84
   d8f20:	abcd330e 	.word	0xabcd330e
   d8f24:	e66d1234 	.word	0xe66d1234
   d8f28:	0005deec 	.word	0x0005deec

000d8f2c <strchr>:
   d8f2c:	b2c9      	uxtb	r1, r1
   d8f2e:	4603      	mov	r3, r0
   d8f30:	f810 2b01 	ldrb.w	r2, [r0], #1
   d8f34:	b11a      	cbz	r2, d8f3e <strchr+0x12>
   d8f36:	428a      	cmp	r2, r1
   d8f38:	d1f9      	bne.n	d8f2e <strchr+0x2>
   d8f3a:	4618      	mov	r0, r3
   d8f3c:	4770      	bx	lr
   d8f3e:	2900      	cmp	r1, #0
   d8f40:	bf18      	it	ne
   d8f42:	2300      	movne	r3, #0
   d8f44:	e7f9      	b.n	d8f3a <strchr+0xe>

000d8f46 <strchrnul>:
   d8f46:	b510      	push	{r4, lr}
   d8f48:	4604      	mov	r4, r0
   d8f4a:	f7ff ffef 	bl	d8f2c <strchr>
   d8f4e:	b918      	cbnz	r0, d8f58 <strchrnul+0x12>
   d8f50:	4620      	mov	r0, r4
   d8f52:	f000 f832 	bl	d8fba <strlen>
   d8f56:	4420      	add	r0, r4
   d8f58:	bd10      	pop	{r4, pc}

000d8f5a <strcmp>:
   d8f5a:	f810 2b01 	ldrb.w	r2, [r0], #1
   d8f5e:	f811 3b01 	ldrb.w	r3, [r1], #1
   d8f62:	2a01      	cmp	r2, #1
   d8f64:	bf28      	it	cs
   d8f66:	429a      	cmpcs	r2, r3
   d8f68:	d0f7      	beq.n	d8f5a <strcmp>
   d8f6a:	1ad0      	subs	r0, r2, r3
   d8f6c:	4770      	bx	lr

000d8f6e <strcpy>:
   d8f6e:	4603      	mov	r3, r0
   d8f70:	f811 2b01 	ldrb.w	r2, [r1], #1
   d8f74:	f803 2b01 	strb.w	r2, [r3], #1
   d8f78:	2a00      	cmp	r2, #0
   d8f7a:	d1f9      	bne.n	d8f70 <strcpy+0x2>
   d8f7c:	4770      	bx	lr
	...

000d8f80 <strdup>:
   d8f80:	4b02      	ldr	r3, [pc, #8]	; (d8f8c <strdup+0xc>)
   d8f82:	4601      	mov	r1, r0
   d8f84:	6818      	ldr	r0, [r3, #0]
   d8f86:	f000 b803 	b.w	d8f90 <_strdup_r>
   d8f8a:	bf00      	nop
   d8f8c:	2003de84 	.word	0x2003de84

000d8f90 <_strdup_r>:
   d8f90:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d8f92:	4604      	mov	r4, r0
   d8f94:	4608      	mov	r0, r1
   d8f96:	460d      	mov	r5, r1
   d8f98:	f000 f80f 	bl	d8fba <strlen>
   d8f9c:	1c42      	adds	r2, r0, #1
   d8f9e:	4611      	mov	r1, r2
   d8fa0:	4620      	mov	r0, r4
   d8fa2:	9201      	str	r2, [sp, #4]
   d8fa4:	f7fb ff40 	bl	d4e28 <_malloc_r>
   d8fa8:	4604      	mov	r4, r0
   d8faa:	b118      	cbz	r0, d8fb4 <_strdup_r+0x24>
   d8fac:	9a01      	ldr	r2, [sp, #4]
   d8fae:	4629      	mov	r1, r5
   d8fb0:	f7ff ff68 	bl	d8e84 <memcpy>
   d8fb4:	4620      	mov	r0, r4
   d8fb6:	b003      	add	sp, #12
   d8fb8:	bd30      	pop	{r4, r5, pc}

000d8fba <strlen>:
   d8fba:	4603      	mov	r3, r0
   d8fbc:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8fc0:	2a00      	cmp	r2, #0
   d8fc2:	d1fb      	bne.n	d8fbc <strlen+0x2>
   d8fc4:	1a18      	subs	r0, r3, r0
   d8fc6:	3801      	subs	r0, #1
   d8fc8:	4770      	bx	lr

000d8fca <strncmp>:
   d8fca:	b510      	push	{r4, lr}
   d8fcc:	b16a      	cbz	r2, d8fea <strncmp+0x20>
   d8fce:	3901      	subs	r1, #1
   d8fd0:	1884      	adds	r4, r0, r2
   d8fd2:	f810 3b01 	ldrb.w	r3, [r0], #1
   d8fd6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d8fda:	4293      	cmp	r3, r2
   d8fdc:	d103      	bne.n	d8fe6 <strncmp+0x1c>
   d8fde:	42a0      	cmp	r0, r4
   d8fe0:	d001      	beq.n	d8fe6 <strncmp+0x1c>
   d8fe2:	2b00      	cmp	r3, #0
   d8fe4:	d1f5      	bne.n	d8fd2 <strncmp+0x8>
   d8fe6:	1a98      	subs	r0, r3, r2
   d8fe8:	bd10      	pop	{r4, pc}
   d8fea:	4610      	mov	r0, r2
   d8fec:	e7fc      	b.n	d8fe8 <strncmp+0x1e>

000d8fee <strnlen>:
   d8fee:	b510      	push	{r4, lr}
   d8ff0:	4602      	mov	r2, r0
   d8ff2:	4401      	add	r1, r0
   d8ff4:	428a      	cmp	r2, r1
   d8ff6:	4613      	mov	r3, r2
   d8ff8:	d101      	bne.n	d8ffe <strnlen+0x10>
   d8ffa:	1a18      	subs	r0, r3, r0
   d8ffc:	bd10      	pop	{r4, pc}
   d8ffe:	781c      	ldrb	r4, [r3, #0]
   d9000:	3201      	adds	r2, #1
   d9002:	2c00      	cmp	r4, #0
   d9004:	d1f6      	bne.n	d8ff4 <strnlen+0x6>
   d9006:	e7f8      	b.n	d8ffa <strnlen+0xc>

000d9008 <strrchr>:
   d9008:	b538      	push	{r3, r4, r5, lr}
   d900a:	4603      	mov	r3, r0
   d900c:	460c      	mov	r4, r1
   d900e:	b969      	cbnz	r1, d902c <strrchr+0x24>
   d9010:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d9014:	f7ff bf8a 	b.w	d8f2c <strchr>
   d9018:	1c43      	adds	r3, r0, #1
   d901a:	4605      	mov	r5, r0
   d901c:	4621      	mov	r1, r4
   d901e:	4618      	mov	r0, r3
   d9020:	f7ff ff84 	bl	d8f2c <strchr>
   d9024:	2800      	cmp	r0, #0
   d9026:	d1f7      	bne.n	d9018 <strrchr+0x10>
   d9028:	4628      	mov	r0, r5
   d902a:	bd38      	pop	{r3, r4, r5, pc}
   d902c:	2500      	movs	r5, #0
   d902e:	e7f5      	b.n	d901c <strrchr+0x14>

000d9030 <_strtol_l.isra.0>:
   d9030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9034:	4e3a      	ldr	r6, [pc, #232]	; (d9120 <_strtol_l.isra.0+0xf0>)
   d9036:	4686      	mov	lr, r0
   d9038:	468c      	mov	ip, r1
   d903a:	4660      	mov	r0, ip
   d903c:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d9040:	5da5      	ldrb	r5, [r4, r6]
   d9042:	f015 0508 	ands.w	r5, r5, #8
   d9046:	d1f8      	bne.n	d903a <_strtol_l.isra.0+0xa>
   d9048:	2c2d      	cmp	r4, #45	; 0x2d
   d904a:	d133      	bne.n	d90b4 <_strtol_l.isra.0+0x84>
   d904c:	f89c 4000 	ldrb.w	r4, [ip]
   d9050:	f04f 0801 	mov.w	r8, #1
   d9054:	f100 0c02 	add.w	ip, r0, #2
   d9058:	2b00      	cmp	r3, #0
   d905a:	d05c      	beq.n	d9116 <_strtol_l.isra.0+0xe6>
   d905c:	2b10      	cmp	r3, #16
   d905e:	d10c      	bne.n	d907a <_strtol_l.isra.0+0x4a>
   d9060:	2c30      	cmp	r4, #48	; 0x30
   d9062:	d10a      	bne.n	d907a <_strtol_l.isra.0+0x4a>
   d9064:	f89c 0000 	ldrb.w	r0, [ip]
   d9068:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d906c:	2858      	cmp	r0, #88	; 0x58
   d906e:	d14d      	bne.n	d910c <_strtol_l.isra.0+0xdc>
   d9070:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d9074:	2310      	movs	r3, #16
   d9076:	f10c 0c02 	add.w	ip, ip, #2
   d907a:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d907e:	3f01      	subs	r7, #1
   d9080:	2600      	movs	r6, #0
   d9082:	fbb7 f9f3 	udiv	r9, r7, r3
   d9086:	4630      	mov	r0, r6
   d9088:	fb03 7a19 	mls	sl, r3, r9, r7
   d908c:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d9090:	2d09      	cmp	r5, #9
   d9092:	d818      	bhi.n	d90c6 <_strtol_l.isra.0+0x96>
   d9094:	462c      	mov	r4, r5
   d9096:	42a3      	cmp	r3, r4
   d9098:	dd24      	ble.n	d90e4 <_strtol_l.isra.0+0xb4>
   d909a:	1c75      	adds	r5, r6, #1
   d909c:	d007      	beq.n	d90ae <_strtol_l.isra.0+0x7e>
   d909e:	4581      	cmp	r9, r0
   d90a0:	d31d      	bcc.n	d90de <_strtol_l.isra.0+0xae>
   d90a2:	d101      	bne.n	d90a8 <_strtol_l.isra.0+0x78>
   d90a4:	45a2      	cmp	sl, r4
   d90a6:	db1a      	blt.n	d90de <_strtol_l.isra.0+0xae>
   d90a8:	fb00 4003 	mla	r0, r0, r3, r4
   d90ac:	2601      	movs	r6, #1
   d90ae:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d90b2:	e7eb      	b.n	d908c <_strtol_l.isra.0+0x5c>
   d90b4:	2c2b      	cmp	r4, #43	; 0x2b
   d90b6:	bf08      	it	eq
   d90b8:	f89c 4000 	ldrbeq.w	r4, [ip]
   d90bc:	46a8      	mov	r8, r5
   d90be:	bf08      	it	eq
   d90c0:	f100 0c02 	addeq.w	ip, r0, #2
   d90c4:	e7c8      	b.n	d9058 <_strtol_l.isra.0+0x28>
   d90c6:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d90ca:	2d19      	cmp	r5, #25
   d90cc:	d801      	bhi.n	d90d2 <_strtol_l.isra.0+0xa2>
   d90ce:	3c37      	subs	r4, #55	; 0x37
   d90d0:	e7e1      	b.n	d9096 <_strtol_l.isra.0+0x66>
   d90d2:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d90d6:	2d19      	cmp	r5, #25
   d90d8:	d804      	bhi.n	d90e4 <_strtol_l.isra.0+0xb4>
   d90da:	3c57      	subs	r4, #87	; 0x57
   d90dc:	e7db      	b.n	d9096 <_strtol_l.isra.0+0x66>
   d90de:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d90e2:	e7e4      	b.n	d90ae <_strtol_l.isra.0+0x7e>
   d90e4:	1c73      	adds	r3, r6, #1
   d90e6:	d106      	bne.n	d90f6 <_strtol_l.isra.0+0xc6>
   d90e8:	2322      	movs	r3, #34	; 0x22
   d90ea:	f8ce 3000 	str.w	r3, [lr]
   d90ee:	4638      	mov	r0, r7
   d90f0:	b942      	cbnz	r2, d9104 <_strtol_l.isra.0+0xd4>
   d90f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d90f6:	f1b8 0f00 	cmp.w	r8, #0
   d90fa:	d000      	beq.n	d90fe <_strtol_l.isra.0+0xce>
   d90fc:	4240      	negs	r0, r0
   d90fe:	2a00      	cmp	r2, #0
   d9100:	d0f7      	beq.n	d90f2 <_strtol_l.isra.0+0xc2>
   d9102:	b10e      	cbz	r6, d9108 <_strtol_l.isra.0+0xd8>
   d9104:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   d9108:	6011      	str	r1, [r2, #0]
   d910a:	e7f2      	b.n	d90f2 <_strtol_l.isra.0+0xc2>
   d910c:	2430      	movs	r4, #48	; 0x30
   d910e:	2b00      	cmp	r3, #0
   d9110:	d1b3      	bne.n	d907a <_strtol_l.isra.0+0x4a>
   d9112:	2308      	movs	r3, #8
   d9114:	e7b1      	b.n	d907a <_strtol_l.isra.0+0x4a>
   d9116:	2c30      	cmp	r4, #48	; 0x30
   d9118:	d0a4      	beq.n	d9064 <_strtol_l.isra.0+0x34>
   d911a:	230a      	movs	r3, #10
   d911c:	e7ad      	b.n	d907a <_strtol_l.isra.0+0x4a>
   d911e:	bf00      	nop
   d9120:	000d9892 	.word	0x000d9892

000d9124 <strtol>:
   d9124:	4613      	mov	r3, r2
   d9126:	460a      	mov	r2, r1
   d9128:	4601      	mov	r1, r0
   d912a:	4802      	ldr	r0, [pc, #8]	; (d9134 <strtol+0x10>)
   d912c:	6800      	ldr	r0, [r0, #0]
   d912e:	f7ff bf7f 	b.w	d9030 <_strtol_l.isra.0>
   d9132:	bf00      	nop
   d9134:	2003de84 	.word	0x2003de84

000d9138 <dynalib_user>:
   d9138:	000d401d 000d4059 000d4081 000d4085     .@..Y@...@...@..
   d9148:	00000000 4c4c4548 5053004f 41494345     ....HELLO.SPECIA
   d9158:	454d204c 47415353 45522045 56494543     L MESSAGE RECEIV
   d9168:	53004445 49434550 4d204c41 41535345     ED.SPECIAL MESSA
   d9178:	74004547 65707075 72617772 70755f65     GE.tupperware_up
   d9188:	64616f6c 70755400 77726570 5f657261     load.Tupperware_
   d9198:	542c3331 65707075 72617772 34315f65     13,Tupperware_14
   d91a8:	7075542c 77726570 5f657261 54003531     ,Tupperware_15.T
   d91b8:	65677261 654e0074 614e5f77 6100656d     arget.New_Name.a
   d91c8:	72657664 65736974 72655300 206c6169     dvertise.Serial 
   d91d8:	61746144 63655220 65766965 53002064     Data Received .S
   d91e8:	61697265 7372006c 253d6973 64612064     erial.rssi=%d ad
   d91f8:	73657264 30253d73 253a5832 3a583230     dress=%02X:%02X:
   d9208:	58323025 3230253a 30253a58 253a5832     %02X:%02X:%02X:%
   d9218:	20583230 6441000a 74726576 6e697369     02X ..Advertisin
   d9228:	616e2067 203a656d 0a207325 63767300     g name: %s ..svc
   d9238:	6e756f43 203d2074 0a206425 756f6600     Count = %d ..fou
   d9248:	6553646e 63697672 69755565 203d2064     ndServiceUuid = 
   d9258:	0a205825 70755400 77726570 5f657261     %X ..Tupperware_
   d9268:	54003331 65707075 72617772 34315f65     13.Tupperware_14
   d9278:	65724600 75536873 79746572 5241555f     .FreshSurety_UAR
   d9288:	6f630054 63656e6e 45360074 30303034     T.connect.6E4000
   d9298:	422d3130 2d334135 33393346 4130452d     01-B5A3-F393-E0A
   d92a8:	35452d39 34324530 41434344 36004539     9-E50E24DCCA9E.6
   d92b8:	30303445 2d323030 33413542 3933462d     E400002-B5A3-F39
   d92c8:	30452d33 452d3941 32453035 43434434     3-E0A9-E50E24DCC
   d92d8:	00453941 30344536 33303030 4135422d     A9E.6E400003-B5A
   d92e8:	33462d33 452d3339 2d394130 45303545     3-F393-E0A9-E50E
   d92f8:	43443432 45394143 00787400 00007872     24DCCA9E.tx.rx..

000d9308 <_ZTVN5spark10LogHandlerE>:
	...
   d9318:	000d409d 000d40c1                       .@...@..

000d9320 <_ZTVN5spark16SerialLogHandlerE>:
	...
   d9328:	000d40e9 000d411d 000d8029 000d40c3     .@...A..)....@..
   d9338:	69726977 622e676e 5300656c 74726174     wiring.ble.Start
   d9348:	73696420 65766f63 676e6972 72657320      discovering ser
   d9358:	65636976 53002e73 74726174 73696420     vices..Start dis
   d9368:	65766f63 676e6972 61686320 74636172     covering charact
   d9378:	73697265 73636974 6550002e 64207265     eristics..Peer d
   d9388:	63697665 73692065 73696d20 676e6973     evice is missing
   d9398:	61460021 64656c69 206f7420 65707061     !.Failed to appe
   d93a8:	7020646e 20726565 746e6543 206c6172     nd peer Central 
   d93b8:	69766564 002e6563 6e6e6f43 65746365     device..Connecte
   d93c8:	79622064 6e654320 6c617274 76656420     d by Central dev
   d93d8:	2e656369 73694400 6e6e6f63 65746365     ice..Disconnecte
   d93e8:	79622064 6d657220 2065746f 69766564     d by remote devi
   d93f8:	002e6563 6c696146 74206465 7061206f     ce..Failed to ap
   d9408:	646e6570 73696420 65766f63 20646572     pend discovered 
   d9418:	76726573 2e656369 6e614300 20746f6e     service..Cannot 
   d9428:	20646461 2077656e 72656570 76656420     add new peer dev
   d9438:	2e656369 77654e00 72657020 65687069     ice..New periphe
   d9448:	206c6172 63207369 656e6e6f 64657463     ral is connected
   d9458:	6146002e 64656c69 206f7420 65707061     ..Failed to appe
   d9468:	6420646e 6f637369 65726576 68632064     nd discovered ch
   d9478:	63617261 69726574 63697473 7544002e     aracteristic..Du
   d9488:	63696c70 64657461 61686320 74636172     plicated charact
   d9498:	73697265 20636974 6e6e6163 6220746f     eristic cannot b
   d94a8:	64612065 2e646564 69614600 2064656c     e added..Failed 
   d94b8:	61206f74 6e657070 6f6c2064 206c6163     to append local 
   d94c8:	72616863 65746361 74736972 002e6369     characteristic..

000d94d8 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d94e0:	000d4e7d 000d4ee7 000d4ee1 000d4f11     }N...N...N...O..
   d94f0:	000d4e81                                .N..

000d94f4 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d94fc:	000d4e79 000d4ef5 000d4e7b 000d4f15     yN...N..{N...O..
   d950c:	000d4ea1                                .N..

000d9510 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d9518:	000d4e77 000d4f03 000d5d29 000d4f19     wN...O..)]...O..
   d9528:	000d4ec1                                .N..

000d952c <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   d9534:	5f9b34fb 80000080 00001000 00000000     .4._............

000d9544 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   d9544:	7427e37b ac15f87b 13a949dd f5720000     {.'t{....I....r.

000d9554 <_ZN8particle7BleUuid9BASE_UUIDE>:
   d9554:	5f9b34fb 80000080 00001000 00000000     .4._............

000d9564 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d956c:	000d6931 000d6937 000d6987 000d6945     1i..7i...i..Ei..
   d957c:	000d6933                                3i..

000d9580 <_ZTVN5spark13EthernetClassE>:
	...
   d9588:	000d6eff 000d6ef5 000d6eeb 000d6ee1     .n...n...n...n..
   d9598:	000d6ed5 000d6ec9 000d6ebd 000d6eb5     .n...n...n...n..
   d95a8:	000d6eab 000d6ea1 000d83a9              .n...n......

000d95b4 <_ZTV9IPAddress>:
	...
   d95bc:	000d6f2d 000d6f1d 000d6f1f 25006425     -o...o...o..%d.%
   d95cc:	25750075 00783430 64756162 72655300     u.u%04x.baud.Ser
   d95dc:	316c6169 4f534a00 7274534e 4c6d6165     ial1.JSONStreamL
   d95ec:	6148676f 656c646e 70610072 30250070     ogHandler.app.%0
   d95fc:	20753031 00205d00 2800202c 00203a29     10u .] ., .(): .
   d960c:	63005b20 2065646f 2500203d 65640069      [.code = .%i.de
   d961c:	6c696174 203d2073 000a0d00 0063006d     tails = ....m.c.
   d962c:	6e6c0066 006e6600 65646f63 74656400     f.ln.fn.code.det
   d963c:	006c6961                                ail.

000d9640 <_ZTVN5spark16JSONStreamWriterE>:
	...
   d9648:	000d73e7 000d740d 000d73cd 000d702d     .s...t...s..-p..

000d9658 <_ZTVN5spark16StreamLogHandlerE>:
	...
   d9660:	000d7851 000d7869 000d8029 000d40c3     Qx..ix..)....@..

000d9670 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   d9678:	000d787d 000d7891 000d81cd 000d73d5     }x...x.......s..

000d9688 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   d9690:	000d73e5 000d741b 000d7f65 000d73d7     .s...t..e....s..

000d96a0 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   d96a8:	000d73e3 000d7429 000d7799 000d7445     .s..)t...w..Et..

000d96b8 <_ZTVN5spark12NetworkClassE>:
	...
   d96c0:	000d8341 000d834b 000d8355 000d835f     A...K...U..._...
   d96d0:	000d8369 000d8375 000d8381 000d838d     i...u...........
   d96e0:	000d8395 000d839f 000d83a9 252d5925     ............%Y-%
   d96f0:	64252d6d 3a482554 253a4d25 007a2553     m-%dT%H:%M:%S%z.
   d9700:	74637361 00656d69                       asctime.

000d9708 <_ZTV11USARTSerial>:
	...
   d9710:	000d8849 000d88b5 000d888d 000d8491     I...............
   d9720:	000d885d 000d8879 000d886b 000d8887     ]...y...k.......
   d9730:	000d884b 000d884f                       K...O...

000d9738 <_ZTV9USBSerial>:
	...
   d9740:	000d895d 000d89c5 000d899b 000d8491     ]...............
   d9750:	000d898d 000d895f 000d896f 000d89bf     ...._...o.......
   d9760:	000d897f 000d8959                       ....Y...

000d9768 <_ZTVN5spark9WiFiClassE>:
	...
   d9770:	000d8acf 000d8ac5 000d8abb 000d8a71     ............q...
   d9780:	000d8aaf 000d8aa3 000d8a97 000d8a8f     ................
   d9790:	000d8a85 000d8a7b 000d83a9              ....{.......

000d979c <_ZSt7nothrow>:
	...

000d979d <_ZTSSt19_Sp_make_shared_tag>:
   d979d:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   d97ad:	5f646572 00676174                        red_tag....

000d97b8 <_ZTISt19_Sp_make_shared_tag>:
   d97b8:	000d97f8 000d979d                       ........

000d97c0 <_ZTIN10__cxxabiv117__class_type_infoE>:
   d97c0:	000d9858 000d97cc 000d987c              X.......|...

000d97cc <_ZTSN10__cxxabiv117__class_type_infoE>:
   d97cc:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   d97dc:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   d97ec:	00000045                                E...

000d97f0 <_ZTVN10__cxxabiv117__class_type_infoE>:
   d97f0:	00000000 000d97c0 000d8c75 000d8c89     ........u.......
   d9800:	000d8e1d 000d8e1d 000d8cf3 000d8c35     ............5...
   d9810:	000d8cdb 000d8c9d 000d8c69              ........i...

000d981c <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   d981c:	000d9858 000d9828 000d97c0              X...(.......

000d9828 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   d9828:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   d9838:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   d9848:	456f666e 00000000                       nfoE....

000d9850 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   d9850:	00000000 000d981c 000d8d1d 000d8d31     ............1...
   d9860:	000d8e1d 000d8e1d 000d8cf3 000d8c35     ............5...
   d9870:	000d8df1 000d8d7d 000d8d45              ....}...E...

000d987c <_ZTISt9type_info>:
   d987c:	000d97f8 000d9884                       ........

000d9884 <_ZTSSt9type_info>:
   d9884:	74397453 5f657079 6f666e69               St9type_info.

000d9891 <_ctype_>:
   d9891:	20202000 20202020 28282020 20282828     .         ((((( 
   d98a1:	20202020 20202020 20202020 20202020                     
   d98b1:	10108820 10101010 10101010 10101010      ...............
   d98c1:	04040410 04040404 10040404 10101010     ................
   d98d1:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d98e1:	01010101 01010101 01010101 10101010     ................
   d98f1:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d9901:	02020202 02020202 02020202 10101010     ................
   d9911:	00000020 00000000 00000000 00000000      ...............
	...

000d9992 <link_const_variable_data_end>:
	...

000d9994 <link_constructors_location>:
   d9994:	000d476d 	.word	0x000d476d
   d9998:	000d6909 	.word	0x000d6909
   d999c:	000d6f09 	.word	0x000d6f09
   d99a0:	000d8019 	.word	0x000d8019
   d99a4:	000d847d 	.word	0x000d847d
   d99a8:	000d85a9 	.word	0x000d85a9
   d99ac:	000d87f9 	.word	0x000d87f9
   d99b0:	000d8835 	.word	0x000d8835
   d99b4:	000d8ad9 	.word	0x000d8ad9

000d99b8 <link_constructors_end>:
	...
